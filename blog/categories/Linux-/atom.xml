<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux, | 不停地疯]]></title>
  <link href="http://blog.xeonxu.info/blog/categories/Linux-/atom.xml" rel="self"/>
  <link href="http://blog.xeonxu.info/"/>
  <updated>2013-05-17T00:09:02+08:00</updated>
  <id>http://blog.xeonxu.info/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搞了个半自动化的Vim]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/05/14/gao-liao-ge-ban-zi-dong-hua-de-vim/"/>
    <updated>2013-05-14T22:48:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/05/14/gao-liao-ge-ban-zi-dong-hua-de-vim</id>
    <content type="html"><![CDATA[<p>
平时单位里Linux下使用wine＋sourceinsight查看代码，用emacs写代码。最近公司搞正版化，自然sourceinsight也就不能再使用了，本想自定义一下emacs做类似功能，但苦于自己三脚猫的Lisp，加上之前的配置有点杂乱，所以想着先用vim顶两天，然后再自己抽空重构一下emacs的配置结构和功能，顺便也能从vim那里偷点师。几天下来，vim也被我配置得可以替代sourceinsight大部分的功能，使用起来还算不错。推荐给同事们使用，也都很满意。这里简单讲讲我的配置思路。
</p>
<p>
对于工作中的编辑器，我有以下几个基本要求：
</p>
<ol>
<li>文件查找方便
</li>
<li>格式自动化
</li>
<li>自动补全
</li>
<li>符号跳转
</li>
<li>函数列表
</li>
<li>tab/buffer支持
</li>
<li>session保存
</li>
</ol>

<p>
对于第一个需求，我使用了有口皆碑的lookupfile插件，这个插件可以从tag文件中快速查找文件，也可以在自己生成的文件列表中查找。我自己是使用文件列表的方式来查找，速度同样很快。之前也有使用过另外一个类似功能的插件，ctrlp。但是这个插件第一次使用时都要将当前目录下的所有文件遍历一遍，对于大型项目来说，速度还是有点慢。所以ctrlp被我抛弃了；第二个需求，vim貌似原生支持就不赖，直接=就可以；第三个需求，我选择了强大的YouCompleteMe插件。YCM插件使用了Clang编译器做后端，可以在编写程序时快速的分析代码，提供准确的自动补全列表。对于第四个需求符号跳转，本来使用的是cscope，功能很强大也够用，但是修改文件后更新符号文件比较慢，所以经常也就懒得更新符号文件，导致跳转的地方经常有偏差。后来发现有个GNU global可以非常快速的更新符号文件，加上和现有的cscope插件可以很好的兼容，所以我也就换成了用GNU global做符号跳转支持了。同时，我还加入了hook在保存程序文件后自动调用global进行更新符号文件。从此以后就再也不用担心更新符号文件的问题了，保存文件后符号立马生效。第五个需求使用地球人都知道的taglist就好，绑定F8快捷弹出；第六个需求，vim同样原生支持，自己配个好用的快捷键就OK；最后一个需求很有用，vim原生也有支持，但是原生的session不支持tabbar状态的保存，于是我使用了xolox/vim-session这个插件。使用这个插件后，不但可以保存打开文件的状态，光标位置，查找上下文的状态，tabbar的状态也都可以完美保存。这样，在退出vim后，下次打开时还能快速回到上次关闭前的状态，就像在sourceinsight中重新开启工程一样。
</p>
<p>
除此之外，我还添加了一些辅助类插件，比如nerdtree，nerdcommenter，easymotion，powerline等，方便目录浏览，注释等操作。用的不多，但是在某些时候还是有点用的。插件装好之后还不是很顺手，要想方便使用，自己还做了些定制。其中我写了一个脚本，为了帮助快速得建立工程。脚本中从建立lookupfile所用的文件列表到生成更新global符号文件，全部一气呵成。另外，在配置文件中我还添加了几个hook，除了保存特定文件后自动更新符号文件得hook，还有退出vim后自动保存session的hook。最后，将常用功能都绑定到快捷键上，这样使用起来就省力多了。到此，半自动化的vim就算完成了。
</p>
<p>
配置好的内容可以在：<a href="https://github.com/xeonxu/vim_configs"> <code>https://github.com/xeonxu/vim_configs</code> </a> 找到，其中有两个分支，master对应Linux的版本，而macos对应Mac版本。两者的差别便是YCM中二进制文件的格式分别是对应两种系统单独编译的。由于YCM的特殊性，必须要使用最新版的vim才能正常运行，而各大系统的发行版中的vim版本都不是很新，所以需要自己通过vim源代码编译一个才行，这算是唯一的遗憾了。公司里我写了个一键安装脚本，方便同事们的部署，大家使用标准的源码编译安装方式伺候即可。
</p>
<p>
作为一名emacser，跑来研究vim配置说起来也挺难为情。不过配置过程中给我印象最深的是vim的插件配置起来都挺方便，基本都是设置几个变量就好。加上vundle这个插件，很容易让人沉浸在插件的世界里。另外就是vim的启动速度确实快，这让我们这些emacs用户嫉妒不已。还有，lookupfile插件的思路蛮好，emacs上应该可以实现个更好的。另外下次配置emacs时，也要坚持换用global做符号跳转支持了，因为实在是太快太方便了。根据程序员时髦指南的解释，同时使用emacs和vim的人应该烧死，所以我看我还是尽快搞定自己的emacs配置吧。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈自动生成ISO文件的客制化问题]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti/"/>
    <updated>2013-05-13T22:37:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti</id>
    <content type="html"><![CDATA[<p>
由于最近项目中又有要求说要对手机自带的虚拟驱动光盘的内容做客户定制化，于是基于上篇文章中使用make系统动态构建ISO镜像文件的方法，我又加入了客制化脚本的支持。实现的方法很简单，思路是在make工程下规定一个目录专门做客制化目录，目录下包含以不同项目名称命名的子目录，而相应子目录下便是客户定制的具体内容；同时，每个项目子目录中还包含有一个客制化脚本，用于对光盘文件系统进行重命名或者删减的操作。
</p>
<p>
由于之前已经有了自动生成ISO文件的make系统，基于以上的思路实现下来，加入的代码并不多。首先是改造主makefile：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.2</span>
</span><span class='line'><span class="c"># Date: 2013.05.09</span>
</span><span class='line'><span class="c"># Change Log:</span>
</span><span class='line'><span class="c"># 1.1 Makefile to generate cdrom iso file. Only generate iso file without icon in default.</span>
</span><span class='line'><span class="c"># 1.2 Add script support to customize cdrom&#39;s contents.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CDROM_FS</span>            <span class="o">?=</span> ./CDROM_OBJ
</span><span class='line'>TARGET_CDROM        ?<span class="o">=</span> ./cdrom_install.iso
</span><span class='line'>PRODUCT_DRIVERNAME  ?<span class="o">=</span> Phicomm
</span><span class='line'>CDROM_ROOT          ?<span class="o">=</span> ./
</span><span class='line'>
</span><span class='line'>ICON_NAME       :<span class="o">=</span> <span class="s2">&quot;$(PRODUCT_DRIVERNAME).ico&quot;</span>
</span><span class='line'>ORIGIN_ICON     :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>PRODUCT_DRIVERNAME<span class="k">)</span>/<span class="k">$(</span>ICON_NAME<span class="k">)</span>
</span><span class='line'>CUSTOMIZE       :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>PRODUCT_DRIVERNAME<span class="k">)</span>
</span><span class='line'>CUSTOMIZE_SCRIPT :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/custom.sh
</span><span class='line'>AUTORUN_FILE     :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/autorun.inf
</span><span class='line'>
</span><span class='line'>all:<span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>    mkisofs -input-charset utf-8 -V <span class="s2">&quot;$(PRODUCT_DRIVERNAME) Driver&quot;</span> -J -r -l -v -o <span class="k">$(</span>TARGET_CDROM<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>    @rm -f <span class="k">$(</span>TARGET_CDROM<span class="k">)</span>
</span><span class='line'>    @rm -rf <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>cdrom_new:clean
</span><span class='line'>    @mkdir -p <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>    @if <span class="o">[</span> -e <span class="k">$(</span>CUSTOMIZE<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>    cp -rf <span class="k">$(</span>CUSTOMIZE<span class="k">)</span>/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>/; <span class="se">\</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>:cdrom_new
</span><span class='line'>    @if <span class="o">[</span> -e <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>    cp -f <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/; <span class="se">\</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;[autorun]\r&quot;</span> &amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;icon=\&quot;\\$(ICON_NAME)\&quot;\r&quot;</span> &amp;gt;&amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>CDROM_FS<span class="k">)</span>:<span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>
</span><span class='line'>    @cp -rf <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/driver/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>    @if <span class="o">[</span> -e <span class="k">$(</span>CUSTOMIZE_SCRIPT<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>        sh <span class="k">$(</span>CUSTOMIZE_SCRIPT<span class="k">)</span> <span class="s2">&quot;$(CDROM_FS)&quot;</span>; <span class="se">\</span>
</span><span class='line'>    <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
相较之前的版本，我在其中新增了两个变量 <code>CUSTOMIZE</code> 和 <code>CUSTOMIZE_SCRIPT</code> ，这两个变量分别用来指定不同项目所用的客制化目录和客制化脚本。注意， <code>ORIGIN_ICON</code> 变量的内容和原来相比也有变化，路径由原来的 <code>custom</code> 目录变为了相应的项目子目录，这样对于不同的项目来说也容易管理一些。另外，在 <code>cdrom_new</code> tag段，加入了拷贝客制化内容到iso文件系统的语句。对于主makefile最核心的修改实在最后一个tag段，也就是 <code>$(CDROM_FS)</code> 段的最后一句if判断，判断客制化脚本是否存在，如果存在，则以iso文件系统路径为参数执行该脚本。makefile的改动就这么些，接下来看客制化脚本 <code>custom.sh</code> 的内容。
</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.0</span>
</span><span class='line'><span class="c"># Script which is used to customize contents of cdrom.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SCRIPT_FILE<span class="o">=</span><span class="nv">$0</span>
</span><span class='line'><span class="nv">CDROM_FS</span><span class="o">=</span><span class="nv">$1</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rm -f <span class="nv">$CDROM_FS</span>/PC_Modem_Drivers_Install_Help.pdf
</span><span class='line'>rm -f <span class="nv">$CDROM_FS</span>/PHICOMM_USB_Drivers_Install_Help.pdf&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;do-not-remove&quot;</span>&gt;Do not REMOVE!&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;rm <span class="nv">$SCRIPT_FILE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
对于一般的项目，默认都是使用 <code>driver/</code> 目录下的内容作为驱动光盘的内容，其中默认包含两份中文pdf说明。但是对于外单项目来讲，肯定不能使用中文说明，那么我们就需要将其从光盘文件系统中删除。以上的脚本就做了这么一件事情，删除了光盘文件系统中的两份pdf文件。脚本最后将脚本自身从光盘文件系统中删除，否则最后生成的iso文件中还包含制作脚本，那将是一件很怪异可笑的事情。从makefile中看，客制化脚本会在生成ISO文件前一步执行，因此，客制化脚本的权限是相当大的，基本上可以实现你想对光盘文件系统执行的一切操作。
</p>
<p>
到此，客制化光盘的需求就完全解决了，前后实现起来也就10分钟时间。最后吐槽一遍，Android的make系统太复杂太慢，如果不是我之前在这个模块中直接使用传统make系统，对应这个简单的需求困怕也要多花费2-3倍的时间。
</p>
]]></content>
  </entry>
  
</feed>
