<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 开发 | 不停地疯]]></title>
  <link href="http://blog.xeonxu.info/blog/categories/开发/atom.xml" rel="self"/>
  <link href="http://blog.xeonxu.info/"/>
  <updated>2012-12-16T16:01:48+08:00</updated>
  <id>http://blog.xeonxu.info/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在高通平台Android环境下编译内核模块]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/"/>
    <updated>2012-12-04T22:14:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai</id>
    <content type="html"><![CDATA[<p>
高通Android环境中Linux内核会作为Android的一部分进行编译，直接使用make即可一次性从头编到尾。而有的平台比如Marvell，内核的编译操作相对比较独立，必须使用标准的内核编译命令进行单独编译。一般来说，用高通的这种方式比较傻瓜化，一步到底的感觉；而用Marvell的方式用户干预较多，灵活性也更大。当然这里不是比较他们孰优孰劣，对我来说这两种方式各有千秋。在遇到具体问题时，有时还会觉得独立编译内核的方式比较方便，比如编译内核模块这一点上。
</p>
<p>
编译内核模块之前必须先编译内核，编译内核之前必须先指定内核配置。在独立编译内核情况下，编译一遍内核后，可以直接使用 <code>make module</code> 来编译内核模块，如果修改了相应模块文件，使用相同的命令也能很快的进行增量编译。而在高通环境下，由于内核的编译过程已经被集成到Android的编译中，所以每次编译内核或者内核模块时，都必须通过Android的编译环境进行启用。虽然Android提供诸如 <code>make bootimage</code> 命令，可以只编译bootimage相关内容，但是Android庞大的编译体系在初始化时也会占用很多的时间。前段时间在调试一个独立的内核模块时就一直被这个问题困扰着，每次修改模块代码后都必须通过 <code>make bootimage</code> 来编译。虽然只有一个文件，但是每次编译都花费至少1min30sec，严重影响了开发进度。为此，自己参考内核模块独立编译的Makefile和Android的环境特点写了一个内核模块编译Makefile。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: zhiqiang.xu</span>
</span><span class='line'><span class="c"># EMail:  xeonxu@gmail.com</span>
</span><span class='line'><span class="nv">CROSS_ARCH</span><span class="o">:=</span><span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;$(ARM_EABI_TOOLCHAIN)/arm-eabi-&quot;</span>
</span><span class='line'>KDIR:<span class="o">=</span><span class="k">$(</span>ANDROID_PRODUCT_OUT<span class="k">)</span>/obj/KERNEL_OBJ/
</span><span class='line'>PWD:<span class="o">=</span><span class="k">$(</span>shell <span class="nb">pwd</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>obj-m:<span class="o">=</span> my_module.o
</span><span class='line'>.PHONY: modules package clean
</span><span class='line'>all:package
</span><span class='line'>modules:
</span><span class='line'>    @if <span class="o">[</span> <span class="s2">&quot;$(ANDROID_BUILD_TOP)_yes&quot;</span> <span class="o">=</span> <span class="s2">&quot;_yes&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;You have to run \&quot;. build/envsetup.sh\&quot; to init enviroment first. \nAnd then you have to run</span>
</span><span class='line'><span class="s2">\&quot;choosecombo\&quot; to setup the project.&quot;</span>&amp;amp;&amp;amp;exit 1; <span class="k">fi</span>
</span><span class='line'>    @if <span class="o">[</span> ! -d <span class="k">$(</span>KDIR<span class="k">)</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;Build kernle first.&quot;</span>&amp;amp;&amp;amp;cd <span class="k">$(</span>ANDROID_BUILD_TOP<span class="k">)</span>&amp;amp;&amp;amp;make bootimage&amp;amp;&amp;amp;cd -; <span class="k">fi</span>
</span><span class='line'>    <span class="k">$(</span>MAKE<span class="k">)</span> <span class="k">$(</span>CROSS_ARCH<span class="k">)</span> -C <span class="k">$(</span>KDIR<span class="k">)</span> <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class='line'>
</span><span class='line'>package:modules
</span><span class='line'>    @mkdir -p ./package
</span><span class='line'>    @cp <span class="k">$(</span>obj-m:.o<span class="o">=</span>.ko<span class="k">)</span> ./package
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers package
</span></code></pre></td></tr></table></div></figure></notextile></div>
该Makefile默认会将当前目录下的 <code>my_module.c</code> 文件编译为内核模块。同时，在编译时会强制检查Android的环境是否正确配置，如果没有配置它会进行相应提示后退出编译处理。编译模块时使用的内核配置是编译Android时指定项目所配置的内核配置。如果内核还没有编译，则在编译模块之前会自动编译内核主体。如果一切OK，则每次只会编译修改过的模块文件。编译好后会将模块文件单独拷贝到当前目录下的 <code>package</code> 目录中，方便使用。
</p>
<p>
使用该编译脚本后，模块的编写调试效率高了不少，至少每次编译模块都可以在5sec内搞定了。加上上机实测调试，也能在30sec内完成。生命很可贵，像我一样当个懒人吧。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取并操作内核中已注册的I2C设备]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/"/>
    <updated>2012-12-03T00:00:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei</id>
    <content type="html"><![CDATA[<p>
之前写过一篇关于如何在Linux内核模块中注册操作I2C设备的<a href="http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/">文章</a> ，那篇文章最后介绍的方法虽然可行，但是会带来一个问题：如果内核中已经包含有某设备的驱动时，那么在模块中注册该设备的I2C client之前必须先将内核中的驱动进行反注册解挂，然后才能再次注册模块中定义的驱动。这样做带来的问题就是，当你将模块从内核中卸载后，系统将无法再次注册内核中原有的驱动，导致相应设备无法使用。今天补充的方法可以在挂载模块时使用模块内的设备驱动，而在卸载后恢复回系统原来的驱动。
</p>
<p>
内容相当简单，上次我们已经可以通过内核提供的接口函数，找到相应I2C总线相应地址I2C设备的I2C client结构指针。而拥有该指针后，其实就可以做很多事了。比如调用 <code>i2c_master_send</code> 接口向该client指向的设备发送I2C命令。这样，如果需要扩展内核中原有的驱动程序，比如向procfs或sysfs中添加相应的用户空间接口等。一般可以在 <code>module_init</code> 中注册sysfs入口的操作函数，然后在操作函数中通过操作该client指针而实现一定的功能。这种方法可以沿用系统内核中原有的设备驱动，可以单纯添加一些系统驱动中没有的功能。
</p>
<p>
除此之外，还有一种替换内核中现有驱动的方法。通过查阅源代码，可以发现内核中还提供一个 <code>device_reprobe(dev)</code> 的API，该函数接受一个device结构体指针，实现重新匹配设备驱动的操作。同时，I2C client结构体中也有相应的device结构体。我们知道Linux内核匹配I2C设备驱动是通过名称来进行匹配的，所以，我们的方法就是用Hack的方式将系统中获取到的I2C Client结构体的名称改为我们需要的名称。一般修改为我们模块中新建的驱动的名称，这样，当调用 <code>device_reprobe</code> 接口后，系统会将原有驱动remove并重新为相应I2C设备适配一个驱动程序。当然，没有出错的话，它会适配到我们修改的名称指向的驱动。如此，我们便可以在内核模块中编写独立的设备驱动程序了。以下是简单示例框架:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">this_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_driver</span> <span class="n">my_driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span>
</span><span class='line'>        <span class="p">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">.</span><span class="n">probe</span> <span class="o">=</span> <span class="n">my_probe</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">remove</span> <span class="o">=</span> <span class="n">my_remove</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">module_driver_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">device</span> <span class="o">*</span><span class="n">ts_dev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">i2c_add_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ts_dev</span> <span class="o">=</span> <span class="n">bus_find_device_by_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">i2c_bus_type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;1-0011&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">ts_dev</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;Did not match the device name:1-0011!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">this_client</span>  <span class="o">=</span>  <span class="n">container_of</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">i2c_client</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">this_client</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">name</span><span class="p">,</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">device_error_exit:</span>
</span><span class='line'>    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;ts i2c del driver&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
只需要实现其中的 <code>my_probe</code> , <code>my_remove</code> 等函数即可实现一个完整的驱动。需要注意的是一定要在调用 <code>device_reprobe</code> 接口之前将相应的设备驱动使用 <code>i2c_add_driver</code> 添加到系统中，否则重新适配中会找不到驱动。移除模块时，用同样的方法将I2C client的名称更改为系统中原有驱动的名称，并重新适配驱动，即可实现卸载模块后系统能够使用原有驱动的功能。示例如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">module_driver_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">name</span><span class="p">,</span> <span class="n">ORIGIN_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">this_client</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

最后需要注意，文中方法皆为本人翻查文档自己琢磨搞出来的，所以不排除存在隐患的可能，但在自己测试环境下使用中没有发现任何问题。如果有疑问，也希望各位看官能提出自己的看法。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Linux内核模块中操作I2C设备]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/"/>
    <updated>2012-11-25T00:02:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei</id>
    <content type="html"><![CDATA[<p>
近期公司项目较为空闲，抽空做了一些学习性质的研发内容，其中涉及到在Linux内核模块中使用I2C对外部器件进行控制的操作。虽然在Linux中操作使用I2C设备并不复杂，但本人接触Linux内核驱动开发时间并不算长，此次学习中也算较为系统的了解了Linux中对I2C设备的操控方式，谨在此做下记录。
</p>
<p>
通过Linux内核文档中关于操作I2C设备的文章后不难看出Linux中注册使用I2C设备一般通过四种方法<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>：
</p>
<ol>
<li>通过总线号声明设备
</li>
<li>立即探测设备
</li>
<li>通过Probe探测相应设备
</li>
<li>在用户空间立即探测
</li>
</ol>

<p>
简单来说，第一种方式一般应用在嵌入式设备中。因为对于嵌入式设备来说，外围器件基本都是固定的，只需提供有限几款器件的支持即可。使用这种方式的时候，需要在板级配置文件中定义并设置 <code>i2c_board_info</code> 这个结构体的内容。其中需要配置设备名称和设备地址，此外设备中断和私有数据结构也可以选择设置。然后使用 <code>i2c_register_board_info</code> 这个接口对设置的设备进行注册使用。需要注意的是这种方法注册的设备是在注册I2C总线驱动时进行驱动适配的。
</p>
<p>
第二种方法可以通过给定的I2C适配器以及相应的I2C板级结构体，自行通过 <code>i2c_new_device</code> 接口进行添加注册所需的设备。这种方法灵活性要较第一种方法大，可以很方便的在模块中使用。
</p>
<p>
第三种方法是 <code>2.6</code> 内核之前的做法，使用 <code>detect</code> 方法去探测总线上的设备驱动。因为探测机制的原因，会导致一些副作用的发生，所以不建议使用，除非真的没有别的办法。
</p>
<p>
第四种方法是在Linux的控制台上，在用户空间通过sysfs，使用 <code>/sys/bus/i2c/devices/i2c-3/new_device</code> 节点进行设备的添加注册。
</p>
<p>
从上面可以看出，如果需要在Linux内核中以模块的方式对I2C设备进行驱动控制的话，第二种方法是比较推荐的。通过测试，在module的init中使用
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">i2c_adapter</span> <span class="o">*</span><span class="n">i2c_adap</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">i2c_client</span><span class="p">;</span>
</span><span class='line'><span class="n">i2c_adap</span> <span class="o">=</span> <span class="n">i2c_get_adapter</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">i2c_client</span> <span class="o">=</span> <span class="n">i2c_new_device</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">i2c_device</span><span class="p">);</span>
</span><span class='line'><span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
即可成功注册I2C设备。其中:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_board_info</span> <span class="n">ft5306_i2c_device</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">I2C_BOARD_INFO</span><span class="p">(</span><span class="s">&quot;test_i2c&quot;</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">),</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

以上，对于如何在模块中注册使用I2C设备简单做了描述。那么如何在另外的模块中对已经注册的I2C设备进行反注册呢？由于内核中操作I2C设备都是通过 <code>i2c_client</code> 结构进行，所以问题可以抽象为如何在内核中获取指定设备的 <code>i2c_client</code> 结构指针。通过查阅内核API，也找到了一个方法可以达到这样的目的，如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">i2c_client</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">device</span> <span class="o">*</span><span class="n">i2c_dev</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">i2c_dev</span> <span class="o">=</span> <span class="n">bus_find_device_by_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">i2c_bus_type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;1-0011&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">i2c_dev</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i2c_client</span>  <span class="o">=</span>  <span class="n">container_of</span><span class="p">(</span><span class="n">i2c_dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">i2c_client</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">i2c_client</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i2c_unregister_device</span><span class="p">(</span><span class="n">i2c_client</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
该反注册例子的内容就是对前面注册的 <code>0x11</code> 地址的设备进行反注册。注意 <code>bus_find_device_by_name</code> 函数中第三项参数，该参数是需要查找的设备在总线上注册的名称。"1"代表着1号适配器，"0011"是16位的I2C地址。如此便可方便的在内核模块中对I2C设备进行挂载和解挂了。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 参考Linux内核目录下的Documentation/i2c/instantiating-devices
</p>



</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用tmux改进终端体验]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan/"/>
    <updated>2012-11-04T23:59:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan</id>
    <content type="html"><![CDATA[<p>
之前一直使用GNU Screen作为我的终端管理软件，但是发现它和我使用的Emacs编辑器不兼容，其表现是画面会被无规律的撕裂，经常造成无法正常显示和编辑文件。虽然也尝试过不少配置方法，但是都没有效果。这迫使我去寻找GNU Screen的替代品，直到后来遇到<a href="http://tmux.sourceforge.net">tmux</a> ，才将我从混乱的画面中拯救出来。tmux和Emacs的兼容非常好，没有任何问题，这点让我非常满意。同时，tmux拥有强大的自定义能力，只需简单的配置，就可以使工作环境舒适度显著提高。
</p>
<p>
首先，先简单了解一下tmux。tmux顾名思义，取terminal multiplexer之意，及终端复用器，其源代码基于BSD协议进行开源和分发。使用上来说，tmux和GNU Screen大同小异，都是使用命令引导键来进行操作，不过tmux的默认引导键由Screen的 <code>C-a</code> 变更为了 <code>C-b</code> 。另外，常用命令也和Gnu Screen一样可以通过 <code>引导键 ?</code> 来查看。操作方法的近似，促使我下决心从GNU Screen转换到tmux下。考虑到tmux作为GNU Screen的改进实现，功能要高级许多，仅仅用来替代GNU Screen有点大材小用的感觉。所以为了更好的学习tmux，我从<a href="http://pragprog.com/book/bhtmux/tmux">The Pragmatic Bookshelf</a>购买了名叫 <b>tmux: Productive Mouse-Free Development</b> 的书，并花了3天时间将这本书读完，感到受益匪浅。之后，按照书中的建议配置了工作环境中的tmux，感觉非常好，极大提升了终端工作的效率。下面来看看我的配置：
</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.tmux.conf配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 配置使用和GNU Screen相同的C-a作为命令引导键</span>
</span><span class='line'><span class="nb">set</span> -g prefix C-a
</span><span class='line'><span class="c"># 设置终端类型为256色</span>
</span><span class='line'><span class="nb">set</span> -g default-terminal “screen-256color”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section&quot;</span>&gt;设置状态栏前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g status-bg colour23
</span><span class='line'><span class="nb">set</span> -g status-fg colour238&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-1&quot;</span>&gt;设置窗口标签的前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g window-status-fg colour232
</span><span class='line'>setw -g window-status-bg default
</span><span class='line'>setw -g window-status-attr dim&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-2&quot;</span>&gt;设置当前窗口标签的前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g window-status-current-fg colour88
</span><span class='line'>setw -g window-status-current-bg colour130
</span><span class='line'>setw -g window-status-current-attr bright&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-3&quot;</span>&gt;设置窗口分割的边框颜色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g pane-border-fg colour189
</span><span class='line'><span class="nb">set</span> -g pane-border-bg black&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-4&quot;</span>&gt;设置当前窗口分割的边框颜色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g pane-active-border-fg white
</span><span class='line'><span class="nb">set</span> -g pane-active-border-bg colour208&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-5&quot;</span>&gt;设置提示信息的前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g message-fg colour232
</span><span class='line'><span class="nb">set</span> -g message-bg colour23
</span><span class='line'><span class="nb">set</span> -g message-attr bright&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-6&quot;</span>&gt;设置状态栏左部宽度&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g status-left-length 40
</span><span class='line'><span class="c"># 设置状态栏显示内容和内容颜色。这里配置从左边开始显示，使用绿色显示session名称，黄色显示窗口号，蓝色显示窗口分割号</span>
</span><span class='line'><span class="nb">set</span> -g status-left “#<span class="o">[</span><span class="nb">fg</span><span class="o">=</span>colour52<span class="o">]</span><span class="c">#S #[fg=yellow]#I #[fg=cyan]#P”</span>
</span><span class='line'><span class="c"># 设置状态栏右部宽度</span>
</span><span class='line'><span class="nb">set</span> -g status-right-length 80
</span><span class='line'><span class="c"># 设置状态栏右边内容，这里设置为时间信息</span>
</span><span class='line'><span class="nb">set</span> -g status-right “#<span class="o">[</span><span class="nb">fg</span><span class="o">=</span>colour106<span class="o">]</span><span class="c">#(~/bin/system_info.sh) #[fg=colour208]|%d %b %R”</span>
</span><span class='line'><span class="c"># 窗口信息居中显示</span>
</span><span class='line'><span class="nb">set</span> -g status-justify centre&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-7&quot;</span>&gt;监视窗口信息，如有内容变动，进行提示&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g monitor-activity on
</span><span class='line'><span class="nb">set</span> -g visual-activity on
</span><span class='line'><span class="nb">set</span> -g status-utf8 on&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-8&quot;</span>&gt;窗口号和窗口分割号都以1开始（默认从0开始）&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g base-index 1
</span><span class='line'>setw -g pane-base-index 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-9&quot;</span>&gt;支持鼠标选择窗口，调节窗口大小&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g mode-mouse on
</span><span class='line'><span class="nb">set</span> -g mouse-select-pane on
</span><span class='line'><span class="nb">set</span> -g mouse-resize-pane on
</span><span class='line'><span class="nb">set</span> -g mouse-select-window on
</span><span class='line'><span class="nb">set</span> -s escape-time 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;c-a-ac-a&quot;</span>&gt;设置C-a a为发送C-a键&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;bind a send-prefix
</span><span class='line'><span class="c"># 加载tmux配置文件的快捷键</span>
</span><span class='line'><span class="nb">bind </span>r <span class="nb">source</span>-file ~/.tmux.conf<span class="se">\;</span> display “Reloaded!”
</span><span class='line'><span class="c"># 快捷键查看man</span>
</span><span class='line'><span class="nb">bind</span> / <span class="nb">command</span>-prompt “split-window ‘exec man %%’”
</span><span class='line'>unbind “%”
</span><span class='line'>unbind “<span class="s2">&quot;”</span>
</span><span class='line'><span class="s2"># 修改默认的窗口分割快捷键，使用更直观的符号</span>
</span><span class='line'><span class="s2">bind | split-window -h</span>
</span><span class='line'><span class="s2">bind - split-window -v</span>
</span><span class='line'><span class="s2"># 选择窗口功能修改为和Screen一样的C-a “</span>
</span><span class='line'><span class="s2">bind “&quot;</span>” choose-window&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-10&quot;</span>&gt;选择窗口分割快捷键&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;bind h <span class="k">select</span>-pane -L
</span><span class='line'><span class="nb">bind </span>j <span class="k">select</span>-pane -D
</span><span class='line'><span class="nb">bind </span>k <span class="k">select</span>-pane -U
</span><span class='line'><span class="nb">bind </span>l <span class="k">select</span>-pane -R
</span><span class='line'><span class="c"># 选择窗口快捷键</span>
</span><span class='line'><span class="nb">bind</span> -r C-h <span class="k">select</span>-window -t :-
</span><span class='line'><span class="nb">bind</span> -r C-l <span class="k">select</span>-window -t :+
</span><span class='line'><span class="c"># 调节窗口大小快捷键</span>
</span><span class='line'><span class="nb">bind</span> -r H resize-pane -L 5
</span><span class='line'><span class="nb">bind</span> -r J resize-pane -D 5
</span><span class='line'><span class="nb">bind</span> -r K resize-pane -U 5
</span><span class='line'><span class="nb">bind</span> -r L resize-pane -R 5&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-11&quot;</span>&gt;快捷调整窗口分割到全屏&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;unbind Up
</span><span class='line'><span class="nb">bind </span>Up new-window -d -n tmp <span class="se">\;</span> swap-pane -s tmp.1 <span class="se">\;</span> <span class="k">select</span>-window -t tmp
</span><span class='line'>unbind Down
</span><span class='line'><span class="nb">bind </span>Down last-window <span class="se">\;</span> swap-pane -s tmp.1 <span class="se">\;</span> <span class="nb">kill</span>-window -t tmp&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-12&quot;</span>&gt;快捷记录窗口内的内容到文件中&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;bind P pipe-pane -o “cat »~/#W.log” <span class="se">\;</span> display “Toggled logging to ~/#W.log”
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<p>
以上配置只需要复制保存到 <code>~/.tmux.conf</code> 文件中，下次执行tmux时就生效了。
</p>
<p>
当然，tmux的高级不止在于配置功能的强大，它还支持在命令行中对指定session进行设置。利用这个特性，便可以将繁琐的工作环境初始化用脚本完成了。比如我写了如下脚本对我的工作电脑进行初始化：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>init_tmux.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AP_7x27_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM7x27A-ICS-AP&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MP_7x27_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM7x27A-ICS-MP&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">AP_8x25_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM8x25-ICS-AP&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MP_8x25_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM8x25-ICS-MP&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$TMUX&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>tmux has-session -t development7x27
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>        <span class="c"># init 7x27 AP</span>
</span><span class='line'>        tmux new-session -s development7x27 -n AP_7x27 -d
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development7x27:1
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class='line'>        tmux split-window -v -t development7x27:1.2
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        <span class="c"># init 7x27 MP</span>
</span><span class='line'>        tmux new-window -n MP_7x27 -t development7x27
</span><span class='line'>
</span><span class='line'>        tmux send-keys -t development7x27:2 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development7x27:2
</span><span class='line'>        tmux send-keys -t development7x27:2 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -v -t development7x27:2.2
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        tmux <span class="k">select</span>-window -t development7x27:1
</span><span class='line'>        tmux <span class="k">select</span>-pane -t development7x27:1 -L
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">        </span>tmux send-keys -t development7x27:1.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>        tmux send-keys -t development7x27:2.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>    tmux has-session -t development8x25
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>        <span class="c"># init 8x25 AP</span>
</span><span class='line'>        tmux new-session -s development8x25 -n AP_8x25 -d
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development8x25:1
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s1">&#39;top&#39;</span> C-m
</span><span class='line'>        tmux split-window -v -t development8x25:1.2
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        <span class="c"># init 8x25 MP</span>
</span><span class='line'>        tmux new-window -n MP_8x25 -t development8x25
</span><span class='line'>
</span><span class='line'>        tmux send-keys -t development8x25:2 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development8x25:2
</span><span class='line'>        tmux send-keys -t development8x25:2 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -v -t development8x25:2.2
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        tmux <span class="k">select</span>-window -t development8x25:1
</span><span class='line'>        tmux <span class="k">select</span>-pane -t development8x25:1 -L
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">        </span>tmux send-keys -t development8x25:1.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>        tmux send-keys -t development8x25:2.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>    tmux attach -t development7x27
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
脚本主体思想为每次运行时判断相应的tmux session是否存在，如果存在则设置Xwindow的变量后attach；如果不存在相应session，则新建相应session并初始化session中相应窗口和窗口分割，同时在每个窗口分割中运行每次都要运行的环境初始化命令。最后设置Xwindow环境变量后attach。我的脚本中分别初始化了高通7x27 AP和MP的编译环境以及8x25 AP和MP的编译环境。
</p>
<p>
使用时，将以上内容存为文件，并在 <code>~/.bashrc</code> 中调用就可以了。这样，不论是ssh到该主机还是新开一个终端窗口，都会直接进入指定的tmux session中，继续之前的工作。加上Xwindow的设置，tmux中也可以直接运行X程序。工作中，我就是在windows上使用putty+Xming来运行使用X程序的，非常方便高效。简单的配置让工作环境大幅改进，让我觉得之前6刀买到那本书真是超值了。
</p>
<p>
说了这么多好，tmux其实也是有缺点的。最明显的一个缺点就是不支持windows，而GNU Screen却支持是windows的，这不免让人有点遗憾。所以如果有在Windows下使用类似软件的话（真的有需要吗？），只能考虑其它如GNU Screen之类的软件了。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小脚本帮大忙]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang/"/>
    <updated>2012-10-21T23:38:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang</id>
    <content type="html"><![CDATA[<p>
前两天单位的在做项目中发现一个Bug：手机在启动后触摸屏有一定几率无法使用。这个Bug非常恼人，因为重现几率非常低，而且只会出现在重启过程中。这意味着不论是调查原因还是验证对策，都将是非常耗时且繁琐的。因为对策问题之前，首先需要重现问题，如此才好分析问题的原因。而这个Bug必须要反复重启手机才能重现，人为操作的话太浪费时间效率低下。
好在这个Bug的行为比较稳定，重现后触屏肯定不能使用。通过adb对比调查正常手机和问题手机的设备节点，发现在出问题的手机中，触屏设备没有注册成功。看来是设备注册失败，导致的触屏异常。于是，我们考虑使用脚本对该Bug进行再现分析。思路如下：
</p>
<ol>
<li>写一个脚本判断触屏驱动的设备节点是否注册成功，如果成功则复位重启；否则保留现场等待分析。
</li>
<li>将该脚本添加到 <code>init.rc</code> 中成为一个服务，在启动时调用。
</li>
<li>脚本运行时将相应的运行信息输出到外部文件中，从而可以计算出再现率。
</li>
</ol>

<p>基于以上想法，写出了以下脚本代码：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>check_tp.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/system/bin/sh</span>
</span><span class='line'><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class='line'><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;x_$tp_name&quot;</span> <span class="o">=</span> <span class="s2">&quot;x_$input_name&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>    reboot
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
同时，修改 <code>init.rc</code> 文件，在其中加入：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service check_tp /system/bin/sh /system/bin/check_tp.sh
</span><span class='line'>    class main
</span><span class='line'>    oneshot
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后重新编译bootimage并刷机。最后使用 <code>adb remount&amp;&amp;adb push check_tp.sh /system/bin/&amp;&amp;adb shell chmod 755 /system/bin/check_tp.sh</code> ，将刚才新写的脚本推送到手机上。重启手机，之后就会看到手机不断的上电然后复位重启。
在运行该脚本不断重启手机8小时之后，手机正常进入了系统。此时操作手机进行验证，发现触屏已经无效。分析 <code>/data/check_tp.log</code> 文件，算出手机共重启了1000多次，从而得出该问题的再现率大概为千分之一。利用该脚本，验证bug方便了好多，大大提高了工作效率。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">后记</h2>
<div class="outline-text-2" id="text-1">

<p>由于以上写的脚本使用到了 <code>if</code> 关键字，而Android系统默认不支持该关键字，必须依赖busybox环境才行。之前我有移植过busybox，但是只在工程模式下生效，所以该脚本在release版本中是不能正常运行的。为了不依赖运行环境，我又将该脚本换了一种写法，改为：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>check_tp2.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/system/bin/sh</span>
</span><span class='line'><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class='line'><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class='line'><span class="k">case</span> <span class="nv">$input_name</span> in
</span><span class='line'>    <span class="nv">$tp_name</span><span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>              reboot
</span><span class='line'>             ;;
</span><span class='line'>    *<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>            ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这样，即便是在Android原生环境中，也可以正确无误的运行。这样就能将该脚本发给测试，利用它对release版本进行bug验证了。
</p></div>
</div>
]]></content>
  </entry>
  
</feed>
