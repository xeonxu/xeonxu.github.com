<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 开发 | 不停地疯]]></title>
  <link href="http://blog.xeonxu.info/blog/categories/开发/atom.xml" rel="self"/>
  <link href="http://blog.xeonxu.info/"/>
  <updated>2012-11-18T23:50:18+08:00</updated>
  <id>http://blog.xeonxu.info/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用tmux改进终端体验]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan/"/>
    <updated>2012-11-04T23:59:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan</id>
    <content type="html"><![CDATA[<p>
之前一直使用GNU Screen作为我的终端管理软件，但是发现它和我使用的Emacs编辑器不兼容，其表现是画面会被无规律的撕裂，经常造成无法正常显示和编辑文件。虽然也尝试过不少配置方法，但是都没有效果。这迫使我去寻找GNU Screen的替代品，直到后来遇到<a href="http://tmux.sourceforge.net">tmux</a> ，才将我从混乱的画面中拯救出来。tmux和Emacs的兼容非常好，没有任何问题，这点让我非常满意。同时，tmux拥有强大的自定义能力，只需简单的配置，就可以使工作环境舒适度显著提高。
</p>
<p>
首先，先简单了解一下tmux。tmux顾名思义，取terminal multiplexer之意，及终端复用器，其源代码基于BSD协议进行开源和分发。使用上来说，tmux和GNU Screen大同小异，都是使用命令引导键来进行操作，不过tmux的默认引导键由Screen的 <code>C-a</code> 变更为了 <code>C-b</code> 。另外，常用命令也和Gnu Screen一样可以通过 <code>引导键 ?</code> 来查看。操作方法的近似，促使我下决心从GNU Screen转换到tmux下。考虑到tmux作为GNU Screen的改进实现，功能要高级许多，仅仅用来替代GNU Screen有点大材小用的感觉。所以为了更好的学习tmux，我从<a href="http://pragprog.com/book/bhtmux/tmux">The Pragmatic Bookshelf</a>购买了名叫 <b>tmux: Productive Mouse-Free Development</b> 的书，并花了3天时间将这本书读完，感到受益匪浅。之后，按照书中的建议配置了工作环境中的tmux，感觉非常好，极大提升了终端工作的效率。下面来看看我的配置：
</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.tmux.conf配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 配置使用和GNU Screen相同的C-a作为命令引导键</span>
</span><span class='line'><span class="nb">set</span> -g prefix C-a
</span><span class='line'><span class="c"># 设置终端类型为256色</span>
</span><span class='line'><span class="nb">set</span> -g default-terminal “screen-256color”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section&quot;</span>&gt;设置状态栏前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g status-bg colour23
</span><span class='line'><span class="nb">set</span> -g status-fg colour238&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-1&quot;</span>&gt;设置窗口标签的前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g window-status-fg colour232
</span><span class='line'>setw -g window-status-bg default
</span><span class='line'>setw -g window-status-attr dim&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-2&quot;</span>&gt;设置当前窗口标签的前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g window-status-current-fg colour88
</span><span class='line'>setw -g window-status-current-bg colour130
</span><span class='line'>setw -g window-status-current-attr bright&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-3&quot;</span>&gt;设置窗口分割的边框颜色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g pane-border-fg colour189
</span><span class='line'><span class="nb">set</span> -g pane-border-bg black&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-4&quot;</span>&gt;设置当前窗口分割的边框颜色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g pane-active-border-fg white
</span><span class='line'><span class="nb">set</span> -g pane-active-border-bg colour208&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-5&quot;</span>&gt;设置提示信息的前景及背景色&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g message-fg colour232
</span><span class='line'><span class="nb">set</span> -g message-bg colour23
</span><span class='line'><span class="nb">set</span> -g message-attr bright&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-6&quot;</span>&gt;设置状态栏左部宽度&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g status-left-length 40
</span><span class='line'><span class="c"># 设置状态栏显示内容和内容颜色。这里配置从左边开始显示，使用绿色显示session名称，黄色显示窗口号，蓝色显示窗口分割号</span>
</span><span class='line'><span class="nb">set</span> -g status-left “#<span class="o">[</span><span class="nb">fg</span><span class="o">=</span>colour52<span class="o">]</span><span class="c">#S #[fg=yellow]#I #[fg=cyan]#P”</span>
</span><span class='line'><span class="c"># 设置状态栏右部宽度</span>
</span><span class='line'><span class="nb">set</span> -g status-right-length 80
</span><span class='line'><span class="c"># 设置状态栏右边内容，这里设置为时间信息</span>
</span><span class='line'><span class="nb">set</span> -g status-right “#<span class="o">[</span><span class="nb">fg</span><span class="o">=</span>colour106<span class="o">]</span><span class="c">#(~/bin/system_info.sh) #[fg=colour208]|%d %b %R”</span>
</span><span class='line'><span class="c"># 窗口信息居中显示</span>
</span><span class='line'><span class="nb">set</span> -g status-justify centre&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-7&quot;</span>&gt;监视窗口信息，如有内容变动，进行提示&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g monitor-activity on
</span><span class='line'><span class="nb">set</span> -g visual-activity on
</span><span class='line'><span class="nb">set</span> -g status-utf8 on&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-8&quot;</span>&gt;窗口号和窗口分割号都以1开始（默认从0开始）&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;set -g base-index 1
</span><span class='line'>setw -g pane-base-index 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-9&quot;</span>&gt;支持鼠标选择窗口，调节窗口大小&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;setw -g mode-mouse on
</span><span class='line'><span class="nb">set</span> -g mouse-select-pane on
</span><span class='line'><span class="nb">set</span> -g mouse-resize-pane on
</span><span class='line'><span class="nb">set</span> -g mouse-select-window on
</span><span class='line'><span class="nb">set</span> -s escape-time 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;c-a-ac-a&quot;</span>&gt;设置C-a a为发送C-a键&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;bind a send-prefix
</span><span class='line'><span class="c"># 加载tmux配置文件的快捷键</span>
</span><span class='line'><span class="nb">bind </span>r <span class="nb">source</span>-file ~/.tmux.conf<span class="se">\;</span> display “Reloaded!”
</span><span class='line'><span class="c"># 快捷键查看man</span>
</span><span class='line'><span class="nb">bind</span> / <span class="nb">command</span>-prompt “split-window ‘exec man %%’”
</span><span class='line'>unbind “%”
</span><span class='line'>unbind “<span class="s2">&quot;”</span>
</span><span class='line'><span class="s2"># 修改默认的窗口分割快捷键，使用更直观的符号</span>
</span><span class='line'><span class="s2">bind | split-window -h</span>
</span><span class='line'><span class="s2">bind - split-window -v</span>
</span><span class='line'><span class="s2"># 选择窗口功能修改为和Screen一样的C-a “</span>
</span><span class='line'><span class="s2">bind “&quot;</span>” choose-window&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-10&quot;</span>&gt;选择窗口分割快捷键&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;bind h <span class="k">select</span>-pane -L
</span><span class='line'><span class="nb">bind </span>j <span class="k">select</span>-pane -D
</span><span class='line'><span class="nb">bind </span>k <span class="k">select</span>-pane -U
</span><span class='line'><span class="nb">bind </span>l <span class="k">select</span>-pane -R
</span><span class='line'><span class="c"># 选择窗口快捷键</span>
</span><span class='line'><span class="nb">bind</span> -r C-h <span class="k">select</span>-window -t :-
</span><span class='line'><span class="nb">bind</span> -r C-l <span class="k">select</span>-window -t :+
</span><span class='line'><span class="c"># 调节窗口大小快捷键</span>
</span><span class='line'><span class="nb">bind</span> -r H resize-pane -L 5
</span><span class='line'><span class="nb">bind</span> -r J resize-pane -D 5
</span><span class='line'><span class="nb">bind</span> -r K resize-pane -U 5
</span><span class='line'><span class="nb">bind</span> -r L resize-pane -R 5&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-11&quot;</span>&gt;快捷调整窗口分割到全屏&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;unbind Up
</span><span class='line'><span class="nb">bind </span>Up new-window -d -n tmp <span class="se">\;</span> swap-pane -s tmp.1 <span class="se">\;</span> <span class="k">select</span>-window -t tmp
</span><span class='line'>unbind Down
</span><span class='line'><span class="nb">bind </span>Down last-window <span class="se">\;</span> swap-pane -s tmp.1 <span class="se">\;</span> <span class="nb">kill</span>-window -t tmp&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;section-12&quot;</span>&gt;快捷记录窗口内的内容到文件中&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;bind P pipe-pane -o “cat »~/#W.log” <span class="se">\;</span> display “Toggled logging to ~/#W.log”
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<p>
以上配置只需要复制保存到 <code>~/.tmux.conf</code> 文件中，下次执行tmux时就生效了。
</p>
<p>
当然，tmux的高级不止在于配置功能的强大，它还支持在命令行中对指定session进行设置。利用这个特性，便可以将繁琐的工作环境初始化用脚本完成了。比如我写了如下脚本对我的工作电脑进行初始化：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>init_tmux.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AP_7x27_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM7x27A-ICS-AP&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MP_7x27_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM7x27A-ICS-MP&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">AP_8x25_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM8x25-ICS-AP&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MP_8x25_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM8x25-ICS-MP&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$TMUX&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>tmux has-session -t development7x27
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>        <span class="c"># init 7x27 AP</span>
</span><span class='line'>        tmux new-session -s development7x27 -n AP_7x27 -d
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development7x27:1
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class='line'>        tmux split-window -v -t development7x27:1.2
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        <span class="c"># init 7x27 MP</span>
</span><span class='line'>        tmux new-window -n MP_7x27 -t development7x27
</span><span class='line'>
</span><span class='line'>        tmux send-keys -t development7x27:2 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development7x27:2
</span><span class='line'>        tmux send-keys -t development7x27:2 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -v -t development7x27:2.2
</span><span class='line'>        tmux send-keys -t development7x27 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        tmux <span class="k">select</span>-window -t development7x27:1
</span><span class='line'>        tmux <span class="k">select</span>-pane -t development7x27:1 -L
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">        </span>tmux send-keys -t development7x27:1.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>        tmux send-keys -t development7x27:2.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>    tmux has-session -t development8x25
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>        <span class="c"># init 8x25 AP</span>
</span><span class='line'>        tmux new-session -s development8x25 -n AP_8x25 -d
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development8x25:1
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s1">&#39;top&#39;</span> C-m
</span><span class='line'>        tmux split-window -v -t development8x25:1.2
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;amp;&amp;amp;. ./build/envsetup.sh&amp;amp;&amp;amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        <span class="c"># init 8x25 MP</span>
</span><span class='line'>        tmux new-window -n MP_8x25 -t development8x25
</span><span class='line'>
</span><span class='line'>        tmux send-keys -t development8x25:2 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -h -p 40 -t development8x25:2
</span><span class='line'>        tmux send-keys -t development8x25:2 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>        tmux split-window -v -t development8x25:2.2
</span><span class='line'>        tmux send-keys -t development8x25 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>        tmux <span class="k">select</span>-window -t development8x25:1
</span><span class='line'>        tmux <span class="k">select</span>-pane -t development8x25:1 -L
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">        </span>tmux send-keys -t development8x25:1.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>        tmux send-keys -t development8x25:2.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class='line'>
</span><span class='line'>    tmux attach -t development7x27
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
脚本主体思想为每次运行时判断相应的tmux session是否存在，如果存在则设置Xwindow的变量后attach；如果不存在相应session，则新建相应session并初始化session中相应窗口和窗口分割，同时在每个窗口分割中运行每次都要运行的环境初始化命令。最后设置Xwindow环境变量后attach。我的脚本中分别初始化了高通7x27 AP和MP的编译环境以及8x25 AP和MP的编译环境。
</p>
<p>
使用时，将以上内容存为文件，并在 <code>~/.bashrc</code> 中调用就可以了。这样，不论是ssh到该主机还是新开一个终端窗口，都会直接进入指定的tmux session中，继续之前的工作。加上Xwindow的设置，tmux中也可以直接运行X程序。工作中，我就是在windows上使用putty+Xming来运行使用X程序的，非常方便高效。简单的配置让工作环境大幅改进，让我觉得之前6刀买到那本书真是超值了。
</p>
<p>
说了这么多好，tmux其实也是有缺点的。最明显的一个缺点就是不支持windows，而GNU Screen却支持是windows的，这不免让人有点遗憾。所以如果有在Windows下使用类似软件的话（真的有需要吗？），只能考虑其它如GNU Screen之类的软件了。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小脚本帮大忙]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang/"/>
    <updated>2012-10-21T23:38:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang</id>
    <content type="html"><![CDATA[<p>
前两天单位的在做项目中发现一个Bug：手机在启动后触摸屏有一定几率无法使用。这个Bug非常恼人，因为重现几率非常低，而且只会出现在重启过程中。这意味着不论是调查原因还是验证对策，都将是非常耗时且繁琐的。因为对策问题之前，首先需要重现问题，如此才好分析问题的原因。而这个Bug必须要反复重启手机才能重现，人为操作的话太浪费时间效率低下。
好在这个Bug的行为比较稳定，重现后触屏肯定不能使用。通过adb对比调查正常手机和问题手机的设备节点，发现在出问题的手机中，触屏设备没有注册成功。看来是设备注册失败，导致的触屏异常。于是，我们考虑使用脚本对该Bug进行再现分析。思路如下：
</p>
<ol>
<li>写一个脚本判断触屏驱动的设备节点是否注册成功，如果成功则复位重启；否则保留现场等待分析。
</li>
<li>将该脚本添加到 <code>init.rc</code> 中成为一个服务，在启动时调用。
</li>
<li>脚本运行时将相应的运行信息输出到外部文件中，从而可以计算出再现率。
</li>
</ol>

<p>基于以上想法，写出了以下脚本代码：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>check_tp.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/system/bin/sh</span>
</span><span class='line'><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class='line'><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;x_$tp_name&quot;</span> <span class="o">=</span> <span class="s2">&quot;x_$input_name&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>    reboot
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
同时，修改 <code>init.rc</code> 文件，在其中加入：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service check_tp /system/bin/sh /system/bin/check_tp.sh
</span><span class='line'>    class main
</span><span class='line'>    oneshot
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后重新编译bootimage并刷机。最后使用 <code>adb remount&amp;&amp;adb push check_tp.sh /system/bin/&amp;&amp;adb shell chmod 755 /system/bin/check_tp.sh</code> ，将刚才新写的脚本推送到手机上。重启手机，之后就会看到手机不断的上电然后复位重启。
在运行该脚本不断重启手机8小时之后，手机正常进入了系统。此时操作手机进行验证，发现触屏已经无效。分析 <code>/data/check_tp.log</code> 文件，算出手机共重启了1000多次，从而得出该问题的再现率大概为千分之一。利用该脚本，验证bug方便了好多，大大提高了工作效率。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">后记</h2>
<div class="outline-text-2" id="text-1">

<p>由于以上写的脚本使用到了 <code>if</code> 关键字，而Android系统默认不支持该关键字，必须依赖busybox环境才行。之前我有移植过busybox，但是只在工程模式下生效，所以该脚本在release版本中是不能正常运行的。为了不依赖运行环境，我又将该脚本换了一种写法，改为：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>check_tp2.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/system/bin/sh</span>
</span><span class='line'><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class='line'><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class='line'><span class="k">case</span> <span class="nv">$input_name</span> in
</span><span class='line'>    <span class="nv">$tp_name</span><span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>              reboot
</span><span class='line'>             ;;
</span><span class='line'>    *<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>            ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这样，即便是在Android原生环境中，也可以正确无误的运行。这样就能将该脚本发给测试，利用它对release版本进行bug验证了。
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Android编译时建立符号链接]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/10/08/zai-androidbian-yi-shi-jian-li-fu-hao-lian-jie/"/>
    <updated>2012-10-08T21:48:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/10/08/zai-androidbian-yi-shi-jian-li-fu-hao-lian-jie</id>
    <content type="html"><![CDATA[<p>
最近接到一个任务，需要将Busybox环境移植到高通平台的Android项目上。Busybox的目标执行文件有现成编译好的，需要做的工作就是添加一个Android工程，将编译好的二进制文件拷贝到Android的文件系统中，同时还需要生成相应的Busybox命令链接。
</p>
<p>
拷贝文件到指定目录在Android的编译系统中有现成的方法，使用下面这个方法即可：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>拷贝文件到指定目录  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">LOCAL_PATH</span> <span class="o">:=</span> <span class="k">$(</span>call my-dir<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add busybox environment zhiqiang.xu 2012.10.8</span>
</span><span class='line'><span class="cp">include $(CLEAR_VARS)</span>
</span><span class='line'>LOCAL_MODULE :<span class="o">=</span> busybox_modules
</span><span class='line'>LOCAL_MODULE_STEM :<span class="o">=</span> busybox
</span><span class='line'>LOCAL_SRC_FILES :<span class="o">=</span> busybox
</span><span class='line'>LOCAL_MODULE_TAGS :<span class="o">=</span> eng
</span><span class='line'>LOCAL_MODULE_CLASS :<span class="o">=</span> EXECUTABLES
</span><span class='line'>LOCAL_MODULE_PATH :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT<span class="k">)</span>/busybox
</span><span class='line'><span class="cp">include $(BUILD_PREBUILT)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
由于Busybox环境主要用于工程调试，所以模块设置为只在eng编译模式下有效。按照以上这段设置，可以将busybox执行文件拷贝到Android文件系统中的 <code>/system/busybox</code> 目录下。
</p>
<p>
而对于生成链接，之前没有接触过。不过在搜索调查了已有的Android工程文件之后，发现系统中也提供了现成的方法，如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>recovery使用的软链生成方法  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">BUSYBOX_LINKS</span> <span class="o">:=</span> <span class="k">$(</span>shell cat external/busybox/busybox-minimal.links<span class="k">)</span>
</span><span class='line'><span class="cp">ifndef BOARD_HAS_SMALL_RECOVERY</span>
</span><span class='line'>exclude :<span class="o">=</span> tune2fs
</span><span class='line'><span class="cp">ifeq ($(BOARD_HAS_LARGE_FILESYSTEM),true)</span>
</span><span class='line'>exclude +<span class="o">=</span> mke2fs
</span><span class='line'><span class="cp">endif</span>
</span><span class='line'><span class="cp">endif</span>
</span><span class='line'>RECOVERY_BUSYBOX_SYMLINKS :<span class="o">=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>TARGET_RECOVERY_ROOT_OUT<span class="k">)</span>/sbin/,<span class="k">$(</span>filter-out <span class="k">$(</span>exclude<span class="k">)</span>,<span class="k">$(</span>notdir <span class="k">$(</span>BUSYBOX_LINKS<span class="k">))))</span>
</span><span class='line'><span class="k">$(</span>RECOVERY_BUSYBOX_SYMLINKS<span class="k">)</span>: BUSYBOX_BINARY :<span class="o">=</span> busybox
</span><span class='line'><span class="k">$(</span>RECOVERY_BUSYBOX_SYMLINKS<span class="k">)</span>: <span class="k">$(</span>LOCAL_INSTALLED_MODULE<span class="k">)</span>
</span><span class='line'>        @echo <span class="s2">&quot;Symlink: $@ -&amp;gt; $(BUSYBOX_BINARY)&quot;</span>
</span><span class='line'>        @mkdir -p <span class="k">$(</span>dir <span class="nv">$@</span><span class="k">)</span>
</span><span class='line'>        @rm -rf <span class="nv">$@</span>
</span><span class='line'>        <span class="k">$(</span>hide<span class="k">)</span> ln -sf <span class="k">$(</span>BUSYBOX_BINARY<span class="k">)</span> <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'>ALL_DEFAULT_INSTALLED_MODULES +<span class="o">=</span> <span class="k">$(</span>RECOVERY_BUSYBOX_SYMLINKS<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
实现方法使用了标准的Makefile目标，在 <code>$(RECOVERY_BUSYBOX_SYMLINKS)</code> 目标下生成相应链接，看起来似乎是只要将Makefile的目标添加到 <code>ALL_DEFAULT_INSTALLED_MODULES</code> 这个变量后，编译的时候就会按照Makefile的标准生成目标。实验后确实可行，不过同时我也发现了一个不足。那就是使用这种方法后，通过mm/mmm命令进行模块编译的时候是没法正确执行的。换言之， <code>ALL_DEFAULT_INSTALLED_MODULES</code> 变量只有在系统完全编译的时候才会被调用。为此，领悟范例的精神后，自己改了一下实现方法，如下：
</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>修改后的生成软链的方法  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="cp">ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;define</span> <span class="err">_make_link</span>
</span><span class='line'>   <span class="k">$(</span>shell <span class="nb">echo</span> “Symlink: <span class="k">$(</span>1<span class="k">)</span> -&amp;gt; <span class="k">$(</span>2<span class="k">)</span>”<span class="k">)</span>
</span><span class='line'>   <span class="k">$(</span>shell mkdir -p <span class="k">$(</span>dir <span class="k">$(</span>1<span class="k">)))</span>
</span><span class='line'>   <span class="k">$(</span>shell rm -rf <span class="k">$(</span>1<span class="k">))</span>
</span><span class='line'>   <span class="k">$(</span>shell ln -sf <span class="k">$(</span>2<span class="k">)</span> <span class="k">$(</span>1<span class="k">))</span>
</span><span class='line'>endef&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;add-busybox-environment-zhiqiangxu-2012108&quot;</span>&gt;Add busybox environment zhiqiang.xu 2012.10.8&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;# Now <span class="nb">let</span>’s <span class="k">do </span>busybox symlinks
</span><span class='line'>BUSYBOX_LINKS :<span class="o">=</span> <span class="k">$(</span>shell cat <span class="k">$(</span>LOCAL_PATH<span class="k">)</span>/busybox.links<span class="k">)</span>
</span><span class='line'>BUSYBOX_SYMLINKS :<span class="o">=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>TARGET_OUT<span class="k">)</span>/busybox/,<span class="k">$(</span>notdir <span class="k">$(</span>BUSYBOX_LINKS<span class="k">)))</span>
</span><span class='line'>BUSYBOX_BINARY :<span class="o">=</span> /system/busybox/<span class="k">$(</span>LOCAL_SRC_FILES<span class="k">)</span>
</span><span class='line'><span class="k">$(</span>foreach _item, <span class="k">$(</span>BUSYBOX_SYMLINKS<span class="k">)</span>, <span class="se">\</span>
</span><span class='line'>       <span class="k">$(</span><span class="nb">eval</span> <span class="k">$(</span>call _make_link,<span class="k">$(</span>_item<span class="k">)</span>,<span class="k">$(</span>BUSYBOX_BINARY<span class="k">))))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;_make_link :<span class="o">=</span>
</span><span class='line'><span class="cp">endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<p>
修改后的方法使用了自定义宏，不论是全系统编译还是使用mm/mmm进行模块编译，每次编译的时候宏都会展开执行。同时为了区分编译模式，我又添加了相应的判断宏 <code>ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))</code> 将执行部分包括在里面。实验下来效果良好，可以根据当前设定的编译模式生成或者不生成相应软链。
最后，发现一点，我修改的这个方法由于没有依赖目标，所以每次编译的时候都会执行一遍，编译效率不高，所以这种结构不能用于大负荷的处理工作。好在生成软链不是多重的工作，这么用用也无什么大碍。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调节Android拨号键盘的震动效果]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/09/24/diao-jie-androidbo-hao-jian-pan-de-zhen-dong-xiao-guo/"/>
    <updated>2012-09-24T21:48:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/09/24/diao-jie-androidbo-hao-jian-pan-de-zhen-dong-xiao-guo</id>
    <content type="html"><![CDATA[<p>
最近在做高通Android项目时遇到一个问题，测试报告说拨号键盘中按键震感偏弱，问题首先提到了我这里。于是，我首先去内核驱动里检查了一下振子的配置，发现给振子的供电已经调到最高值了，看来只能从别的方向下手解决这个问题。震感强烈与否取决于两个因素，一个是驱动电流/驱动电压，而另一个是驱动时长。由于这个项目中给振子的供电是个LDO，只能调节驱动电压，而同时驱动电压已经最大，所以需要想办法加长驱动时间。
</p>
<p>
在和应用一块分析了Android拨号键盘应用的代码后，按键震动的实现在 <code>packages/apps/Contacts/src/com/android/contacts/dialpad/DialpadFragment.java</code> 文件中。该文件中实现了拨号键盘按钮 <code>onClick</code> 事件的监听，其中：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DialpadFragment.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">one</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">playTone</span><span class="o">(</span><span class="n">ToneGenerator</span><span class="o">.</span><span class="na">TONE_DTMF_1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">keyPressed</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_1</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">two</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">playTone</span><span class="o">(</span><span class="n">ToneGenerator</span><span class="o">.</span><span class="na">TONE_DTMF_2</span><span class="o">);</span>
</span><span class='line'>            <span class="n">keyPressed</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_2</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">three</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">playTone</span><span class="o">(</span><span class="n">ToneGenerator</span><span class="o">.</span><span class="na">TONE_DTMF_3</span><span class="o">);</span>
</span><span class='line'>            <span class="n">keyPressed</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_3</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="c1">//以下省略</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
可以看到该监听事件中播放了按键音，同时调用了 <code>keyPressed</code> 这个方法。再来看 <code>keyPressed</code> 方法的实现：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DialpadFragment.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">private</span> <span class="kt">void</span> <span class="nf">keyPressed</span><span class="p">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mHaptic</span><span class="p">.</span><span class="n">vibrate</span><span class="p">();</span>
</span><span class='line'>    <span class="n">KeyEvent</span> <span class="n">event</span> <span class="o">=</span> <span class="n">new</span> <span class="n">KeyEvent</span><span class="p">(</span><span class="n">KeyEvent</span><span class="p">.</span><span class="n">ACTION_DOWN</span><span class="p">,</span> <span class="n">keyCode</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mDigits</span><span class="p">.</span><span class="n">onKeyDown</span><span class="p">(</span><span class="n">keyCode</span><span class="p">,</span> <span class="n">event</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If the cursor is at the end of the text we hide it.</span>
</span><span class='line'>    <span class="n">final</span> <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">mDigits</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">length</span> <span class="o">==</span> <span class="n">mDigits</span><span class="p">.</span><span class="n">getSelectionStart</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">length</span> <span class="o">==</span> <span class="n">mDigits</span><span class="p">.</span><span class="n">getSelectionEnd</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mDigits</span><span class="p">.</span><span class="n">setCursorVisible</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
注意 <code>mHaptic.vibrate()</code> ，从方法名称上可以看出这个方法和震动相关，所以现在只要搞清楚该方法的具体实现即可。继续往下追，从该类变量的声明 <code>private HapticFeedback mHaptic = new HapticFeedback();</code> 可以看到，这个方法属于一个名叫 <code>HapticFeedback</code> 的类。而 <code>HapticFeedback</code> 类存在于 <code>packages/apps/Phone/src/com/android/phone/HapticFeedback.java</code> 文件中。顺利找到 <code>vibrate()</code> 的定义：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HapticFeedback.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">vibrate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">mEnabled</span> <span class="o">||</span> <span class="o">!</span><span class="n">mSettingEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">mVibrator</span><span class="o">.</span><span class="na">vibrate</span><span class="o">(</span><span class="n">mHapticPattern</span><span class="o">,</span> <span class="n">NO_REPEAT</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
其中的判断无需关心，通过名称可以看出应该是和震动设定有关。之后调用了另一个类 <code>Vibrator</code> 的 <code>vibrate</code> 方法。该方法接受两个参数，同样通过名称看得出第一个参数有关模式，第二个参数有关是否重复。去 <code>Vibrator</code> 类里看看，该类存在于 <code>frameworks/base/core/java/android/os/Vibrator.java</code> 文件中，找到 <code>vibrate</code> 的实现<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Vibrator.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Vibrate with a given pattern.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * Pass in an array of ints that are the durations for which to turn on or off</span>
</span><span class='line'><span class="cm"> * the vibrator in milliseconds.  The first value indicates the number of milliseconds</span>
</span><span class='line'><span class="cm"> * to wait before turning the vibrator on.  The next value indicates the number of milliseconds</span>
</span><span class='line'><span class="cm"> * for which to keep the vibrator on before turning it off.  Subsequent values alternate</span>
</span><span class='line'><span class="cm"> * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;&lt;p&gt;</span>
</span><span class='line'><span class="cm"> * To cause the pattern to repeat, pass the index into the pattern array at which</span>
</span><span class='line'><span class="cm"> * to start the repeat, or -1 to disable repeating.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param pattern an array of longs of times for which to turn the vibrator on or off.</span>
</span><span class='line'><span class="cm"> * @param repeat the index into pattern at which to repeat, or -1 if</span>
</span><span class='line'><span class="cm"> *        you don&#39;t want to repeat.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">vibrate</span><span class="o">(</span><span class="kt">long</span><span class="o">[]</span> <span class="n">pattern</span><span class="o">,</span> <span class="kt">int</span> <span class="n">repeat</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mService</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Failed to vibrate; no vibrator service.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// catch this here because the server will do nothing.  pattern may</span>
</span><span class='line'>    <span class="c1">// not be null, let that be checked, because the server will drop it</span>
</span><span class='line'>    <span class="c1">// anyway</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">repeat</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mService</span><span class="o">.</span><span class="na">vibratePattern</span><span class="o">(</span><span class="n">pattern</span><span class="o">,</span> <span class="n">repeat</span><span class="o">,</span> <span class="n">mToken</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Failed to vibrate.&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArrayIndexOutOfBoundsException</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
从注释可以了解到该震动模式的意义，第一个值为等待开启震动的时间，第二个为开启震动后持续的时间，之后交替数字为关闭震动的时间以及开启震动的时间。有兴趣可以追到 <code>frameworks/base/services/java/com/android/server/VibratorService.java</code> 看看 <code>vibratePattern</code> 的实现。不过我们已经找到需要的一切了。OK，再次回到 <code>packages/apps/Phone/src/com/android/phone/HapticFeedback.java</code> 文件中查看传入的震动模式设置，很简单搜到以下处理：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HapticFeedback.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">mEnabled</span> <span class="o">=</span> <span class="n">enabled</span><span class="o">;</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">mVibrator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vibrator</span><span class="o">();</span>
</span><span class='line'>         <span class="k">if</span> <span class="o">(!</span><span class="n">loadHapticSystemPattern</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResources</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">mHapticPattern</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[]</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="n">DURATION</span><span class="o">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">DURATION</span><span class="o">,</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">DURATION</span><span class="o">};</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>         <span class="n">mSystemSettings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Settings</span><span class="o">.</span><span class="na">System</span><span class="o">();</span>
</span><span class='line'>         <span class="n">mContentResolver</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">();</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
首先尝试从系统设置里载入震动模式，否则使用默认的 <code>new long[] {0, DURATION, 2 * DURATION, 3 * DURATION};</code> 模式。其中 <code>DURATION</code> 等于10，所以默认的模式为等待0秒，震10毫秒，停20毫秒，之后震动30毫秒。注释掉 <code>if (!loadHapticSystemPattern(context.getResources()))</code> 判断，然后将默认震动模式改为 <code>{0, 6*DURATION, 1 * DURATION, 6 * DURATION};</code> 试试效果。执行：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>编译  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mmm packages/apps/Contacts/&amp;amp;&amp;amp;mmm packages/apps/Phone/
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后将编译好的apk文件推到手机上，震感明显，说明修改正确<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>。现在只需要去xml文件中找到震动模式的设置部分，相应修改就可以了。最后找到 <code>frameworks/base/core/res/res/values/config.xml</code> 文件，其中有一部分为：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>设置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- Vibrator pattern for feedback about touching a virtual key --&gt;</span>
</span><span class='line'><span class="nt">&lt;integer-array</span> <span class="na">name=</span><span class="s">&quot;config_virtualKeyVibePattern&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>0<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>10<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>20<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item&gt;</span>30<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/integer-array&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
是不是和之前看到的默认震动模式很像呢？最后，根据具体情况调了一个比较适中的值，任务完成。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 还有另外一个 <code>vibrate</code> 的实现，但是该实现只接受一个参数，所以不是我们要找的目标。
</p>


<p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> 修改震动设置后，必须同时编译Contact和Phone，并同时更新到手机上才能生效，具体原因不明白，感觉很怪异。
</p>



</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim的简单配置]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/09/22/vim-de-jian-dan-pei-zhi/"/>
    <updated>2012-09-22T21:49:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/09/22/vim-de-jian-dan-pei-zhi</id>
    <content type="html"><![CDATA[<p>
自己平时喜欢使用<a href="http://www.gnu.org/software/emacs/">GNU Emacs</a>，但是单位工作环境的限制，使我不得不在<a href="http://www.gnu.org/software/screen/">GNU Screen</a>下运行GNU Emacs。但是貌似Screen和Emacs有点小的兼容性问题，至少我没能调整到完全正常。使用中，Emacs经常会上移一行从而造成画面错乱，让人用的很不爽。为此，我决定在工作环境中暂时使用别的编辑器来替代Emacs。之后，我尝试过使用<a href="http://www.emacswiki.org/emacs/MicroEmacs">Micro Emacs</a>，包括Linus最喜欢用的<a href="http://git.kernel.org/?p=editors/uemacs/uemacs.git;a=tree">uEmacs PK</a>，可惜这玩意儿和GNU Emacs差异有点大，加之所有MicroEmacs对多字节语系支持地都不是很好，而自己又是个懒人也不是特别Geek，就没继续用下去。于是我重新将目光放到了<a href="http://www.vim.org">VIM</a> 上。
好在工作中对编辑器的要求不是特别高，VIM也不是特别难使，自己又磕磕碰碰地在网上找了些配置添加到自己的Vim上。用起来还不错，可以交叉索引跳转，可以Outline，对我来说，这就够了。
下面简单列举一下Vim的配置方法，算个存档记录。
</p>
<ul>
<li>Cscope安装配置
<ol>
<li>安装Cscope
     去<a href="http://cscope.sourceforge.net">http://cscope.sourceforge.net</a> 下载cscope源码，然后编译安装。
</li>
<li>在个人目录下的 <code>.vimrc</code> 文件中添加如下配置
</li>
</ol>

</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cscope配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>“””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””
</span><span class='line'>” cscope setting
</span><span class='line'>“””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””
</span><span class='line'>” <span class="k">if </span>has<span class="o">(</span>“cscope”<span class="o">)</span>
</span><span class='line'>“   <span class="nb">set </span><span class="nv">csprg</span><span class="o">=</span>/usr/local/bin/cscope
</span><span class='line'>“   <span class="nb">set </span><span class="nv">csto</span><span class="o">=</span>1
</span><span class='line'>“   <span class="nb">set </span>cst
</span><span class='line'>“   <span class="nb">set </span>nocsverb
</span><span class='line'>“   “ add any database in current directory
</span><span class='line'>“   <span class="k">if </span>filereadable<span class="o">(</span>“cscope.out”<span class="o">)</span>
</span><span class='line'>“       cs add cscope.out
</span><span class='line'>“   endif
</span><span class='line'>“   <span class="nb">set </span>csverb
</span><span class='line'>“ endif
</span><span class='line'>“
</span><span class='line'>“ nmap &amp;lt;C-@&amp;gt;s :cs find s &lt;c-r&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;cr&gt;&lt;cr&gt;
</span><span class='line'><span class="s2">&quot; nmap &amp;lt;C-@&amp;gt;g :cs find g &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">&quot;</span> nmap &amp;lt;C-@&amp;gt;c :cs find c &lt;c-r&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;cr&gt;&lt;cr&gt;
</span><span class='line'><span class="s2">&quot; nmap &amp;lt;C-@&amp;gt;t :cs find t &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">&quot;</span> nmap &amp;lt;C-@&amp;gt;e :cs find e &lt;c-r&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cword&gt;&quot;</span><span class="o">)</span>&lt;cr&gt;&lt;cr&gt;
</span><span class='line'><span class="s2">&quot; nmap &amp;lt;C-@&amp;gt;f :cs find f &lt;c-r&gt;=expand(&quot;</span>&lt;cfile&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">&quot;</span> nmap &amp;lt;C-@&amp;gt;i :cs find i ^&lt;c-r&gt;<span class="o">=</span>expand<span class="o">(</span><span class="s2">&quot;&lt;cfile&gt;&quot;</span><span class="o">)</span>&lt;cr&gt;<span class="nv">$&lt;</span>cr&gt;
</span><span class='line'><span class="s2">&quot; nmap &amp;lt;C-@&amp;gt;d :cs find d &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">function! LoadCscope()</span>
</span><span class='line'><span class="s2">let db = findfile(&quot;</span>cscope.out<span class="s2">&quot;, &quot;</span>.;<span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">if (!empty(db))</span>
</span><span class='line'><span class="s2">  let path = strpart(db, 0, match(db, &quot;</span>/cscope.out<span class="s2">$&quot;))</span>
</span><span class='line'><span class="s2">  set nocsverb &quot;</span> suppress <span class="s1">&#39;duplicate connection&#39;</span> error
</span><span class='line'>  <span class="nb">set </span><span class="nv">csto</span><span class="o">=</span>0
</span><span class='line'>  <span class="nb">set </span>cst
</span><span class='line'>  <span class="s2">&quot; add any database in current directory</span>
</span><span class='line'><span class="s2">  if filereadable(db)</span>
</span><span class='line'><span class="s2">     exe &quot;</span>cs add <span class="s2">&quot; . db . &quot;</span> <span class="s2">&quot; . path</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;s :cs find s &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;g :cs find g &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;c :cs find c &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;t :cs find t &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;e :cs find e &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;f :cs find f &lt;c-r&gt;=expand(&quot;</span>&lt;cfile&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;i :cs find i ^&lt;c-r&gt;=expand(&quot;</span>&lt;cfile&gt;<span class="s2">&quot;)&lt;cr&gt;$&lt;cr&gt;</span>
</span><span class='line'><span class="s2">     nmap &lt;c-c&gt;d :cs find d &lt;c-r&gt;=expand(&quot;</span>&lt;cword&gt;<span class="s2">&quot;)&lt;cr&gt;&lt;cr&gt;</span>
</span><span class='line'><span class="s2">  &quot;</span> <span class="k">else </span>add database pointed to by environment
</span><span class='line'>  elseif <span class="nv">$CSCOPE_DB</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>     cs add <span class="nv">$CSCOPE_DB</span>
</span><span class='line'>  endif
</span><span class='line'>  <span class="nb">set </span>csverb
</span><span class='line'>endif
</span><span class='line'>endfunction
</span><span class='line'>au BufEnter /* call LoadCscope<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></cr></cr></cword></c-r></c-c></cr></cr></cfile></c-r></c-c></cr></cr></cfile></c-r></c-c></cr></cr></cword></c-r></c-c></cr></cr></cword></c-r></c-c></cr></cr></cword></c-r></c-c></cr></cr></cword></c-r></c-c></cr></cr></cword></c-r></c-c></cr></cr></cword></c-r></cr></cr></cfile></c-r></cr></cr></cfile></c-r></cr></cr></cword></c-r></cr></cr></cword></c-r></cr></cr></cword></c-r></cr></cr></cword></c-r></cr></cr></cword></c-r></p>
<ol>
<li>使用时先去要查看的代码目录，然后执行cscope -bqR。完成之后，直接 <code>vi filename</code> 。在需要查找的符号上使用 <code>C-c s/g/c/t/e/f/i/d</code> 即可调用相应的功能。原来cscope插件使用 <code>C-@</code> 做命令引导键，我为了和Emacs同步，将其改为了 <code>C-c</code> 。
</li>
<li>添加Outline显示
</li>
</ol>

<p>  Outline显示由Taglist来实现：
</p>
<ol>
<li>去<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a> 下载Taglist。
</li>
<li>解压后将 <code>taglist.vim</code> 文件放在个人目录下的 <code>.vim/plugin/</code> 目录中。同时，将解压后的 <code>taglist.txt</code> 文件放在个人目录下的 <code>.vim/doc/</code> 目录中。
</li>
<li>最后，添加以下配置到个人目录下的 <code>.vimrc</code> 文件中：
</li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>taglist配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>“ use F8 to toggle taglist
</span><span class='line'>nnoremap &lt;silent&gt; &lt;f8&gt; :TlistToggle&lt;cr&gt;
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_GainFocus_On_ToggleOpen</span><span class="o">=</span>1
</span><span class='line'><span class="nb">let </span><span class="nv">Tlist_Close_On_Select</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure></notextile></div></cr></f8></silent></p>
<p>
  如此便可方便的通过F8按键打开当前文件的Outline，并将光标置于Outline中，选择条目后自动关闭。
</p>
<ul>
<li>设置高亮搜索，自动缩进以及语法高亮
  将以下配置添加到个人目录下的 <code>.vimrc</code> 文件中：
</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>高亮缩进配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span>nu
</span><span class='line'><span class="nb">set </span>hlsearch
</span><span class='line'>syntax <span class="nb">enable</span>
</span><span class='line'><span class="nb">set </span>showmatch
</span><span class='line'><span class="nb">set </span><span class="nv">ts</span><span class="o">=</span>4
</span><span class='line'><span class="nb">set </span><span class="nv">softtabstop</span><span class="o">=</span>4
</span><span class='line'><span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span>4
</span><span class='line'><span class="nb">set </span>expandtab
</span><span class='line'><span class="nb">set </span>autoindent
</span><span class='line'><span class="nb">set </span>cindent
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
OK，如此配置后，查看代码编辑代码舒服多了。
</p>
]]></content>
  </entry>
  
</feed>
