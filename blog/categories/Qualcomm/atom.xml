<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Qualcomm | 不停地疯]]></title>
  <link href="http://blog.xeonxu.info/blog/categories/Qualcomm/atom.xml" rel="self"/>
  <link href="http://blog.xeonxu.info/"/>
  <updated>2014-08-07T22:28:39+08:00</updated>
  <id>http://blog.xeonxu.info/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简述一种电池电量表的取得方法]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/07/02/jian-shu-yi-zhong-dian-chi-dian-liang-biao-de-qu-de-fang-fa/"/>
    <updated>2013-07-02T21:49:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/07/02/jian-shu-yi-zhong-dian-chi-dian-liang-biao-de-qu-de-fang-fa</id>
    <content type="html"><![CDATA[<p>
一般来说，常用的电池电量的计算方法有两种：一种是使用叫做库仑计的ADC器件对电池的电流进行时间积分统计，然后除以电池的总毫安时容量，从而得出电池当前的电量；而另一种是使用电压采样ADC获取电池当前的端电压，并通过软件计算出电池的开路电压，然后根据电池的电压－容量表<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>来对应查找到当前电压下的电池容量。显而易见，从理论上来讲前一种方法更加准确。但在实际上，前一种方式往往受限于库仑计设备的采样精度以及程序员编写驱动程序的水平；同时，在硬件方面也增加了器件成本，应用上并没多少优势。像Marvell的88pm860x
PMIC芯片中是有库仑计器件的，实际使用中统计值和实际偏差较大，需要在驱动程序中通过其它办法对所得值进行补偿校准后才有一定的使用价值。而高通的PM8029
PMIC芯片中则没有库仑计功能，驱动中的逻辑也比较单纯，仅仅是简单的获取VBATT值，并通过电流和电池内阻对VBATT进行校正后得到电池开路电压，然后根据电压－容量表查到当前电池的电量。使用对比下来，高通平台所使用的这种方法简单且有效，只需要根据不同电池制作一份电压－容量表即可完成电池的电量计算。
</p>

<p>
但是，使用电压－容量表也不是没有缺点的，为了说得更清楚点，这里先简单介绍一下电压－容量表。这里所说的电压－容量表中的“电压”指的是电池的开路电压OCV，而不是直接由ADC所采样到的电池端的原生电压VBATT的值。学过中学物理的可以知道，所有电池是有阻抗的，一般我们人为将其抽象为电池内阻，因此一个电池通常可以被抽象为一块原电池和电池内阻的串联体。这样，如果电池有电流流出的话，输出的电流越大，通过欧姆定律可以得出电池内阻的分压也会越大。这意味着在输出电流状态下，外部测得的电池端电压就会比实际开路电压小；相反，如果电池在充电中，电流方向和放电时相反，电流为流入电池。此时测得的端电压就会比开路电压略大。简而言之，从外部所测的的电池端电压很不稳定，它是电池内阻、电流以及温度等因素的函数。因此，开路电压的概念就变得重要了，如果继续基于之前所说的抽象电池来讲，开路电压是在电路中没有电流回路的情况下测得的电池端电压，也即是原电池的端电压。计算开路电压时，一般会估算一个电池内阻值，然后根据欧姆定律使用ADC采样到的电池端电压以及电池电流来计算出开路电压。至于电压－容量对应表，则是基于另外一个假设：电池的不同电量都对应一个唯一的电压值。但是，假设毕竟是假设，事实情况总要复杂一些。先不提容量与电压的非线性关系，不同供应商提供的不同型号的电池，其电压－容量特性都是不一致的，而且有时会出现某一阶段电压特别耐用的情况，这直接导致有时计算得到的电压－容量表中会出现同一电压对应多个容量的情况。如下图中，随着时间的增长，有时电压会保持比较平稳的状态。加上电压－电量表计算时一般都是使用供应商提供的电池充放电数据，这种数据一般使用比较标准的电流对电池进行恒流充放电后统计得到的，和手机实际使用的情况存在一定差异，而且数据采样设备在精度上也有较大的差别。这也造成了如果直接使用供应商数据计算得到的电压－容量表，在实际使用时效果不够好的情况。针对这种情况，人为会对所得结果做一些补偿和修正。但是这种问题一般都要花比较长的时间测试后才有可能发现，而且补偿的效果同样需要花费较长的时间才能验证。那么能不能通过简单的方法有效避免这类问题呢？
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./1656aA2.png" alt="./images/blog/./1656aA2.png" />
</p>

<p>
考虑到数据采样设备以及环境的差异问题，如果直接使用手机内部的ADC采样电池数据，然后使用这个数据计算电量表会不会好一点？实际验证下来，这种方法确实有一定的效果改进。采样之前，将手机环境至于标准功耗模式（最大亮度常亮，循环播放MP3），然后再进行采样，这样可以最大限度的模拟手机使用过程中电池的实际情况。采样的数据包括放电时长以及电池开路电压。至于电量表的计算，在这种情况下更为简单。因为在采样过程中手机处于标准功耗模式中，可以近似认为电流恒定，所以电量的损耗和时间是函数关系。将采样全程时长分为100份，然后分别得到每份所对应的电压值，电量表就做出来了。这种方法有个很大的优势，那就是思路简单，很适合脚本化操作。采样脚本外加计算电量表脚本，使用bash一会儿就可以搞定。
</p>

<p>
可是，出于之前所说的一个问题，电池的电量和电压并没有一个绝对的对应关系，极端时甚至会出现得到的电量表中同一个电压值对应了多个电量。为了解决这个问题，我们引入了数学方法，使用样条差值的办法拟合采样的数据点，然后在拟合的曲线上重新进行电压电量对应关系的获取。使用了这个方法之后，电池电量方面的问题少了很多。而且由于使用了时间分割电量，所以在实际使用中，每格电量的使用时间都很接近，符合用户对电量的认知。拟合曲线的效果如图：
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./1656N2v.png" alt="./images/blog/./1656N2v.png" />
</p>

<p>
改进后的电量表采样及计算脚本在：<a href="https://github.com/xeonxu/battery_analyzer/blob/spline_2step/data_analysis.sh">battery analyzer</a> 。脚本中的样条差值部分使用了octave程序实现，效果蛮不错的。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 指开路电压与电池容量的对应关系表。
</p>




</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈自动生成ISO文件的客制化问题]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti/"/>
    <updated>2013-05-13T22:37:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti</id>
    <content type="html"><![CDATA[<p>
由于最近项目中又有要求说要对手机自带的虚拟驱动光盘的内容做客户定制化，于是基于上篇文章中使用make系统动态构建ISO镜像文件的方法，我又加入了客制化脚本的支持。实现的方法很简单，思路是在make工程下规定一个目录专门做客制化目录，目录下包含以不同项目名称命名的子目录，而相应子目录下便是客户定制的具体内容；同时，每个项目子目录中还包含有一个客制化脚本，用于对光盘文件系统进行重命名或者删减的操作。
</p>
<p>
由于之前已经有了自动生成ISO文件的make系统，基于以上的思路实现下来，加入的代码并不多。首先是改造主makefile：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.2</span>
</span><span class='line'><span class="c"># Date: 2013.05.09</span>
</span><span class='line'><span class="c"># Change Log:</span>
</span><span class='line'><span class="c"># 1.1 Makefile to generate cdrom iso file. Only generate iso file without icon in default.</span>
</span><span class='line'><span class="c"># 1.2 Add script support to customize cdrom&#39;s contents.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CDROM_FS</span>            <span class="o">?=</span> ./CDROM_OBJ
</span><span class='line'>TARGET_CDROM        ?<span class="o">=</span> ./cdrom_install.iso
</span><span class='line'>PRODUCT_DRIVERNAME  ?<span class="o">=</span> Phicomm
</span><span class='line'>CDROM_ROOT          ?<span class="o">=</span> ./
</span><span class='line'>
</span><span class='line'>ICON_NAME       :<span class="o">=</span> <span class="s2">&quot;$(PRODUCT_DRIVERNAME).ico&quot;</span>
</span><span class='line'>ORIGIN_ICON     :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>PRODUCT_DRIVERNAME<span class="k">)</span>/<span class="k">$(</span>ICON_NAME<span class="k">)</span>
</span><span class='line'>CUSTOMIZE       :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>PRODUCT_DRIVERNAME<span class="k">)</span>
</span><span class='line'>CUSTOMIZE_SCRIPT :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/custom.sh
</span><span class='line'>AUTORUN_FILE     :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/autorun.inf
</span><span class='line'>
</span><span class='line'>all:<span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>    mkisofs -input-charset utf-8 -V <span class="s2">&quot;$(PRODUCT_DRIVERNAME) Driver&quot;</span> -J -r -l -v -o <span class="k">$(</span>TARGET_CDROM<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>    @rm -f <span class="k">$(</span>TARGET_CDROM<span class="k">)</span>
</span><span class='line'>    @rm -rf <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>cdrom_new:clean
</span><span class='line'>    @mkdir -p <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>    @if <span class="o">[</span> -e <span class="k">$(</span>CUSTOMIZE<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>    cp -rf <span class="k">$(</span>CUSTOMIZE<span class="k">)</span>/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>/; <span class="se">\</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>:cdrom_new
</span><span class='line'>    @if <span class="o">[</span> -e <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>    cp -f <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/; <span class="se">\</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;[autorun]\r&quot;</span> &amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;icon=\&quot;\\$(ICON_NAME)\&quot;\r&quot;</span> &amp;gt;&amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>CDROM_FS<span class="k">)</span>:<span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>
</span><span class='line'>    @cp -rf <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/driver/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>    @if <span class="o">[</span> -e <span class="k">$(</span>CUSTOMIZE_SCRIPT<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>        sh <span class="k">$(</span>CUSTOMIZE_SCRIPT<span class="k">)</span> <span class="s2">&quot;$(CDROM_FS)&quot;</span>; <span class="se">\</span>
</span><span class='line'>    <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
相较之前的版本，我在其中新增了两个变量 <code>CUSTOMIZE</code> 和 <code>CUSTOMIZE_SCRIPT</code> ，这两个变量分别用来指定不同项目所用的客制化目录和客制化脚本。注意， <code>ORIGIN_ICON</code> 变量的内容和原来相比也有变化，路径由原来的 <code>custom</code> 目录变为了相应的项目子目录，这样对于不同的项目来说也容易管理一些。另外，在 <code>cdrom_new</code> tag段，加入了拷贝客制化内容到iso文件系统的语句。对于主makefile最核心的修改实在最后一个tag段，也就是 <code>$(CDROM_FS)</code> 段的最后一句if判断，判断客制化脚本是否存在，如果存在，则以iso文件系统路径为参数执行该脚本。makefile的改动就这么些，接下来看客制化脚本 <code>custom.sh</code> 的内容。
</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.0</span>
</span><span class='line'><span class="c"># Script which is used to customize contents of cdrom.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SCRIPT_FILE<span class="o">=</span><span class="nv">$0</span>
</span><span class='line'><span class="nv">CDROM_FS</span><span class="o">=</span><span class="nv">$1</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rm -f <span class="nv">$CDROM_FS</span>/PC_Modem_Drivers_Install_Help.pdf
</span><span class='line'>rm -f <span class="nv">$CDROM_FS</span>/PHICOMM_USB_Drivers_Install_Help.pdf&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;do-not-remove&quot;</span>&gt;Do not REMOVE!&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;rm <span class="nv">$SCRIPT_FILE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
对于一般的项目，默认都是使用 <code>driver/</code> 目录下的内容作为驱动光盘的内容，其中默认包含两份中文pdf说明。但是对于外单项目来讲，肯定不能使用中文说明，那么我们就需要将其从光盘文件系统中删除。以上的脚本就做了这么一件事情，删除了光盘文件系统中的两份pdf文件。脚本最后将脚本自身从光盘文件系统中删除，否则最后生成的iso文件中还包含制作脚本，那将是一件很怪异可笑的事情。从makefile中看，客制化脚本会在生成ISO文件前一步执行，因此，客制化脚本的权限是相当大的，基本上可以实现你想对光盘文件系统执行的一切操作。
</p>
<p>
到此，客制化光盘的需求就完全解决了，前后实现起来也就10分钟时间。最后吐槽一遍，Android的make系统太复杂太慢，如果不是我之前在这个模块中直接使用传统make系统，对应这个简单的需求困怕也要多花费2-3倍的时间。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Make系统自动生成手机驱动光盘]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan/"/>
    <updated>2013-03-24T21:36:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan</id>
    <content type="html"><![CDATA[<p>
蔽厂为了方便用户在拿到手机后能够顺利安装手机的电脑驱动，将相应的驱动文件打包成一个iso，然后借助Linux Usb Gadget的支持，在手机连接到电脑后会虚拟出一个驱动光盘来。实际效果蛮不错，但是问题在于，将驱动文件打包为iso的过程基本都靠人工手动完成。这于我这样喜爱偷懒的人来说，是极不科学的。于是我考虑将打包iso文件的操作自动化起来，实现步骤考虑是这样的，首先写下制作iso文件的Makefile，然后通过Android的编译系统调用改Makefile，这样在每次编译生成Android系统镜像的时候，就会自动生成相应iso文件了。
</p>
<p>
为了命令行中生成iso文件，首先需要找到相应的命令行程序。这点对于linux系统来说一点不难，现成的mkisofs就可搞定。接下来，需要制定生成相应iso的命令参数。这点也不难，通过查看mkisofs的man帮助即可快速找到所需要的各种参数。最后我决定使用的命令为： <code>mkisofs -input-charset utf-8 -V "Android Driver" -J -r -l -v -o cdrom.iso cdrom_fs/</code> 。这其中，我指定使用utf-8的编码作为输入编码，使用Android Driver作为光盘的卷标，添加joliet格式和rock ridge支持，冗余输出，将 <code>cdrom_fs/</code> 目录下的所有内容生成为cdrom.iso文件。
</p>
<p>
有了基础命令行，就可以写Makefile了。我写好的Makefile如下，其中还添加了光驱icon的支持：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>makefile生成iso  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.1</span>
</span><span class='line'><span class="c"># Date: 2013.03.22</span>
</span><span class='line'><span class="c"># makefile to generate cdrom iso file. Only generate iso file without icon in default.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CDROM_FS</span>            <span class="o">?=</span> ./CDROM_OBJ
</span><span class='line'>TARGET_CDROM        ?<span class="o">=</span> ./cdrom_install.iso
</span><span class='line'>PRODUCT_DRIVERNAME  ?<span class="o">=</span> Phicomm
</span><span class='line'>CDROM_ROOT          ?<span class="o">=</span> ./
</span><span class='line'>
</span><span class='line'>ICON_NAME       :<span class="o">=</span> <span class="s2">&quot;$(PRODUCT_DRIVERNAME).ico&quot;</span>
</span><span class='line'>ICON_PATH       :<span class="o">=</span>
</span><span class='line'>ORIGIN_ICON     :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>ICON_NAME<span class="k">)</span>
</span><span class='line'>AUTORUN_FILE    :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/autorun.inf
</span><span class='line'>
</span><span class='line'>all:<span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>        mkisofs -input-charset utf-8 -V <span class="s2">&quot;$(PRODUCT_DRIVERNAME) Driver&quot;</span> -J -r -l -v -o <span class="k">$(</span>TARGET_CDROM<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>        @rm -f <span class="k">$(</span>TARGET_CDROM<span class="k">)</span>
</span><span class='line'>        @rm -rf <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>cdrom_new:clean
</span><span class='line'>        @mkdir -p <span class="k">$(</span>CDROM_FS<span class="k">)</span>/<span class="k">$(</span>ICON_PATH<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>:cdrom_new
</span><span class='line'>        @if <span class="o">[</span> -e <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>        cp -f <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/<span class="k">$(</span>ICON_PATH<span class="k">)</span>/; <span class="se">\</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;[autorun]\r&quot;</span> &amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;icon=\&quot;$(ICON_PATH)\\$(ICON_NAME)\&quot;\r&quot;</span> &amp;gt;&amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>CDROM_FS<span class="k">)</span>: <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>
</span><span class='line'>        @cp -rf <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/driver/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

我在这个makefile中定义了几个默认变量，目的就是为了在没有定义这些变量的时候，能有一个默认值。同时假定用来生成iso的文件都存放在driver目录下，以及需要使用的光盘图标文件都存放在当前目录的custom目录下。如果发现有和 <code>$(PRODUCT_DRIVERNAME)</code> 同名的图标文件，则在光盘根目录中生成相应的autorun.inf文件，以显示相应的光盘图标。写好了makefile，直接执行make就可以生成相应的iso文件。不过我的目的是和Android编译系统联动，所以还需要再做些工作。
</p>
<p>
参考Android中kernel的编译方法，我编写了AndroidCdrom.mk文件，如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidCdrom.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.1</span>
</span><span class='line'><span class="c"># Date: 2013.03.22</span>
</span><span class='line'><span class="c"># Android makefile to generate cdrom iso file</span>
</span><span class='line'>
</span><span class='line'><span class="c"># cdrom variant output</span>
</span><span class='line'><span class="c"># Set Default name to Phicomm</span>
</span><span class='line'><span class="nv">PRODUCT_DRIVERNAME</span>      <span class="o">?=</span> Phicomm
</span><span class='line'>PHICOMM_TARGET_CDROM    :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT<span class="k">)</span>/etc/cdrom_install.iso
</span><span class='line'>PHICOMM_CDROM_ROOT      :<span class="o">=</span> device/qcom/msm7627a/cdrom/
</span><span class='line'>PHICOMM_CDROM_FS        :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT_INTERMEDIATES<span class="k">)</span>/CDROM_OBJ/
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>PHICOMM_TARGET_CDROM<span class="k">)</span>:
</span><span class='line'>        <span class="k">$(</span>MAKE<span class="k">)</span> -C <span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_CDROM_ROOT<span class="k">))</span> <span class="nv">CDROM_FS</span><span class="o">=</span><span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_CDROM_FS<span class="k">))</span> <span class="nv">TARGET_CDROM</span><span class="o">=</span><span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_TARGET_CDROM<span class="k">))</span> <span class="nv">PRODUCT_DRIVERNAME</span><span class="o">=</span><span class="s2">&quot;$(PRODUCT_DRIVERNAME)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
内容相当简单，其实就是将Android编译系统中的一些环境变量和目录信息传递给刚才写的makefile中，传入的路径都转换为绝对路径，防止Android编译路径的变换造成文件生成失败。
</p>
<p>
最后一步，将该AndroidCdrom.mk文件添加到android的编译环境中。同样参照kernel的编译方法，在AndroidBoard.mk文件中添加如下两行：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidBoard.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># 2013.3.20 zhiqiang.xu Add for generate cdrom iso</span>
</span><span class='line'><span class="cp">include device/qcom/msm7627a/cdrom/AndroidCdrom.mk</span>
</span><span class='line'>
</span><span class='line'><span class="nf">droidcore</span><span class="o">:</span> <span class="m">$(PHICOMM_TARGET_CDROM)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这其中的意思是将 <code>$(PHICOMM_TARGET_CDROM)</code> 这个目标依赖到droidcore目标上，而droidcore是生成android核心的标签，于是每次编译android时都会首先编译 <code>$(PHICOMM_TARGET_CDROM)</code> 目标，从而自动生成相应的iso文件。实际测试下来，效果非常好，每次修改了光盘中相应文件后，都不需要再自己手动生成iso文件了，编译Android时从头到尾一气呵成。
</p>
<p>
搞定！
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ccache优化Android的编译时间]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian/"/>
    <updated>2013-03-06T23:17:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian</id>
    <content type="html"><![CDATA[<p>
最近在Android编译过程中发现，使用ccache也能很好的提升C/C++编译感受，虽然比不上分布式编译所带来的成倍编译速度的体验，但是减少一半编译时间还是绰绰有余的。其实在Android的编译系统中已经自带了对ccache的支持，之前我那篇讲解如何使用distcc编译Android的<a href="http://blog.xeonxu.info/blog/2012/08/30/da-jian-linuxxia-de-fen-bu-shi-bian-yi-xi-tong/#sec-4">文章</a> 中其实就是在ccache的支持基础上进行修改的。但是Android编译系统中的ccache只对Android系统的库文件等进行优化，并不包括Kernel和LK的编译。没搞明白为什么原生的编译系统没有包含这两部分的ccache支持，为此我自己修改了Android编译系统中Kernel和LK的Makefile文件。使用修改后的Makefile文件编译Kernel和LK时，第二次可以节省3-4分钟的时间。看上去时间不长，但是考虑到原来编译Kernel和LK时需要用时8分钟左右，这点提升也是有意义的。
</p>
<p>
修改非常简单，对于Kernel只需要修改
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidKernel.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/kernel/AndroidKernel.mk</span>
</span><span class='line'><span class="gi">+++ b/kernel/AndroidKernel.mk</span>
</span><span class='line'><span class="gu">@@ -62,30 +62,30 @@ $(KERNEL_OUT):</span>
</span><span class='line'>        mkdir -p $(KERNEL_OUT)
</span><span class='line'>
</span><span class='line'> $(KERNEL_CONFIG): $(KERNEL_OUT)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- $(KERNEL_DEFCONFIG)</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; $(KERNEL_DEFCONFIG)</span>
</span><span class='line'>
</span><span class='line'> $(KERNEL_OUT)/piggy : $(TARGET_PREBUILT_INT_KERNEL)
</span><span class='line'>        $(hide) gunzip -c $(KERNEL_OUT)/arch/arm/boot/compressed/piggy.gzip &amp;gt; $(KERNEL_OUT)/piggy
</span><span class='line'>
</span><span class='line'> $(TARGET_PREBUILT_INT_KERNEL): $(KERNEL_OUT) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- CONFIG_NO_ERROR_ON_MISMATCH=y</span>
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- modules</span>
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=arm CROSS_COMPILE=arm-eabi- modules_install</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; CONFIG_NO_ERROR_ON_MISMATCH=y</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; modules</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; modules_install</span>
</span><span class='line'>        $(mv-modules)
</span><span class='line'>        $(clean-module-folder)
</span><span class='line'>        $(append-dtb)
</span><span class='line'>
</span><span class='line'> $(KERNEL_HEADERS_INSTALL): $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- headers_install</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; headers_install</span>
</span><span class='line'>
</span><span class='line'> kerneltags: $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- tags</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; tags</span>
</span><span class='line'>
</span><span class='line'> kernelconfig: $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class='line'>        env KCONFIG_NOTIMESTAMP=true \
</span><span class='line'><span class="gd">-            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- menuconfig</span>
</span><span class='line'><span class="gi">+            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; menuconfig</span>
</span><span class='line'>        env KCONFIG_NOTIMESTAMP=true \
</span><span class='line'><span class="gd">-            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- savedefconfig</span>
</span><span class='line'><span class="gi">+            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; savedefconfig</span>
</span><span class='line'>        cp $(KERNEL_OUT)/defconfig kernel/arch/arm/configs/$(KERNEL_DEFCONFIG)
</span><span class='line'>
</span><span class='line'> endif
</span></code></pre></td></tr></table></div></figure></notextile></div>

对于LK，修改文件AndroidBoot.mk
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidBoot.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/AndroidBoot.mk</span>
</span><span class='line'><span class="gi">+++ b/AndroidBoot.mk</span>
</span><span class='line'><span class="gu">@@ -23,6 +23,10 @@ else</span>
</span><span class='line'>   USER_SYSTEM := USER_SYSTEM=0
</span><span class='line'> endif
</span><span class='line'>
</span><span class='line'><span class="gi">+ifeq ($(USE_CCACHE), 1)</span>
</span><span class='line'><span class="gi">+  CCACHE := CCACHE=$(ANDROID_BUILD_TOP)/prebuilts/misc/linux-x86/ccache/ccache</span>
</span><span class='line'><span class="gi">+endif</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> # NAND variant output
</span><span class='line'> TARGET_NAND_BOOTLOADER := $(PRODUCT_OUT)/appsboot.mbn
</span><span class='line'> NAND_BOOTLOADER_OUT := $(TARGET_OUT_INTERMEDIATES)/NAND_BOOTLOADER_OBJ
</span><span class='line'><span class="gu">@@ -50,11 +54,11 @@ $(EMMC_BOOTLOADER_OUT): emmc_appsbootldr_clean</span>
</span><span class='line'>
</span><span class='line'> # Top level for NAND variant targets
</span><span class='line'> $(TARGET_NAND_BOOTLOADER): $(NAND_BOOTLOADER_OUT)
</span><span class='line'><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NAND_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) $(SIGNED_KERNEL)</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NAND_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) $(SIGNED_KERNEL) $(CCACHE)</span>
</span><span class='line'>
</span><span class='line'> # Top level for eMMC variant targets
</span><span class='line'> $(TARGET_EMMC_BOOTLOADER): $(EMMC_BOOTLOADER_OUT)
</span><span class='line'><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(EMMC_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) EMMC_BOOT=1 $(SIGNED_KERNEL)</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(EMMC_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) EMMC_BOOT=1 $(SIGNED_KERNEL) $(CCACHE)</span>
</span><span class='line'>
</span><span class='line'> # Keep build NAND &amp;amp; eMMC as default for targets still using TARGET_BOOTLOADER
</span><span class='line'> TARGET_BOOTLOADER := $(PRODUCT_OUT)/EMMCBOOT.MBN
</span><span class='line'><span class="gu">@@ -77,4 +81,4 @@ $(NANDWRITE_OUT): nandwrite_clean</span>
</span><span class='line'>
</span><span class='line'> $(TARGET_NANDWRITE): $(NANDWRITE_OUT)
</span><span class='line'>        @echo $(BOOTLOADER_PLATFORM)_nandwrite
</span><span class='line'><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NANDWRITE_OUT) $(BOOTLOADER_PLATFORM)_nandwrite BUILD_NANDWRITE=1</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NANDWRITE_OUT) $(BOOTLOADER_PLATFORM)_nandwrite BUILD_NANDWRITE=1 $(CCACHE)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

使用时，和Android编译环境默认开启ccache支持一样，只需要在编译环境中定义 <code>USE_CCACHE=1</code> 即可。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高通编译环境一键安装包]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/09/09/gao-tong-bian-yi-huan-jing-yi-jian-an-zhuang-bao/"/>
    <updated>2012-09-09T14:22:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/09/09/gao-tong-bian-yi-huan-jing-yi-jian-an-zhuang-bao</id>
    <content type="html"><![CDATA[<p>
之前一直都在Marvell平台上开发Android，Marvell平台的CP只Release二进制文件，所以开发过程中一般只需要修改并编译AP端的代码就可以了。最近一个月，由于项目需要，开始转到开发高通平台的Android。初步接触下来，高通平台和Marvell平台有很大不同。最显著一点就是，Marvell平台中是AP启动起来后再挂CP跑；而高通平台则是先启动CP<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，然后CP初始化AP并加载程序运行。另一方面，高通的CP相比AP有更大的控制权限，像对GPIO，PMIC的控制等都是CP进行控制，AP端如果需要对这些资源进行操作，则必须先由CP程序分配相应权限给AP才可以。AP和CP的交互则使用共享内存的方式进行同步。
</p>
<p>
高通这种架构特点注定了OEM商需要同时修改AP和CP的代码，所以高通的软件包在Release的时候是分为AP包和MP<sup><a class="footref" name="fnr.1.2" href="#fn.1">1</a></sup>包的。AP包中包括Android，Kernel，AP端的bootloader lk等；而MP包中则包括AMSS，qcsbl，oemsbl等。AP包的编译环境一般都架设在Linux下，使用Android的官方搭建方法就可以搞定。而MP包属于高通的特有产物，需要按照高通的搭建文档来进行，使用RVCT编译器，python以及perl环境。实际搭建下来，MP包的编译环境极为繁琐，从头摸索搭建，没有3、4天是不可能完成的。即便有人之前搭建过，文档工具都准备好的情况下，搭建一个可用的环境也至少需要4个小时。为了方便以后开发人员更加方便快捷的搭建开发环境，我花了2个周末的时间，搭建调试并打包制作了高通编译环境的一键安装包。
</p>
<p>
该一键安装包分为Windows版和Linux版。是的，你没有看错，还有Linux版本的编译环境！用过的人都懂的，Linux版的编译环境比Windows编译环境的效率高的不是一点两点<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>。不过有一点需要强调： <b>我制作的编译包中，RVCT的版本不是高通官方建议的版本</b> 。高通官方文档中说，编译环境需要RVCT 2.2 593版本。而我制作的编译包中RVCT版本分别是Windows 2.2 616，Linux 2.2 686版本。修正版本号比高通官方建议的高，但是高通官方对于高版本的编译环境是否可用没有明确的答复，只是说没有测试过<sup><a class="footref" name="fnr.3" href="#fn.3">3</a></sup>。我个人简单测试过，分别使用593版本的RVCT，616版本RVCT和686版本RVCT编译同一套代码，对编译出来的bin文件进行比较，发现除了日期和签名部分有不同外，其余部分都是相同的。另外，这三种编译器编译出来的文件分别刷到手机上，也都可以正常运行。但是， <b>即便如此我也还是不能保证编译环境是完全没有问题的</b> 。所以，对于要求比较高的朋友，可以在研发中使用我的环境，正式发布版本的时候使用高通官方建议的593版本进行编译。
</p>
<p>
最后放出下载地址（由于CSDN只有60M的上传权限，所以只有Linux环境了，并且需要5个资源分。国外下载地址没有任何限制）：
</p>
<p>
国内下载：
</p>
<p>
<a href="http://download.csdn.net/detail/noexu/4558455">Linux编译环境</a>
</p>
<p>
国外下载：
</p>
<p>
<a href="https://docs.google.com/open?id=0B5GJiOxO7LkWT0F3cDhyTG5ZR2s">Linux编译环境</a>
<a href="https://docs.google.com/open?id=0B5GJiOxO7LkWUkp6N0RCbHF2SWc">Windows编译环境</a>
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 高通平台中将CP称为MP，本质是一样的。
</p>


<p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> 相同配置的机器至少有5:1的效率，windows上编译需要50分钟的代码，Linux上只需要10分钟。
</p>


<p class="footnote"><sup><a class="footnum" name="fn.3" href="#fnr.3">3</a></sup> 根据高通文档的编写时间点以及国企一贯保守的工作习惯上来推断，我猜测高版本应该是没有问题的，因为文档写作之初RVCT 616版本的补丁还没有发布，只是高通方面没人更新。所以，流传到现在就是只能使用593版本的RVCT了。当然这只是我本人的推断。
</p>




</div>
</div>
]]></content>
  </entry>
  
</feed>
