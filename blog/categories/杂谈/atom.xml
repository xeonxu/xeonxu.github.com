<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 杂谈 | 不停地疯]]></title>
  <link href="http://blog.xeonxu.info/blog/categories/杂谈/atom.xml" rel="self"/>
  <link href="http://blog.xeonxu.info/"/>
  <updated>2012-11-18T23:50:18+08:00</updated>
  <id>http://blog.xeonxu.info/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[近期的烦恼]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao/"/>
    <updated>2012-11-18T23:01:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao</id>
    <content type="html"><![CDATA[<p>
算下来两周没有在这里写博客了，其中一大原因在于天气渐凉，不高兴一人在电脑旁受冻-_-!!!  咳咳咳，其实天气有一定影响，不过更主要的问题在于最近遇到的事情繁杂，虽然没有什么难不可为，但自己也确实花了些心思。
</p>
<p>
首先是工作上的两个任务。近期项目正好有点空挡，于是自己决定将高通平台的电量管理从MP端移植至AP端内核里，同时添加一些判断逻辑，以使统计的电量结果不至于像原版那样生硬怪异。只可惜高通平台好多处理需要依赖远程调用，而自己手里却没有一份关于远程调用的官方文档。最后通过高通的support搞定了内核中对PMIC的一些操作，但又发现无法正常取得相应中断状态。总之，这个看起来简单地任务搞了2周还没有实质性突破。另外一个任务是协助同事完成一个用户层接口，方便在用户层升级器件的firmware。这个任务进展倒是蛮快，3个小时就写好框架和功能调试。可惜最后发现buffer有4k限制，现在还在找对策方法，这两天就在考虑这个问题。
</p>
<p>
其次，周末在家各种收拾打扫，洗衣做饭。连续两周了，除了干家务和觅食以外，其它什么都没干。想来自己效率低是一个问题，着实应该改进一下。哦，今天物业还过来处理家里渗水的墙面，也算拖了大半年之久的工程开始了第一步。
</p>
<p>
再者，为了维护简历，将简历移植到moderncv上并使用git来管理。后来又想更统一使用orgmode来写简历，但是苦于找不到好的解决方案，现在琢磨着是不是要自己搞一个。
</p>
<p>
最后，算是小成就。前几日知道了支持kindle3的kindlepdfviewer这个越狱软件，抽空搞了一下，发现对扫描版pdf的支持好到不可思议。于是kindle上瞬间多了很多扫描版的图书。首当其冲就是一直想看但一直没有看的《emacs lisp编程入门》和《GEB》。前者已经看了一半以上，作为emacs爱好者，到现在才较为系统的了解学习lisp是有点晚，不过至少我开始入门了:)
</p>
<p>
今日纯属碎碎念，希望下周工作上任务都能快速完成，个人的几个安排都能顺利进行。另，下篇文章没差错的话应该是功夫网专题，否则又要被人数落跳票了。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近看完的两本书]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/10/29/zui-jin-kan-wan-de-liang-ben-shu/"/>
    <updated>2012-10-29T22:23:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/10/29/zui-jin-kan-wan-de-liang-ben-shu</id>
    <content type="html"><![CDATA[<p>
近日看完两本关于Slackware的入门书，一本是大名鼎鼎的《Slackware Linux Essentials》，另一本是《Slackware Linux Basics》。之所以想起来看Slackware相关的书，是因为人生接触的第一个Linux发行版就是Slackware。那时候家里没有网络，从报纸上知道了开源软件和Linux的存在。后来在书店里看到了电子工业出版社出版的《Linux大全》，那是一本很厚的书，书的背面印着获取书中描述的Linux版本的方法，我就是从那里获取到的人生第一个Linux发行版。原版书提供三个Linux发行版可供选择，而电子工业出版社只提供其中的两个发行版，一个是人们熟知的RedHat，而另一个就是Slackware。当时本人处于对计算机技术极度痴迷的状态，总是希望能有一些挑战，所以选择邮购了其中安装及配置较为复杂的一个发行版，也就是Slackware。当然，最后从拿到Slackware光盘，到安装并简单配置到能使用确实花了不少时间，也因为如此，我对Slackware的印象才如此深刻。之后在大学的时候自己买过RedHat/Fedora并用了那么几次，工作了后接触更多的是Ubuntu，但是随着Linux使用经验的逐渐增长以及知识的不断积累，越发觉得之后使用的那些Linux发行版似乎都缺少了一点什么，这种感觉说不上来，但是这种隐隐约约的感觉将我的目光再次引向Slackware发行版。
</p>
<p>
碰巧，前段时间从网上买过一台Raspberry Pi<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，而且正好，又有爱好者将ArmedSlack<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>移植到了Raspberry Pi上，理所当然，我的Raspberry Pi便跑上了Slackware。可惜，虽说最早接触的是Slackware，但是自己对Slackware的了解并不系统，所以下定决心说一定要看完至少一本关于Slackware的著作。于是，才从网上找到上述的两本书。还好，从目前情况来看，这个任务算是完成了，而且超标了。
</p>
<p>
现在说说才看完的这两本书，作为Slackware Linux的官方教材《Slackware Linux Essentials》<sup><a class="footref" name="fnr.3" href="#fn.3">3</a></sup>更新并不频繁，目前作者正在编写第三版，但是该版尚处于Beta状态<sup><a class="footref" name="fnr.4" href="#fn.4">4</a></sup>，所以市面上能买到的只有第二版。鉴于前者更新不够及时，导致了《Slackware Linux Basics》<sup><a class="footref" name="fnr.5" href="#fn.5">5</a></sup>的出现。从名字上看，前者似乎比后者更加全面，但从本人阅读下来的感觉来说，Basics的内容明显要比Essentials的深入一些；从页数上来说，Basics的相比也要多一些，但是这并不是说两本书哪本更好。单从入门角度来讲，我觉得Essentials的内容更适合入门学习；Basics的内容作为Essentials的补充，适合进阶学习。总体来讲，两本书可以互相参考学习。就本人经验，看完其中一本后，另外一本可以很快看完，因为只需要看差异的部分就可以了。虽然这两本书都以Slackware为切入点，但是其内容对于其它发行版也是部分适用的。所以，不论对于想学Slackware还是想学Linux的同学，我是极力推荐去看这两本书的，比市面上买的那些翻译山寨教学书好过不少。至于需要书的同学，可以去脚注找找，两本书官方都提供常用电子档下载，而我是用软件将HTML转成了kindle格式在kindle上读完这两本书的。
</p>
<p>
另外，做个预告，我打算将Raspberry Pi打造为基于ArmedSlack系统的“科学上网机”，目前基本成型，具体实现方法和相关软件会随着博客的更新逐步公开。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://www.raspberrypi.org">http://www.raspberrypi.org</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> 一款基于ARM芯片的Slackware Linux发行版，网址：<a href="http://www.armedslack.org">http://www.armedslack.org</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.3" href="#fnr.3">3</a></sup> <a href="http://slackbook.org">http://slackbook.org</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.4" href="#fnr.4">4</a></sup> <a href="http://slackbook.org/beta/">http://slackbook.org/beta/</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.5" href="#fnr.5">5</a></sup> <a href="http://code.google.com/p/support/">http://code.google.com/p/support/</a>
</p>



</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小脚本帮大忙]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang/"/>
    <updated>2012-10-21T23:38:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang</id>
    <content type="html"><![CDATA[<p>
前两天单位的在做项目中发现一个Bug：手机在启动后触摸屏有一定几率无法使用。这个Bug非常恼人，因为重现几率非常低，而且只会出现在重启过程中。这意味着不论是调查原因还是验证对策，都将是非常耗时且繁琐的。因为对策问题之前，首先需要重现问题，如此才好分析问题的原因。而这个Bug必须要反复重启手机才能重现，人为操作的话太浪费时间效率低下。
好在这个Bug的行为比较稳定，重现后触屏肯定不能使用。通过adb对比调查正常手机和问题手机的设备节点，发现在出问题的手机中，触屏设备没有注册成功。看来是设备注册失败，导致的触屏异常。于是，我们考虑使用脚本对该Bug进行再现分析。思路如下：
</p>
<ol>
<li>写一个脚本判断触屏驱动的设备节点是否注册成功，如果成功则复位重启；否则保留现场等待分析。
</li>
<li>将该脚本添加到 <code>init.rc</code> 中成为一个服务，在启动时调用。
</li>
<li>脚本运行时将相应的运行信息输出到外部文件中，从而可以计算出再现率。
</li>
</ol>

<p>基于以上想法，写出了以下脚本代码：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>check_tp.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/system/bin/sh</span>
</span><span class='line'><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class='line'><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;x_$tp_name&quot;</span> <span class="o">=</span> <span class="s2">&quot;x_$input_name&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>    reboot
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
同时，修改 <code>init.rc</code> 文件，在其中加入：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service check_tp /system/bin/sh /system/bin/check_tp.sh
</span><span class='line'>    class main
</span><span class='line'>    oneshot
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后重新编译bootimage并刷机。最后使用 <code>adb remount&amp;&amp;adb push check_tp.sh /system/bin/&amp;&amp;adb shell chmod 755 /system/bin/check_tp.sh</code> ，将刚才新写的脚本推送到手机上。重启手机，之后就会看到手机不断的上电然后复位重启。
在运行该脚本不断重启手机8小时之后，手机正常进入了系统。此时操作手机进行验证，发现触屏已经无效。分析 <code>/data/check_tp.log</code> 文件，算出手机共重启了1000多次，从而得出该问题的再现率大概为千分之一。利用该脚本，验证bug方便了好多，大大提高了工作效率。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">后记</h2>
<div class="outline-text-2" id="text-1">

<p>由于以上写的脚本使用到了 <code>if</code> 关键字，而Android系统默认不支持该关键字，必须依赖busybox环境才行。之前我有移植过busybox，但是只在工程模式下生效，所以该脚本在release版本中是不能正常运行的。为了不依赖运行环境，我又将该脚本换了一种写法，改为：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>check_tp2.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/system/bin/sh</span>
</span><span class='line'><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class='line'><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class='line'><span class="k">case</span> <span class="nv">$input_name</span> in
</span><span class='line'>    <span class="nv">$tp_name</span><span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>              reboot
</span><span class='line'>             ;;
</span><span class='line'>    *<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &amp;gt;&amp;gt; /data/check_tp.log
</span><span class='line'>            ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这样，即便是在Android原生环境中，也可以正确无误的运行。这样就能将该脚本发给测试，利用它对release版本进行bug验证了。
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐使用Vitamin-R]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/10/14/tui-jian-shi-yong-vitamin-r/"/>
    <updated>2012-10-14T21:24:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/10/14/tui-jian-shi-yong-vitamin-r</id>
    <content type="html"><![CDATA[<p>
记得之前Twitter上的@justin7974介绍过Vitamin-R这个软件，是一款个人时间管理类的软件，据说可以和<a href="http://www.omnigroup.com/products/omnifocus/">Omnifocus</a> 或者Things配合起来用，看起来不错的样子。只是它20刀的价钱相对它的功能来说，我觉得还是贵了点，所以一直以来都没有下手。前段时间浏览Twitter，突然看见一条新闻，说Vitamin-R在<a href="https://itunes.apple.com/us/app/vitamin-r/id402438916?mt=12">AppStore</a> 上1折优惠只要2刀。于是，毫不犹豫的下单买了它。
</p>
<p>
Vitamin-R运行起来的界面非常简单，运行时会在菜单栏上出来一个"R"图标。点击这个图标就会出现如下界面：
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./79722mqA.png" alt="./images/blog/./79722mqA.png" />
</p>

<p>
截图中是我自己设置的一个”写博客“的工作目标，时长设置为20分钟。设置了目标后，自己就可以和时间赛跑开始干活了。软件默认会在一定时间过后用声音提示用户，以注意所消耗的时间。等倒计时结束，他会以用户设定的方式提醒用户设定的时间已到，并要求用户对自己这段时间的工作情况进行评价和记录。如此，用户便可以对自己完成一个任务所消耗的时间以及投入程度有一个了解，以便未来更高效的工作和制定计划。
</p>
<p>
说到Vitamin-R最让我关注的一个功能，那就是和Omnifocus的整合了。使用也非常简单，直接将Omnifocus中的任务条目用鼠标拖进Vitamin-R的时间片描述中，然后设置任务时间开始即可。任务时间到期后会出现如下这个界面：
</p>

<p>
<img src="http://blog.xeonxu.info/./images/blog/./79722NJT.png" alt="./images/blog/./79722NJT.png" />
</p>

<p>
将下面两个复选框选中，点继续，然后完成。如此这样，你会发现Omnifocus中的任务也会相应的被标记为完成状态。
</p>
<p>
此外，Vitamin支持丰富的快捷键，比如使用CMD-OPT-N，可以打开一个类似便签的界面，用来记录当前任务的一些随笔想法：
</p>

<p>
<img src="http://blog.xeonxu.info/./images/blog/./79722ndf.png" alt="./images/blog/./79722ndf.png" />
</p>

<p>
如截图中所示，除了记录当前任务，还能记录一些其它内容。而这些功能都可以通过快捷键来很方便的调用。
</p>
<p>
当然，Vitamin-R还有一些很有用的功能，比如噪声发生器(Noise Machine)。可以让用户在安静的工作环境中设置一些噪音，模拟自然界的声音，以让用户更关注工作的内容。
</p>
<p>
好了，就介绍到这里。还是那句话，软件本身使用很简单，设置项也不多，至于值不值20刀的价格就见仁见智了，不过2刀是绝对值了:)
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/08/26/hello-world/"/>
    <updated>2012-08-26T20:56:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/08/26/hello-world</id>
    <content type="html"><![CDATA[<h1 id="blog">关于本Blog</h1>
<p>自己是一个很懒散的人，从接触电脑开始到现在不下14个年头，但要说自己做过什么，一时间还真难以回答。零星的积累都随我那善变的爱好一去不返了，让人有种虚度光阴的感觉。自己也不是没有做过尝试，开玩网络之初就在MyOpera上建立了自己的Blog，当然内容以个人日记流水账为主，那时真是快乐的单身年代。可是用了一段MyOpera后总觉得界面和功能不禁人意，而此时的Google正如火如荼，于是便赶了潮流在Blogspot上搭建了人生第二个Blog。可惜好景不长，Blogspot在国内越来越难以访问，原因大家懂的。慢慢的，也就淡了。然而随之时间的流逝，也许是老了，总觉得不记录些什么有愧于人生，从而有了再建立一个Blog的想法。当然，建立本Blog还有以下几个原因:</p>

<ol>
  <li>之前两个博客太过生活化，流水账没有重点。虽说这也是记录博客的一种方式，但是自己想做点改变。</li>
  <li>想把自己工作中的一些经验和生活中的感悟，都点点滴滴的记录下来，希望到老了的时候看到时，不会后悔曾经浪费了生命。</li>
  <li>作为程序员和Emacs追随者，没有不用github和org-mode的理由。加之Emacs又有可以将org-file很好地转换为Octopress Markdown格式的插件，没理由拒绝。</li>
</ol>

<p>最后以一个程序员最惯用的开场白来向各位打个招呼:Hello World!</p>
]]></content>
  </entry>
  
</feed>
