<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Org-Mode | 不停地疯]]></title>
  <link href="http://blog.xeonxu.info/blog/categories/Org-Mode/atom.xml" rel="self"/>
  <link href="http://blog.xeonxu.info/"/>
  <updated>2012-10-16T00:39:00+08:00</updated>
  <id>http://blog.xeonxu.info/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于在Org-Mode下方便插入截图的方法]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/09/23/guan-yu-zai-org-modexia-fang-bian-cha-ru-jie-tu-de-fang-fa/"/>
    <updated>2012-09-23T23:58:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/09/23/guan-yu-zai-org-modexia-fang-bian-cha-ru-jie-tu-de-fang-fa</id>
    <content type="html"><![CDATA[<p>
本来使用 <code>Org-Mode</code> 来写博客就很舒服了， 插入图片也很容易，使用
</p>

<pre class="example">[[图片地址]]
</pre>

<p>
的方法就可以。但是对于编写需要插入截图的文档来说，就得先截图，然后保存图片到相应位置，之后才能使用上面的方法来插入图片。
</p>
<p>
有幸，前面搜索资料时发现了一篇文章<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，其中介绍了一种更加自动化的方式在 <code>Org-Mode</code> 中插入截图。试用后觉得非常方便，不过我又做了一些改动，以适应Mac OSX。同时为使用Octopress，重新设置了图片目录，如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>my-screenshot  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">my-screenshot</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Take a screenshot into a unique-named file in the current buffer file</span>
</span><span class='line'><span class="s">directory and insert a link to this file.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">setq</span> <span class="nv">filename</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">make-temp-name</span> <span class="s">&quot;./&quot;</span><span class="p">)</span> <span class="s">&quot;.png&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">setq</span> <span class="nv">fullfilename</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">file-name-directory</span> <span class="p">(</span><span class="nf">buffer-file-name</span><span class="p">))</span> <span class="s">&quot;images/blog/&quot;</span> <span class="nv">filename</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">file-accessible-directory-p</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">file-name-directory</span>
</span><span class='line'>                                            <span class="p">(</span><span class="nf">buffer-file-name</span><span class="p">))</span> <span class="s">&quot;images/blog/&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="nv">nil</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">make-directory</span> <span class="s">&quot;images/blog/&quot;</span> <span class="nv">t</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">call-process-shell-command</span> <span class="s">&quot;screencapture&quot;</span> <span class="nv">nil</span> <span class="nv">nil</span> <span class="nv">nil</span> <span class="nv">nil</span> <span class="s">&quot;-i&quot;</span> <span class="p">(</span><span class="nf">concat</span>
</span><span class='line'>                                                            <span class="s">&quot;\&quot;&quot;</span> <span class="nv">fullfilename</span> <span class="s">&quot;\&quot;&quot;</span> <span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">insert</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;[[./images/blog/&quot;</span> <span class="nv">filename</span> <span class="s">&quot;]]&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">org-display-inline-images</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

另外，还需要给 <code>org-octopress.el</code> 打个补丁，否则发布文档中图片的索引会有问题，造成某些页面下无法显示：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>org-octopress.el补丁  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/org-octopress.el b/org-octopress.el</span>
</span><span class='line'><span class="gh">index 7f87742..36eed86 100644</span>
</span><span class='line'><span class="gd">--- a/org-octopress.el</span>
</span><span class='line'><span class="gi">+++ b/org-octopress.el</span>
</span><span class='line'><span class="gu">@@ -961,7 +961,7 @@ OPT-PLIST is the export options list.&quot;</span>
</span><span class='line'>          (if (string-match &quot;^file:&quot; desc)
</span><span class='line'>              (setq desc (substring desc (match-end 0)))))
</span><span class='line'>        (setq desc (org-add-props
</span><span class='line'><span class="gd">-                      (concat &quot;&amp;lt;img src=\&quot;&quot; desc &quot;\&quot; alt=\&quot;&quot;</span>
</span><span class='line'><span class="gi">+                      (concat &quot;&amp;lt;img src=\&quot;/&quot; desc &quot;\&quot; alt=\&quot;/&quot;</span>
</span><span class='line'>                               (file-name-nondirectory desc) &quot;\&quot;/&amp;gt;&quot;)
</span><span class='line'>                       &#39;(org-protected t))))
</span><span class='line'>       (cond
</span><span class='line'><span class="gu">@@ -1960,7 +1960,7 @@ PUB-DIR is set, use this as the publishing directory.&quot;</span>
</span><span class='line'>   &quot;Create image tag with source and attributes.&quot;
</span><span class='line'>   (save-match-data
</span><span class='line'>     (if (string-match &quot;^ltxpng/&quot; src)
</span><span class='line'><span class="gd">-       (format &quot;&amp;lt;img src=\&quot;%s\&quot; alt=\&quot;%s\&quot;/&amp;gt;&quot;</span>
</span><span class='line'><span class="gi">+       (format &quot;&amp;lt;img src=\&quot;/%s\&quot; alt=\&quot;/%s\&quot;/&amp;gt;&quot;</span>
</span><span class='line'>                 src (org-find-text-property-in-string &#39;org-latex-src src))
</span><span class='line'>       (let* ((caption (org-find-text-property-in-string &#39;org-caption src))
</span><span class='line'>             (attr (org-find-text-property-in-string &#39;org-attributes src))
</span><span class='line'><span class="gu">@@ -1972,7 +1972,7 @@ PUB-DIR is set, use this as the publishing directory.&quot;</span>
</span><span class='line'> &lt;p&gt;&quot;
</span><span class='line'>                    (if org-par-open &quot;&lt;/p&gt;\n&quot; &quot;&quot;)
</span><span class='line'>                    (if label (format &quot;id=\&quot;%s\&quot; &quot; (org-solidify-link-text label)) &quot;&quot;)))
</span><span class='line'><span class="gd">-       (format &quot;&amp;lt;img src=\&quot;%s\&quot;%s /&amp;gt;&quot;</span>
</span><span class='line'><span class="gi">+       (format &quot;&amp;lt;img src=\&quot;/%s\&quot;%s /&amp;gt;&quot;</span>
</span><span class='line'>                src
</span><span class='line'>                (if (string-match &quot;\\&amp;lt;alt=&quot; (or attr &quot;&quot;))
</span><span class='line'>                    (concat &quot; &quot; attr )
</span></code></pre></td></tr></table></div></figure></notextile></div>

修改完成以后，就可以在编写Org文档的时候执行 <code>M-x my-screenshot</code> 进行抓屏了，抓好的图片存放在当前目录的 <code>./image/blog/</code> 下，命名使用随机命名方式。最后，这个脚本还会开启Emacs <code>Org-Mode</code> 的内嵌图片显示，达到图文并茂的效果。如果不需要该功能，可以使用快捷键 <code>C-c C-x C-v</code> 来关闭。
</p>
<p>
截个之前<a href="#fig-Vim">配置好的Vim</a>，看看效果吧!
</p>

<div id="fig-Vim" class="figure">
<p><img src="http://blog.xeonxu.info/./images/blog/./90530rcx.png" alt="./images/blog/./90530rcx.png" /></p>
<p>Vim with taglist</p>
</div>

<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://dreamrunner.org/wiki/public_html/Emacs/org-mode.html">http://dreamrunner.org/wiki/public_html/Emacs/org-mode.html</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优化使用Orgmode发布Octopress的方法]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/09/05/you-hua-shi-yong-orgmodefa-bu-octopressde-fang-fa/"/>
    <updated>2012-09-05T07:59:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/09/05/you-hua-shi-yong-orgmodefa-bu-octopressde-fang-fa</id>
    <content type="html"><![CDATA[<p>
前几天翻译了一篇来自Tom Alexander的<a href="http://blog.xeonxu.info/blog/2012/09/03/shi-yong-org-modelai-fa-bu-bo-ke/">文章</a> ，文中介绍了如何通过修改Rakefile文件以及添加相应的Emacs设置，来使通过Org-mode发布Octopress博客成为可能。该方法很好用，特别是使用作者自己修改的el脚本可以非常方便的将Org文件输出为octopress的文章。但是，原文作者的方法也有一点缺憾，那就是必须手动移动新建的Org文件到相应的目录下；而且在使用 <code>rake new_post[""]</code> 命令新建文档后必须手动编辑新建的文件，少了那么一点点便捷。为此，我又通过网络查找了一些资料，最后找到了<a href="http://imwuyu.me/blog/configuring-octopress.html/">这里</a> 。 受到这篇文章的启发，我尝试修改了工程中的 <code>Rakefile</code> 文件，最后成功地让一切都自动化起来。具体方法如下：
</p>
<ul>
<li>修改Rakefile中关于org文档目录以及新建post文件的扩展名。同时新增一个编辑器的变量
</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span><a href='https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad'>Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'> <span class="nv">deploy_dir</span>      <span class="o">=</span> “_deploy”   <span class="c"># deploy directory (for Github pages deployment)</span>
</span><span class='line'> <span class="nv">stash_dir</span>       <span class="o">=</span> “_stash”    <span class="c"># directory to stash posts for speedy generation</span>
</span><span class='line'> <span class="nv">posts_dir</span>       <span class="o">=</span> “_posts”    <span class="c"># directory for blog files</span>
</span><span class='line'> <span class="nv">org_posts_dir</span>   <span class="o">=</span> “org_posts”
</span><span class='line'> <span class="nv">themes_dir</span>      <span class="o">=</span> “.themes”   <span class="c"># directory for blog files</span>
</span><span class='line'> <span class="nv">new_post_ext</span>    <span class="o">=</span> “org”  <span class="c"># default new post file extension when using the new_post task</span>
</span><span class='line'> <span class="nv">new_page_ext</span>    <span class="o">=</span> “markdown”  <span class="c"># default new page file extension when using the new_page task</span>
</span><span class='line'> <span class="nv">server_port</span>     <span class="o">=</span> “4000”      <span class="c"># port for preview server eg. localhost:4000&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;open-&quot;</span>&gt;open ,使用系统默认编辑器&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;# open -a Mou，使用Mou打开
</span><span class='line'><span class="c"># open -a Byword，使用Byword打开</span>
</span><span class='line'><span class="c"># subl, 使用Sublime Text2打开</span>
</span><span class='line'><span class="nv">editor</span> <span class="o">=</span>”~/bin/em” <span class="c"># Emacs wrapper</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<p>
我使用我自己编写的emacs wrapper来调用Emacs，为的是让Emacs的启动更快一点（通过server方式）。em的内容如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>em  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n -a <span class="s2">&quot;/Applications/Emacs.app/Contents/MacOS/Emacs&quot;</span> <span class="nv">$1</span> &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
</span></code></pre></td></tr></table></div></figure></notextile></div>
如果你也想通过emacsclient来加速Emacs的启动速度，你可能需要在你的 <code>.emacs</code> 文件中添加以下语句：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>require <span class="err">&#39;</span>edit-server<span class="o">)</span>
</span><span class='line'><span class="o">(</span>edit-server-start<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
当然，你也可以指定 <code>editor</code> 变量为任何你喜欢的编辑器，不过既然都用Org文件发博客了，有什么理由不用Emacs呢？
</p>
<ul>
<li>添加新建 <code>org_posts_dir</code> 目录及相应org文件的语句
</li>
</ul>

<p>在 <code>task :install, :theme do |t, args|</code> 语句之下，添加新建 <code>org_posts_dir</code> 的语句：
</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span><a href='https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad'>Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">theme</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">theme</span> <span class="o">||</span> <span class="err">‘</span><span class="n">classic</span><span class="err">’</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="c1">## Copying “+theme+” theme into ./#{source_dir} and ./sass”</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="n">source_dir</span>
</span><span class='line'>  <span class="n">cp_r</span> <span class="err">“</span><span class="c1">#{themes_dir}/#{theme}/source/.”, source_dir</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="err">“</span><span class="n">sass</span><span class="err">”</span>
</span><span class='line'>  <span class="n">cp_r</span> <span class="err">“</span><span class="c1">#{themes_dir}/#{theme}/sass/.”, “sass”</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="err">“</span><span class="c1">#{source_dir}/#{posts_dir}”</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="err">“</span><span class="c1">#{source_dir}/#{org_posts_dir}”</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="n">public_dir</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
在 <code>task :new_post, :title do |t, args|</code> 语句之下，添加新建文档目录和新建文章的语句：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span><a href='https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad'>Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>   <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class='line'>   <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>   <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>   <span class="n">args</span><span class="o">.</span><span class="n">with_defaults</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;new-post&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>   <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>   <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>     <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>   <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

</p>
<ul>
<li>为了在新建文件之后能够立即编辑，我还在 <code>new_post</code> 命令中加入了相应的编辑语句：
</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span><a href='https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad'>Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="err">“</span><span class="no">Begin</span> <span class="n">a</span> <span class="kp">new</span> <span class="n">post</span> <span class="k">in</span> <span class="c1">#{source_dir}/#{org_posts_dir}”</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="k">raise</span> <span class="err">“</span><span class="c1">### You haven’t set anything up yet. First run &lt;code&gt;rake install&lt;/code&gt; to set up an Octopress theme.” unless File.directory?(source_dir)</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="err">“</span><span class="c1">#{source_dir}/#{posts_dir}”</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="err">“</span><span class="c1">#{source_dir}/#{org_posts_dir}”</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">with_defaults</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="kp">new</span><span class="o">-</span><span class="n">post</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="err">“</span><span class="c1">#{source_dir}/#{org_posts_dir}/#{Time.now.strftime(‘%Y-%m-%d’)}-#{title.to_url}.#{new_post_ext}”</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="err">“</span><span class="n">rake</span> <span class="n">aborted!</span><span class="err">”</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="err">“</span><span class="c1">#{filename} already exists. Do you want to overwrite?”, [‘y’, ‘n’]) == ‘n’</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="err">“</span><span class="no">Creating</span> <span class="kp">new</span> <span class="n">post</span><span class="p">:</span> <span class="c1">#{filename}”</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="err">‘</span><span class="n">w</span><span class="err">’</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="c1">#+BEGIN_HTML”</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“—”</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="n">layout</span><span class="p">:</span> <span class="n">post</span><span class="err">”</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="n">title</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;amp;/</span><span class="p">,</span><span class="err">’</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="err">’</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="err">”</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="n">date</span><span class="p">:</span> <span class="c1">#{Time.now.strftime(‘%Y-%m-%d %H:%M’)}”</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="n">comments</span><span class="p">:</span> <span class="kp">true</span><span class="err">”</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="n">categories</span><span class="p">:</span> <span class="err">“</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“—”</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="err">“</span><span class="c1">#+END_HTML”</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="c1">#{editor}</span>
</span><span class='line'>    <span class="nb">system</span> <span class="err">“</span><span class="nb">sleep</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">#{editor} #{filename}”</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<p>
在 <code>new_page</code> 中也添加相同的语句，不过注意，最后 <code>editor</code> 那一段中文件名称变量需要使用 <code>#{file}</code> ，如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">if</span> <span class="c1">#{editor}</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;sleep 1; </span><span class="si">#{</span><span class="n">editor</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

</p>
<ul>
<li>最后，为了预览更加方便，在 <code>preview</code> 命令最后添加下面的语句：
</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span><a href='https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad'>Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="nb">system</span> <span class="err">“</span><span class="nb">sleep</span> <span class="mi">2</span><span class="p">;</span> <span class="nb">open</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="c1">#{server_port}/”</span>
</span><span class='line'>   <span class="o">[</span><span class="n">jekyllPid</span><span class="p">,</span> <span class="n">compassPid</span><span class="p">,</span> <span class="n">rackupPid</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">pid</span><span class="o">|</span> <span class="no">Process</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
好了，现在我们只需要在控制台上执行 <code>rake new_post["something"]</code> 就会自动在我们设定的 <code>org_posts_dir</code> 目录下新建一份org文档，并且使用我们指定的编辑器打开它。然后随便编辑一点什么，保存并执行 <code>C-c C-e F</code> 或者直接调用Tom Alexander文章中所说的 <code>M-x save-then-publish</code> 命令。最后再在控制台上执行 <code>rake generate&amp;&amp;rake preview</code> 。 Booooom，自动弹出的浏览器上是不是显示出了你刚才编写的文章？非常方便吧？赶快试试！
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Org-Mode来发布博客]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/09/03/shi-yong-org-modelai-fa-bu-bo-ke/"/>
    <updated>2012-09-03T20:58:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/09/03/shi-yong-org-modelai-fa-bu-bo-ke</id>
    <content type="html"><![CDATA[<p>
原文地址： <a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/</a>
</p>
<p>
在之前的一篇<a href="http://blog.paphus.com/blog/2012/07/21/octopress-and-org-mode/"> 文章 </a>中曾介绍过一种从 <a href="http://www.gnu.org/software/emacs/">Emacs</a> 的 <a href="http://orgmode.org/">Org-Mode</a> 中导出文章到Octopress的方法，但这种方法使用简单的HTML导出，会失去语法高亮的特性。为此我将方法重新进行了设计，并且得到了一种更好的方法来取代之前不靠谱的方法。
</p>
<p>
首先，你需要根据  <a href="http://octopress.org/">Octopress</a> 的官方说明进行设置。我在Clone好Octopress的代码库后，进入克隆产生的目录并执行以下命令：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  <span class="c">#!/bin/sh</span>
</span><span class='line'>  <span class="c">#</span>
</span><span class='line'>  curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>  <span class="nb">source</span> ~/.rvm/scripts/rvm
</span><span class='line'>  rvm install 1.9.2
</span><span class='line'>  rvm rubygems latest
</span><span class='line'>  gem install bundler
</span><span class='line'>  bundle install
</span><span class='line'>  rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>

像之前介绍的那样，我们需要在 <code>.emacs</code> 中新增一个叫 <code>save-then-publish</code> 的命令。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Save Then Publish  </span><a href='http://doc.norang.ca/org-mode.html'>source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'>  <span class="p">(</span><span class="nf">defun</span> <span class="nv">save-then-publish</span> <span class="p">()</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">save-buffer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">org-save-all-org-buffers</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">org-publish-current-project</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

接下来，我们需要设置Org-mode的工程。以我的配置举例来说，我将Octopress的文章放置在 <code>~/git/blog/</code> 目录下。如果你需要将你的文章放在其它什么地方，记得修改下面配置中相应的路径。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Publish Projects  </span><a href='http://jaderholm.com/blog/blogging-with-org-mode-and-octopress'>source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'>  <span class="p">(</span><span class="nf">setq</span> <span class="nv">org-publish-project-alist</span>
</span><span class='line'>        <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;blog-org&quot;</span> <span class="o">.</span>  <span class="p">(</span><span class="nf">:base-directory</span> <span class="s">&quot;~/git/blog/source/org_posts/&quot;</span>
</span><span class='line'>                                          <span class="nv">:base-extension</span> <span class="s">&quot;org&quot;</span>
</span><span class='line'>                                          <span class="nv">:publishing-directory</span> <span class="s">&quot;~/git/blog/source/_posts/&quot;</span>
</span><span class='line'>                                          <span class="nv">:sub-superscript</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                                          <span class="nv">:recursive</span> <span class="nv">t</span>
</span><span class='line'>                                          <span class="nv">:publishing-function</span> <span class="nv">org-publish-org-to-octopress</span>
</span><span class='line'>                                          <span class="nv">:headline-levels</span> <span class="mi">4</span>
</span><span class='line'>                                          <span class="nv">:html-extension</span> <span class="s">&quot;markdown&quot;</span>
</span><span class='line'>                                          <span class="nv">:octopress-extension</span> <span class="s">&quot;markdown&quot;</span>
</span><span class='line'>                                          <span class="nv">:body-only</span> <span class="nv">t</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="s">&quot;blog-extra&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="nf">:base-directory</span> <span class="s">&quot;~/git/blog/source/org_posts/&quot;</span>
</span><span class='line'>                                           <span class="nv">:publishing-directory</span> <span class="s">&quot;~/git/blog/source/&quot;</span>
</span><span class='line'>                                           <span class="nv">:base-extension</span> <span class="s">&quot;css\\|pdf\\|png\\|jpg\\|gif\\|svg&quot;</span>
</span><span class='line'>                                           <span class="nv">:publishing-function</span> <span class="nv">org-publish-attachment</span>
</span><span class='line'>                                           <span class="nv">:recursive</span> <span class="nv">t</span>
</span><span class='line'>                                           <span class="nv">:author</span> <span class="nv">nil</span>
</span><span class='line'>                                           <span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="s">&quot;blog&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="nf">:components</span> <span class="p">(</span><span class="s">&quot;blog-org&quot;</span> <span class="s">&quot;blog-extra&quot;</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

现在，我们开始修改代码目录中的 <code>Rakefile</code> 文件。打开它找到 <b>Misc Configs</b> 设置部分，参照下面例子分别修改 <code>new_post_ext</code> 和 <code>new_page_ext</code> 的内容并添加 <code>org_posts_dir</code> 项:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span><a href='https://gist.github.com/1244494'>source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>  ## -- Misc Configs -- ##
</span><span class='line'>
</span><span class='line'>  public_dir      = &quot;public&quot;    # compiled site directory
</span><span class='line'>  source_dir      = &quot;source&quot;    # source file directory
</span><span class='line'>  blog_index_dir  = &#39;source&#39;    # directory for your blog&#39;s index page (if you put your index in source/blog/index.html, set this to &#39;source/blog&#39;)
</span><span class='line'>  deploy_dir      = &quot;_deploy&quot;   # deploy directory (for Github pages deployment)
</span><span class='line'>  stash_dir       = &quot;_stash&quot;    # directory to stash posts for speedy generation
</span><span class='line'>  posts_dir       = &quot;_posts&quot;    # directory for blog files
</span><span class='line'>  org_posts_dir   = &quot;org_posts&quot;
</span><span class='line'>  themes_dir      = &quot;.themes&quot;   # directory for blog files
</span><span class='line'>  new_post_ext    = &quot;org&quot;  # default new post file extension when using the new_post task
</span><span class='line'>  new_page_ext    = &quot;org&quot;  # default new page file extension when using the new_page task
</span><span class='line'>  server_port     = &quot;4000&quot;      # port for preview server eg. localhost:4000
</span></code></pre></td></tr></table></div></figure></notextile></div>

接着修改 <code>Rakefile</code> ，找到下面代码所示的部分并添加 <code>BEGIN_HTML</code> 和 <code>END_HTML</code> 。这样，我们新建文章的时候就能自动生成相应的HTML标签了。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Rakefile  </span><a href='https://gist.github.com/1244494'>source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>      post.puts &quot;#+BEGIN_HTML&quot;
</span><span class='line'>      post.puts &quot;---&quot;
</span><span class='line'>      post.puts &quot;layout: post&quot;
</span><span class='line'>      post.puts &quot;title: \&quot;#{title.gsub(/&amp;amp;/,&#39;&amp;amp;&#39;)}\&quot;&quot;
</span><span class='line'>      post.puts &quot;date: #{Time.now.strftime(&#39;%Y-%m-%d %H:%M&#39;)}&quot;
</span><span class='line'>      post.puts &quot;comments: true&quot;
</span><span class='line'>      post.puts &quot;categories: &quot;
</span><span class='line'>      post.puts &quot;---&quot;
</span><span class='line'>      post.puts &quot;#+END_HTML&quot;
</span></code></pre></td></tr></table></div></figure></notextile></div>

现在，我们可以使用我修改后的HTML导出插件来生成新的文章了。我修改后的导出插件放置在github上，地址在 <a href="https://github.com/craftkiller/orgmode-octopress">https://github.com/craftkiller/orgmode-octopress</a> 。你也可以直接通过 <a href="https://raw.github.com/craftkiller/orgmode-octopress/master/org-octopress.el">org-octopress.el</a> <sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>来下载。将下载的文件存放在你emacs的load-path中，并通过 <code>(require 'org-octopress)</code> 命令来加载。因为我的git代码都存放在 <code>~/git/</code> 目录下，所以我的Emacs配置是这样的：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'>  <span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;load-path</span> <span class="s">&quot;~/git/orgmode-octopress&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;org-octopress</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

终于可以写作了！但是写作之前，你必须像下面示例那样先新增一个org文件并将它移动到org_posts目录下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  <span class="nb">cd </span>blog
</span><span class='line'>  rake <span class="s2">&quot;new_post[title]&quot;</span>
</span><span class='line'>  mv <span class="nb">source</span>/_posts/2012-08-01-title.org <span class="nb">source</span>/org_posts/
</span><span class='line'>  <span class="c"># I keep my posts in GIT so then I add it to the repo</span>
</span><span class='line'>  git add <span class="nb">source</span>/org_posts/2012-08-01-title.org
</span></code></pre></td></tr></table></div></figure></notextile></div>

写完文章后，在Emacs中执行 <code>M-x save-then-publish</code> ，然后你可以到shell中执行 <code>rake gen_deploy</code>. 这样，你的文章就成功的发布到网上了。
</p>
<p>
我这次改进主要新增了代码模块的语法高亮特性，不过目前它只能支持小写的 <code>begin_src</code> <code>end_src</code> 代码块。 另外，它也支持 <code>:title</code> <code>:url</code> 和 <code>:urltext</code> 选项。如果你想了解他们的用法，可以看看这篇博文的源代码:<a href="http://blog.paphus.com/org\_posts/2012-08-01-introducing-octopress-blogging-for-org-mode.org">http://blog.paphus.com/org_posts/2012-08-01-introducing-octopress-blogging-for-org-mode.org</a> 。如果有谁希望帮助改进这个HTML导出插件的话，欢迎在github加入。
</p>
<p>
最后，你也许需要修改你的 <code>.htaccess</code> 文件来重定向图像请求。我重定向了所有SVG文件的请求到根目录上，这样静态链接就不会在访问图像的时候报错了。你需要将 <code>.htaccess</code> 文件放置在 <code>source</code> 目录下。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.htaccess  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>  Options +FollowSymlinks
</span><span class='line'>  RewriteEngine on
</span><span class='line'>  RewriteBase /
</span><span class='line'>  RewriteRule /([^/]+)\.(svg)$ /$1.$2 [R,L]
</span></code></pre></td></tr></table></div></figure></notextile></div>

</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 译者注：注意，该插件只支持Emacs 24.x。之前就因为Emacs版本原因，一直无法使用。
</p>



</div>
</div>
]]></content>
  </entry>
  
</feed>
