<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 不停地疯]]></title>
  <link href="http://blog.xeonxu.info/blog/categories/Android/atom.xml" rel="self"/>
  <link href="http://blog.xeonxu.info/"/>
  <updated>2013-05-14T23:39:10+08:00</updated>
  <id>http://blog.xeonxu.info/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Make系统自动生成手机驱动光盘]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan/"/>
    <updated>2013-03-24T21:36:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan</id>
    <content type="html"><![CDATA[<p>
蔽厂为了方便用户在拿到手机后能够顺利安装手机的电脑驱动，将相应的驱动文件打包成一个iso，然后借助Linux Usb Gadget的支持，在手机连接到电脑后会虚拟出一个驱动光盘来。实际效果蛮不错，但是问题在于，将驱动文件打包为iso的过程基本都靠人工手动完成。这于我这样喜爱偷懒的人来说，是极不科学的。于是我考虑将打包iso文件的操作自动化起来，实现步骤考虑是这样的，首先写下制作iso文件的Makefile，然后通过Android的编译系统调用改Makefile，这样在每次编译生成Android系统镜像的时候，就会自动生成相应iso文件了。
</p>
<p>
为了命令行中生成iso文件，首先需要找到相应的命令行程序。这点对于linux系统来说一点不难，现成的mkisofs就可搞定。接下来，需要制定生成相应iso的命令参数。这点也不难，通过查看mkisofs的man帮助即可快速找到所需要的各种参数。最后我决定使用的命令为： <code>mkisofs -input-charset utf-8 -V "Android Driver" -J -r -l -v -o cdrom.iso cdrom_fs/</code> 。这其中，我指定使用utf-8的编码作为输入编码，使用Android Driver作为光盘的卷标，添加joliet格式和rock ridge支持，冗余输出，将 <code>cdrom_fs/</code> 目录下的所有内容生成为cdrom.iso文件。
</p>
<p>
有了基础命令行，就可以写Makefile了。我写好的Makefile如下，其中还添加了光驱icon的支持：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>makefile生成iso  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.1</span>
</span><span class='line'><span class="c"># Date: 2013.03.22</span>
</span><span class='line'><span class="c"># makefile to generate cdrom iso file. Only generate iso file without icon in default.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CDROM_FS</span>            <span class="o">?=</span> ./CDROM_OBJ
</span><span class='line'>TARGET_CDROM        ?<span class="o">=</span> ./cdrom_install.iso
</span><span class='line'>PRODUCT_DRIVERNAME  ?<span class="o">=</span> Phicomm
</span><span class='line'>CDROM_ROOT          ?<span class="o">=</span> ./
</span><span class='line'>
</span><span class='line'>ICON_NAME       :<span class="o">=</span> <span class="s2">&quot;$(PRODUCT_DRIVERNAME).ico&quot;</span>
</span><span class='line'>ICON_PATH       :<span class="o">=</span>
</span><span class='line'>ORIGIN_ICON     :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>ICON_NAME<span class="k">)</span>
</span><span class='line'>AUTORUN_FILE    :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/autorun.inf
</span><span class='line'>
</span><span class='line'>all:<span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>        mkisofs -input-charset utf-8 -V <span class="s2">&quot;$(PRODUCT_DRIVERNAME) Driver&quot;</span> -J -r -l -v -o <span class="k">$(</span>TARGET_CDROM<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>        @rm -f <span class="k">$(</span>TARGET_CDROM<span class="k">)</span>
</span><span class='line'>        @rm -rf <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>cdrom_new:clean
</span><span class='line'>        @mkdir -p <span class="k">$(</span>CDROM_FS<span class="k">)</span>/<span class="k">$(</span>ICON_PATH<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>:cdrom_new
</span><span class='line'>        @if <span class="o">[</span> -e <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class='line'>        cp -f <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/<span class="k">$(</span>ICON_PATH<span class="k">)</span>/; <span class="se">\</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;[autorun]\r&quot;</span> &amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;icon=\&quot;$(ICON_PATH)\\$(ICON_NAME)\&quot;\r&quot;</span> &amp;gt;&amp;gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>CDROM_FS<span class="k">)</span>: <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>
</span><span class='line'>        @cp -rf <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/driver/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

我在这个makefile中定义了几个默认变量，目的就是为了在没有定义这些变量的时候，能有一个默认值。同时假定用来生成iso的文件都存放在driver目录下，以及需要使用的光盘图标文件都存放在当前目录的custom目录下。如果发现有和 <code>$(PRODUCT_DRIVERNAME)</code> 同名的图标文件，则在光盘根目录中生成相应的autorun.inf文件，以显示相应的光盘图标。写好了makefile，直接执行make就可以生成相应的iso文件。不过我的目的是和Android编译系统联动，所以还需要再做些工作。
</p>
<p>
参考Android中kernel的编译方法，我编写了AndroidCdrom.mk文件，如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidCdrom.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: Zhiqiang Xu</span>
</span><span class='line'><span class="c"># Version: 1.1</span>
</span><span class='line'><span class="c"># Date: 2013.03.22</span>
</span><span class='line'><span class="c"># Android makefile to generate cdrom iso file</span>
</span><span class='line'>
</span><span class='line'><span class="c"># cdrom variant output</span>
</span><span class='line'><span class="c"># Set Default name to Phicomm</span>
</span><span class='line'><span class="nv">PRODUCT_DRIVERNAME</span>      <span class="o">?=</span> Phicomm
</span><span class='line'>PHICOMM_TARGET_CDROM    :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT<span class="k">)</span>/etc/cdrom_install.iso
</span><span class='line'>PHICOMM_CDROM_ROOT      :<span class="o">=</span> device/qcom/msm7627a/cdrom/
</span><span class='line'>PHICOMM_CDROM_FS        :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT_INTERMEDIATES<span class="k">)</span>/CDROM_OBJ/
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>PHICOMM_TARGET_CDROM<span class="k">)</span>:
</span><span class='line'>        <span class="k">$(</span>MAKE<span class="k">)</span> -C <span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_CDROM_ROOT<span class="k">))</span> <span class="nv">CDROM_FS</span><span class="o">=</span><span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_CDROM_FS<span class="k">))</span> <span class="nv">TARGET_CDROM</span><span class="o">=</span><span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_TARGET_CDROM<span class="k">))</span> <span class="nv">PRODUCT_DRIVERNAME</span><span class="o">=</span><span class="s2">&quot;$(PRODUCT_DRIVERNAME)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
内容相当简单，其实就是将Android编译系统中的一些环境变量和目录信息传递给刚才写的makefile中，传入的路径都转换为绝对路径，防止Android编译路径的变换造成文件生成失败。
</p>
<p>
最后一步，将该AndroidCdrom.mk文件添加到android的编译环境中。同样参照kernel的编译方法，在AndroidBoard.mk文件中添加如下两行：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidBoard.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># 2013.3.20 zhiqiang.xu Add for generate cdrom iso</span>
</span><span class='line'><span class="cp">include device/qcom/msm7627a/cdrom/AndroidCdrom.mk</span>
</span><span class='line'>
</span><span class='line'><span class="nf">droidcore</span><span class="o">:</span> <span class="m">$(PHICOMM_TARGET_CDROM)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这其中的意思是将 <code>$(PHICOMM_TARGET_CDROM)</code> 这个目标依赖到droidcore目标上，而droidcore是生成android核心的标签，于是每次编译android时都会首先编译 <code>$(PHICOMM_TARGET_CDROM)</code> 目标，从而自动生成相应的iso文件。实际测试下来，效果非常好，每次修改了光盘中相应文件后，都不需要再自己手动生成iso文件了，编译Android时从头到尾一气呵成。
</p>
<p>
搞定！
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ccache优化Android的编译时间]]></title>
    <link href="http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian/"/>
    <updated>2013-03-06T23:17:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian</id>
    <content type="html"><![CDATA[<p>
最近在Android编译过程中发现，使用ccache也能很好的提升C/C++编译感受，虽然比不上分布式编译所带来的成倍编译速度的体验，但是减少一半编译时间还是绰绰有余的。其实在Android的编译系统中已经自带了对ccache的支持，之前我那篇讲解如何使用distcc编译Android的<a href="http://blog.xeonxu.info/blog/2012/08/30/da-jian-linuxxia-de-fen-bu-shi-bian-yi-xi-tong/#sec-4">文章</a> 中其实就是在ccache的支持基础上进行修改的。但是Android编译系统中的ccache只对Android系统的库文件等进行优化，并不包括Kernel和LK的编译。没搞明白为什么原生的编译系统没有包含这两部分的ccache支持，为此我自己修改了Android编译系统中Kernel和LK的Makefile文件。使用修改后的Makefile文件编译Kernel和LK时，第二次可以节省3-4分钟的时间。看上去时间不长，但是考虑到原来编译Kernel和LK时需要用时8分钟左右，这点提升也是有意义的。
</p>
<p>
修改非常简单，对于Kernel只需要修改
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidKernel.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/kernel/AndroidKernel.mk</span>
</span><span class='line'><span class="gi">+++ b/kernel/AndroidKernel.mk</span>
</span><span class='line'><span class="gu">@@ -62,30 +62,30 @@ $(KERNEL_OUT):</span>
</span><span class='line'>        mkdir -p $(KERNEL_OUT)
</span><span class='line'>
</span><span class='line'> $(KERNEL_CONFIG): $(KERNEL_OUT)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- $(KERNEL_DEFCONFIG)</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; $(KERNEL_DEFCONFIG)</span>
</span><span class='line'>
</span><span class='line'> $(KERNEL_OUT)/piggy : $(TARGET_PREBUILT_INT_KERNEL)
</span><span class='line'>        $(hide) gunzip -c $(KERNEL_OUT)/arch/arm/boot/compressed/piggy.gzip &amp;gt; $(KERNEL_OUT)/piggy
</span><span class='line'>
</span><span class='line'> $(TARGET_PREBUILT_INT_KERNEL): $(KERNEL_OUT) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- CONFIG_NO_ERROR_ON_MISMATCH=y</span>
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- modules</span>
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=arm CROSS_COMPILE=arm-eabi- modules_install</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; CONFIG_NO_ERROR_ON_MISMATCH=y</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; modules</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; modules_install</span>
</span><span class='line'>        $(mv-modules)
</span><span class='line'>        $(clean-module-folder)
</span><span class='line'>        $(append-dtb)
</span><span class='line'>
</span><span class='line'> $(KERNEL_HEADERS_INSTALL): $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- headers_install</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; headers_install</span>
</span><span class='line'>
</span><span class='line'> kerneltags: $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class='line'><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- tags</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; tags</span>
</span><span class='line'>
</span><span class='line'> kernelconfig: $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class='line'>        env KCONFIG_NOTIMESTAMP=true \
</span><span class='line'><span class="gd">-            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- menuconfig</span>
</span><span class='line'><span class="gi">+            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; menuconfig</span>
</span><span class='line'>        env KCONFIG_NOTIMESTAMP=true \
</span><span class='line'><span class="gd">-            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- savedefconfig</span>
</span><span class='line'><span class="gi">+            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; savedefconfig</span>
</span><span class='line'>        cp $(KERNEL_OUT)/defconfig kernel/arch/arm/configs/$(KERNEL_DEFCONFIG)
</span><span class='line'>
</span><span class='line'> endif
</span></code></pre></td></tr></table></div></figure></notextile></div>

对于LK，修改文件AndroidBoot.mk
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AndroidBoot.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/AndroidBoot.mk</span>
</span><span class='line'><span class="gi">+++ b/AndroidBoot.mk</span>
</span><span class='line'><span class="gu">@@ -23,6 +23,10 @@ else</span>
</span><span class='line'>   USER_SYSTEM := USER_SYSTEM=0
</span><span class='line'> endif
</span><span class='line'>
</span><span class='line'><span class="gi">+ifeq ($(USE_CCACHE), 1)</span>
</span><span class='line'><span class="gi">+  CCACHE := CCACHE=$(ANDROID_BUILD_TOP)/prebuilts/misc/linux-x86/ccache/ccache</span>
</span><span class='line'><span class="gi">+endif</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> # NAND variant output
</span><span class='line'> TARGET_NAND_BOOTLOADER := $(PRODUCT_OUT)/appsboot.mbn
</span><span class='line'> NAND_BOOTLOADER_OUT := $(TARGET_OUT_INTERMEDIATES)/NAND_BOOTLOADER_OBJ
</span><span class='line'><span class="gu">@@ -50,11 +54,11 @@ $(EMMC_BOOTLOADER_OUT): emmc_appsbootldr_clean</span>
</span><span class='line'>
</span><span class='line'> # Top level for NAND variant targets
</span><span class='line'> $(TARGET_NAND_BOOTLOADER): $(NAND_BOOTLOADER_OUT)
</span><span class='line'><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NAND_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) $(SIGNED_KERNEL)</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NAND_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) $(SIGNED_KERNEL) $(CCACHE)</span>
</span><span class='line'>
</span><span class='line'> # Top level for eMMC variant targets
</span><span class='line'> $(TARGET_EMMC_BOOTLOADER): $(EMMC_BOOTLOADER_OUT)
</span><span class='line'><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(EMMC_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) EMMC_BOOT=1 $(SIGNED_KERNEL)</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(EMMC_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) EMMC_BOOT=1 $(SIGNED_KERNEL) $(CCACHE)</span>
</span><span class='line'>
</span><span class='line'> # Keep build NAND &amp;amp; eMMC as default for targets still using TARGET_BOOTLOADER
</span><span class='line'> TARGET_BOOTLOADER := $(PRODUCT_OUT)/EMMCBOOT.MBN
</span><span class='line'><span class="gu">@@ -77,4 +81,4 @@ $(NANDWRITE_OUT): nandwrite_clean</span>
</span><span class='line'>
</span><span class='line'> $(TARGET_NANDWRITE): $(NANDWRITE_OUT)
</span><span class='line'>        @echo $(BOOTLOADER_PLATFORM)_nandwrite
</span><span class='line'><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NANDWRITE_OUT) $(BOOTLOADER_PLATFORM)_nandwrite BUILD_NANDWRITE=1</span>
</span><span class='line'><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NANDWRITE_OUT) $(BOOTLOADER_PLATFORM)_nandwrite BUILD_NANDWRITE=1 $(CCACHE)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

使用时，和Android编译环境默认开启ccache支持一样，只需要在编译环境中定义 <code>USE_CCACHE=1</code> 即可。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[嵌入式系统内核驱动模块化转换的简单框架]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia/"/>
    <updated>2012-12-15T15:57:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia</id>
    <content type="html"><![CDATA[<p>
如前篇文章所述，使用模块化方式开发内核驱动可以有效减少编译时间，从而提高开发效率。除此之外，内核模块使用 <code>insmod</code> 载入内核时可以像使用应用程序一样像内核模块中传入特定参数，参数完全由开发者定义。像中断号，GPIO管脚，总线号，设备地址，log等级等等，都可以通过内核参数进行传入。这意味着可以在只编译一次内核驱动模块的情况下，通过传入不同的参数就可以修改驱动程序的属性，大大提高灵活性，对于Debug更加方便。
</p>
<p>
由于在嵌入式系统中，注册设备驱动时也要相应将设备注册到系统中，而设备注册逻辑一般都存放在如 <code>Board_xxxx.c</code> 这类板级驱动文件中。这种安排方式在模块化驱动中显得不是很方便，因为载入模块的系统中需要先注册过设备，这也意味着需要先将相应设备信息添加入板级配置文件后才能使用模块驱动。为此，我想实现一个简单的包装框架，实现以下两个目的：
</p>
<ol>
<li>修改尽可能少的代码进行驱动模块化
</li>
<li>模块化的驱动可以方便的整合到原系统中，无需做多余的改动
</li>
</ol>

<p>
按照这个想法，我使用ft5x0x的tp驱动完成了驱动模块化转换的简单框架。其中包含两个部分，分别如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>模块包装文件  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &amp;lt;linux/kernel.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;linux/module.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;linux/slab.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;linux/i2c.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;linux/err.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;linux/delay.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;linux/gpio.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;asm/uaccess.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &amp;lt;linux/fs.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;linux/mm.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;ft5x06_ts.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="n">init_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="n">exit_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define module_PRINT_ERR     (1U &amp;lt;&amp;lt; 0)</span>
</span><span class='line'><span class="cp">#define module_PRINT_WARNING (1U &amp;lt;&amp;lt; 1)</span>
</span><span class='line'><span class="cp">#define module_PRINT_INFO    (1U &amp;lt;&amp;lt; 2)</span>
</span><span class='line'><span class="cp">#define module_PRINT_DEBUG   (1U &amp;lt;&amp;lt; 3)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef DEFAULT_DEV_NAME</span>
</span><span class='line'><span class="cp">#define DEFAULT_DEV_NAME &quot;ft5x0x_ts&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifndef DEFAULT_DEV_ADAP</span>
</span><span class='line'><span class="cp">#define DEFAULT_DEV_ADAP 255</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifndef DEFAULT_DEV_ADDR</span>
</span><span class='line'><span class="cp">#define DEFAULT_DEV_ADDR 0x38</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define pr_module(debug_level_mask, args...)                    \</span>
</span><span class='line'><span class="cp">    do {                                                        \</span>
</span><span class='line'><span class="cp">        if (debug_mask &amp;amp; module_PRINT_##debug_level_mask) {     \</span>
</span><span class='line'><span class="cp">            printk(KERN_##debug_level_mask &quot;[module_driver] &quot;args);    \</span>
</span><span class='line'><span class="cp">        }                                                       \</span>
</span><span class='line'><span class="cp">    } while (0)</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">debug_mask</span> <span class="o">=</span> <span class="n">module_PRINT_ERR</span> <span class="o">|</span> \
</span><span class='line'>    <span class="n">module_PRINT_INFO</span>  <span class="o">|</span> \
</span><span class='line'>    <span class="n">module_PRINT_WARNING</span>  <span class="o">|</span> <span class="n">module_PRINT_DEBUG</span> <span class="p">;</span>
</span><span class='line'><span class="n">module_param_named</span><span class="p">(</span><span class="n">debug_mask</span><span class="p">,</span> <span class="n">debug_mask</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">u8</span> <span class="n">local_device_adap</span> <span class="o">=</span> <span class="n">DEFAULT_DEV_ADAP</span><span class="p">;</span>
</span><span class='line'><span class="n">module_param_named</span><span class="p">(</span><span class="n">adap</span><span class="p">,</span> <span class="n">local_device_adap</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_PARM_DESC</span><span class="p">(</span><span class="n">adap</span><span class="p">,</span> <span class="s">&quot;Set the i2c adapter of device.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">u8</span> <span class="n">local_device_addr</span> <span class="o">=</span> <span class="n">DEFAULT_DEV_ADDR</span><span class="p">;</span>
</span><span class='line'><span class="n">module_param_named</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">local_device_addr</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_PARM_DESC</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="s">&quot;Set the address of device.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">this_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">MODULE_DRIVER_INFO</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">i2c_board_info</span> <span class="o">*</span><span class="n">this_device_info</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">prepare_func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">module_driver_info</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">this_device_info</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">ft5x0x_device_info</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">prepare_func</span> <span class="o">=</span> <span class="n">ft5x06_touchpad_setup</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">module_driver_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* int rc; */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">i2c_adapter</span> <span class="o">*</span><span class="n">i2c_adap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span><span class="s">&quot;Enter in %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Init GPIOs */</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">module_driver_info</span><span class="p">.</span><span class="n">prepare_func</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">module_driver_info</span><span class="p">.</span><span class="n">prepare_func</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Add device driver. */</span>
</span><span class='line'>    <span class="n">init_wrapper</span><span class="p">();</span>
</span><span class='line'>    <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addr</span> <span class="o">=</span> <span class="n">local_device_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Add i2c device to platform */</span>
</span><span class='line'>    <span class="n">i2c_adap</span> <span class="o">=</span> <span class="n">i2c_get_adapter</span><span class="p">(</span><span class="n">local_device_adap</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">i2c_adap</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pr_module</span><span class="p">(</span><span class="n">ERR</span><span class="p">,</span> <span class="s">&quot;%s: i2c_get_adapter for %d failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">local_device_adap</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">error_adapter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">this_client</span> <span class="o">=</span> <span class="n">i2c_new_device</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">,</span> <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">this_client</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pr_module</span><span class="p">(</span><span class="n">ERR</span><span class="p">,</span> <span class="s">&quot;%s: i2c_new_device for %s failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">error_device</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span> <span class="s">&quot;%s: this_client:%p, addr:%#x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">this_client</span><span class="p">,</span> <span class="n">this_client</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">error_device:</span>
</span><span class='line'>    <span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">error_adapter:</span>
</span><span class='line'>    <span class="n">exit_wrapper</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">module_driver_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span><span class="s">&quot;Enter in %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit_wrapper</span><span class="p">();</span>
</span><span class='line'>    <span class="n">i2c_unregister_device</span><span class="p">(</span><span class="n">this_client</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">module_init</span><span class="p">(</span><span class="n">module_driver_init</span><span class="p">);</span>
</span><span class='line'><span class="n">module_exit</span><span class="p">(</span><span class="n">module_driver_exit</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">&quot;zhiqiang.xu&amp;lt;zhiqiang.xu@phicomm.com.cn&amp;gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">&quot;i2c device module driver&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL v2&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
以上为部分内容， 其中需要实现板级设备信息 <code>ft5x0x_device_info</code> 和设备初始化函数 <code>ft5x06_touchpad_setup</code> 。其实也就是将板级文件中的相应信息拷贝过来即可。
</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>原驱动文件的修改  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#if defined(MODULE)</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">init_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ft5x0x_ts_init</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">init_wrapper</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">exit_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ft5x0x_ts_exit</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">exit_wrapper</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="n">module_init</span><span class="p">(</span><span class="n">ft5x0x_ts_init</span><span class="p">);</span>
</span><span class='line'><span class="n">module_exit</span><span class="p">(</span><span class="n">ft5x0x_ts_exit</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="err">“</span><span class="o">&lt;</span><span class="n">luowj</span><span class="o">&gt;</span><span class="s">&quot;);</span>
</span><span class='line'><span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">&quot;FocalTech ft5x0x TouchScreen driver&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></luowj></p>
<p>
由于内核模块中只能存在一对 <code>module_init</code> 和 <code>module_exit</code> ，所以在原驱动文件中使用模块宏 <code>MODULE</code> 将这部分排除，同时使用统一的包装函数名称将驱动初始化函数和退出函数包装起来，并导出符号。
</p>
<p>
最后，参照上篇文章内容编写 <code>Makefile</code> 文件，如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: zhiqiang.xu</span>
</span><span class='line'><span class="c"># EMail : xeonxu@gmail.com</span>
</span><span class='line'><span class="c"># Date  : 2012-12-11</span>
</span><span class='line'><span class="nv">CROSS_ARCH</span><span class="o">:=</span><span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;$(ARM_EABI_TOOLCHAIN)/arm-eabi-&quot;</span>
</span><span class='line'>KDIR:<span class="o">=</span><span class="k">$(</span>ANDROID_PRODUCT_OUT<span class="k">)</span>/obj/KERNEL_OBJ/
</span><span class='line'>PWD:<span class="o">=</span><span class="k">$(</span>shell <span class="nb">pwd</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>test_driver-objs :<span class="o">=</span> module_driver.o ft5x06_ts.o focaltech_ctl.o  ft5x06_ex_fun.o
</span><span class='line'>obj-m:<span class="o">=</span> test_driver.o
</span><span class='line'>.PHONY: modules package clean
</span><span class='line'>all:package
</span><span class='line'>modules:
</span><span class='line'>    @if <span class="o">[</span> <span class="s2">&quot;$(ANDROID_BUILD_TOP)&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;You have to run \&quot;. build/envsetup.sh\&quot; to init enviroment first. \nAnd then you have to run</span>
</span><span class='line'><span class="s2">\&quot;choosecombo\&quot; to setup the project.&quot;</span>&amp;amp;&amp;amp;exit 1; <span class="k">fi</span>
</span><span class='line'>    @if <span class="o">[</span> ! -d <span class="k">$(</span>KDIR<span class="k">)</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;Build kernel first.&quot;</span>&amp;amp;&amp;amp;cd <span class="k">$(</span>ANDROID_BUILD_TOP<span class="k">)</span>&amp;amp;&amp;amp;make -j4 bootimage&amp;amp;&amp;amp;cd -; <span class="k">fi</span>
</span><span class='line'>    <span class="k">$(</span>MAKE<span class="k">)</span> <span class="k">$(</span>CROSS_ARCH<span class="k">)</span> -C <span class="k">$(</span>KDIR<span class="k">)</span> <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class='line'>
</span><span class='line'>package:modules
</span><span class='line'>    @mkdir -p ./package
</span><span class='line'>    @cp *.bat ./package
</span><span class='line'>    @cp <span class="k">$(</span>obj-m:.o<span class="o">=</span>.ko<span class="k">)</span> ./package
</span><span class='line'>    @tar --transform<span class="o">=</span><span class="s1">&#39;s,package,test_driver,&#39;</span> -jcf test_driver.tar.bz2 ./package/
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers package test_driver.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div>

修改后的驱动文件使用make即可直接编译出模块驱动，同时该驱动中也包含了设备注册的相关处理，所以相对来说更加独立。完整的驱动文件如下：
<a href="https://docs.google.com/open?id=0B5GJiOxO7LkWVDVQMy0tcDBoejg"> <code>test_driver.tar.bz2</code> </a>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在高通平台Android环境下编译内核模块]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/"/>
    <updated>2012-12-04T22:14:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai</id>
    <content type="html"><![CDATA[<p>
高通Android环境中Linux内核会作为Android的一部分进行编译，直接使用make即可一次性从头编到尾。而有的平台比如Marvell，内核的编译操作相对比较独立，必须使用标准的内核编译命令进行单独编译。一般来说，用高通的这种方式比较傻瓜化，一步到底的感觉；而用Marvell的方式用户干预较多，灵活性也更大。当然这里不是比较他们孰优孰劣，对我来说这两种方式各有千秋。在遇到具体问题时，有时还会觉得独立编译内核的方式比较方便，比如编译内核模块这一点上。
</p>
<p>
编译内核模块之前必须先编译内核，编译内核之前必须先指定内核配置。在独立编译内核情况下，编译一遍内核后，可以直接使用 <code>make module</code> 来编译内核模块，如果修改了相应模块文件，使用相同的命令也能很快的进行增量编译。而在高通环境下，由于内核的编译过程已经被集成到Android的编译中，所以每次编译内核或者内核模块时，都必须通过Android的编译环境进行启用。虽然Android提供诸如 <code>make bootimage</code> 命令，可以只编译bootimage相关内容，但是Android庞大的编译体系在初始化时也会占用很多的时间。前段时间在调试一个独立的内核模块时就一直被这个问题困扰着，每次修改模块代码后都必须通过 <code>make bootimage</code> 来编译。虽然只有一个文件，但是每次编译都花费至少1min30sec，严重影响了开发进度。为此，自己参考内核模块独立编译的Makefile和Android的环境特点写了一个内核模块编译Makefile。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># Author: zhiqiang.xu</span>
</span><span class='line'><span class="c"># EMail:  xeonxu@gmail.com</span>
</span><span class='line'><span class="nv">CROSS_ARCH</span><span class="o">:=</span><span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;$(ARM_EABI_TOOLCHAIN)/arm-eabi-&quot;</span>
</span><span class='line'>KDIR:<span class="o">=</span><span class="k">$(</span>ANDROID_PRODUCT_OUT<span class="k">)</span>/obj/KERNEL_OBJ/
</span><span class='line'>PWD:<span class="o">=</span><span class="k">$(</span>shell <span class="nb">pwd</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>obj-m:<span class="o">=</span> my_module.o
</span><span class='line'>.PHONY: modules package clean
</span><span class='line'>all:package
</span><span class='line'>modules:
</span><span class='line'>    @if <span class="o">[</span> <span class="s2">&quot;$(ANDROID_BUILD_TOP)_yes&quot;</span> <span class="o">=</span> <span class="s2">&quot;_yes&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;You have to run \&quot;. build/envsetup.sh\&quot; to init enviroment first. \nAnd then you have to run</span>
</span><span class='line'><span class="s2">\&quot;choosecombo\&quot; to setup the project.&quot;</span>&amp;amp;&amp;amp;exit 1; <span class="k">fi</span>
</span><span class='line'>    @if <span class="o">[</span> ! -d <span class="k">$(</span>KDIR<span class="k">)</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;Build kernle first.&quot;</span>&amp;amp;&amp;amp;cd <span class="k">$(</span>ANDROID_BUILD_TOP<span class="k">)</span>&amp;amp;&amp;amp;make bootimage&amp;amp;&amp;amp;cd -; <span class="k">fi</span>
</span><span class='line'>    <span class="k">$(</span>MAKE<span class="k">)</span> <span class="k">$(</span>CROSS_ARCH<span class="k">)</span> -C <span class="k">$(</span>KDIR<span class="k">)</span> <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class='line'>
</span><span class='line'>package:modules
</span><span class='line'>    @mkdir -p ./package
</span><span class='line'>    @cp <span class="k">$(</span>obj-m:.o<span class="o">=</span>.ko<span class="k">)</span> ./package
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers package
</span></code></pre></td></tr></table></div></figure></notextile></div>
该Makefile默认会将当前目录下的 <code>my_module.c</code> 文件编译为内核模块。同时，在编译时会强制检查Android的环境是否正确配置，如果没有配置它会进行相应提示后退出编译处理。编译模块时使用的内核配置是编译Android时指定项目所配置的内核配置。如果内核还没有编译，则在编译模块之前会自动编译内核主体。如果一切OK，则每次只会编译修改过的模块文件。编译好后会将模块文件单独拷贝到当前目录下的 <code>package</code> 目录中，方便使用。
</p>
<p>
使用该编译脚本后，模块的编写调试效率高了不少，至少每次编译模块都可以在5sec内搞定了。加上上机实测调试，也能在30sec内完成。生命很可贵，像我一样当个懒人吧。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取并操作内核中已注册的I2C设备]]></title>
    <link href="http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/"/>
    <updated>2012-12-03T00:00:00+08:00</updated>
    <id>http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei</id>
    <content type="html"><![CDATA[<p>
之前写过一篇关于如何在Linux内核模块中注册操作I2C设备的<a href="http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/">文章</a> ，那篇文章最后介绍的方法虽然可行，但是会带来一个问题：如果内核中已经包含有某设备的驱动时，那么在模块中注册该设备的I2C client之前必须先将内核中的驱动进行反注册解挂，然后才能再次注册模块中定义的驱动。这样做带来的问题就是，当你将模块从内核中卸载后，系统将无法再次注册内核中原有的驱动，导致相应设备无法使用。今天补充的方法可以在挂载模块时使用模块内的设备驱动，而在卸载后恢复回系统原来的驱动。
</p>
<p>
内容相当简单，上次我们已经可以通过内核提供的接口函数，找到相应I2C总线相应地址I2C设备的I2C client结构指针。而拥有该指针后，其实就可以做很多事了。比如调用 <code>i2c_master_send</code> 接口向该client指向的设备发送I2C命令。这样，如果需要扩展内核中原有的驱动程序，比如向procfs或sysfs中添加相应的用户空间接口等。一般可以在 <code>module_init</code> 中注册sysfs入口的操作函数，然后在操作函数中通过操作该client指针而实现一定的功能。这种方法可以沿用系统内核中原有的设备驱动，可以单纯添加一些系统驱动中没有的功能。
</p>
<p>
除此之外，还有一种替换内核中现有驱动的方法。通过查阅源代码，可以发现内核中还提供一个 <code>device_reprobe(dev)</code> 的API，该函数接受一个device结构体指针，实现重新匹配设备驱动的操作。同时，I2C client结构体中也有相应的device结构体。我们知道Linux内核匹配I2C设备驱动是通过名称来进行匹配的，所以，我们的方法就是用Hack的方式将系统中获取到的I2C Client结构体的名称改为我们需要的名称。一般修改为我们模块中新建的驱动的名称，这样，当调用 <code>device_reprobe</code> 接口后，系统会将原有驱动remove并重新为相应I2C设备适配一个驱动程序。当然，没有出错的话，它会适配到我们修改的名称指向的驱动。如此，我们便可以在内核模块中编写独立的设备驱动程序了。以下是简单示例框架:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">this_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_driver</span> <span class="n">my_driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span>
</span><span class='line'>        <span class="p">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">.</span><span class="n">probe</span> <span class="o">=</span> <span class="n">my_probe</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">remove</span> <span class="o">=</span> <span class="n">my_remove</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">module_driver_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">device</span> <span class="o">*</span><span class="n">ts_dev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">i2c_add_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ts_dev</span> <span class="o">=</span> <span class="n">bus_find_device_by_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">i2c_bus_type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;1-0011&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">ts_dev</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;Did not match the device name:1-0011!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">this_client</span>  <span class="o">=</span>  <span class="n">container_of</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">i2c_client</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">this_client</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">name</span><span class="p">,</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">device_error_exit:</span>
</span><span class='line'>    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;ts i2c del driver&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
只需要实现其中的 <code>my_probe</code> , <code>my_remove</code> 等函数即可实现一个完整的驱动。需要注意的是一定要在调用 <code>device_reprobe</code> 接口之前将相应的设备驱动使用 <code>i2c_add_driver</code> 添加到系统中，否则重新适配中会找不到驱动。移除模块时，用同样的方法将I2C client的名称更改为系统中原有驱动的名称，并重新适配驱动，即可实现卸载模块后系统能够使用原有驱动的功能。示例如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">module_driver_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">name</span><span class="p">,</span> <span class="n">ORIGIN_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">this_client</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

最后需要注意，文中方法皆为本人翻查文档自己琢磨搞出来的，所以不排除存在隐患的可能，但在自己测试环境下使用中没有发现任何问题。如果有疑问，也希望各位看官能提出自己的看法。
</p>
]]></content>
  </entry>
  
</feed>
