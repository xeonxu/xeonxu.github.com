<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <description><![CDATA[不停地疯]]></description>
    <title><![CDATA[不停地疯]]></title>
    <link>http://blog.xeonxu.info/</link>
    <pubDate>2013-02-18T00:38:44+08:00</pubDate>

    
    <item>
      <description>
	<![CDATA[
		 <p>
由于iOS6的完美越狱前段时间才释放出来，有洁癖情节的我纠结了几日，最终还是没能忍受住越狱的诱惑，给自己的iPhone越了狱。托大神们的福，越狱的过程非常傻瓜化，等待几分钟加一次点击就搞定。
</p>
<p>
越狱后，肯定是要装一些实用的软件才能更爽。经过网友们的推荐，经过几天的使用，感觉非常不错。现总结如下：
</p>
<ol>
<li>bitesms 非常好用的短信替代软件，支持快捷发送/快捷回复短信
</li>
<li>zephyr 快捷好用的手势任务管理软件
</li>
<li>ncsetting 通知中心的快捷插件，非常简洁，同时拥有手电筒和VPN开关
</li>
<li>kuaidial 非常好用的拨号工具，来电归属地，黑白名单以及快捷拨号
</li>
<li>bulletin 锁屏界面下激活通知中心的下拉
</li>
<li>activator 快捷手势设定软件，功能非常强大，可以通过手势来呼出应用或开关某个功能
</li>
<li>music controls pro 方便的音乐播放器控制软件，未来还会支持remote server
</li>
<li>flex 非常好用的tweak软件，可以自己编辑插件，修改某些软件的功能
</li>
<li>ifile 最好用的文件管理软件
</li>
</ol>

<p>
以上除了3，4，6项是免费的以外，其余的软件均需要在cydia上付钱购买。不过，花钱购买的这些软件绝对值这个价钱，真的非常好用，提高了不少效率。唯独需要注意的是kuaidial目前还没有iOS6.0的正式版，只有一个Beta版本，不过用下来非常稳定，还没遇到过什么严重的问题。另外安装这款软件需要在cydia中单独添加源：cydia.51ipa.com
</p>
<p>
越狱的成果就是这些，如有更新再添加吧。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao/'>http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[iPhone终于还是被我越狱了]]></title>
      <link>http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao/</link>
      <pubDate>2013-02-11T00:24:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
今天是中国农历新年的大年初一，在此，简单总结一下去年的收获与成就。
</p>
<p>
去年，最大的收获应该要说是我的宝贝儿子出生了。小家伙为了赶在2013年之前出生，竟然提前一个月来到人世。这让作父母的我们真是又兴奋又小心，对他的照顾也更加细致体贴。如今，小宝宝已经出生将近一个半月，这期间多少个不眠夜，多少次喂奶换尿布，让我对做父母的责任也有了较深刻的体会，真心不容易。看到小孩一天天长大，体重也增加了不少，由最初的五斤张到现在的将近九斤，也算是给我们作父母的最大安慰吧。
</p>
<p>
去年是本人以驱动工程师的身份工作在工作岗位上的第一年，这一年中有坎坷，有迷茫，也有收获。但是最大的收获可能是我对于工作，人际等等的重新思考和审视吧。曾经的各种自以为是在经历了去年的一些事情之后，都有了新的认识。工作期间也结识了了一些新朋友，都是些很热心的家伙们，大家有共同的话题，希望以后都能长久保持联系。
</p>
<p>
另外，在去年中因为工作而结识了优秀软件tmux，自学了lisp语言，算是比较过得去的主要收获。哦，还有一件重要的收获，那就是我终于摆脱了三年的契约，扔掉了手中的烂黑莓，重新换上了iPhone：)。同时还收获到了HHKB。
</p>
<p>
说到成就，去年一年中似乎没有达成什么耀目的成就。总体来讲，对Linux内核驱动开发算是入了个门；看完十本书（十本书说实在算不上什么成就，人家一个月读的都比我这多，但是聊胜于无吧）；工作中搞定了一键搭建高通编译环境的软件；提了三篇专利；搭建了这个博客。然后，好像没有了……
</p>
<p>
在新的一年里，我希望宝宝可以健健康康，我可以多看几本书，系统学习及掌握Omnifocus，继续学习驱动开发技术，学习Lua和Ruby，多参加几个开源项目。要求不多，一步步来。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang/'>http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[新年新气象]]></title>
      <link>http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang/</link>
      <pubDate>2013-02-10T16:49:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
入手HHKB的想法在心中已经埋藏了快三年了，但一直没有付诸行动。原因主要是价钱有点太那啥了，一个键盘要卖1700，对任何一个苦穷程序员来说用这么个价钱买个键盘都是过于昂贵的。所幸去年年底之前在公司完成了3份专利，总共能拿到6k的奖金（申请前期只能拿到一半，也就是只能拿到3k），于是心中的小恶魔又开始骚动了。入手的奖金中有1k已经花去用来购买kindle paperwhite，还剩下不到2k的奖金正好可以购买一个HHKB（老婆旁白：最烦买东西前找个理由的人了）:p
</p>
<p>
既然决定入手HHKB，于是到网上查了下购买渠道。由于HHKB并未正式引入国内，所以只能通过淘宝或者海外代购来购买了。淘宝上找到的HHKB卖家对HHKB Pro2的要价普遍为16xx，1700不到的样子；而在日本Amazon网站上，HHKB Pro2英文键盘的报价只有17,834日元，合计约人民币1,222，便宜了500多。即便加上300多的代购费用，也要比国内淘宝购买便宜200多人刀。所以，我最后选择通过<a href="http://www.030buy.com">萌购</a> 的代购服务直接从日本亚马逊购买HHKB。由于萌购的购买汇率比银行牌价稍微高一点，实体价格换为人民币为1323元，加上所有代购手续费用和邮费155元，总共为1478元。下单后一般会在两周内收到，实际上，从我下单到收到货只经历了大概一周多一点的时间，总体来说还是蛮便捷的。
</p>
<p>
收到的键盘包装如下，相当朴素简陋，从外观上看根本看不出这货能卖到1k+。打开包装，里面更是简陋的用一只塑料袋包装键盘，外加两张纸做简要说明就什么都没有了。当然，入HHKB的肯定不单单是看上他的外表，更重要的是看上它轻巧的键盘手感以及键位设置。
<img src="http://blog.xeonxu.info/./images/blog/hhkb_case.jpg" alt="./images/blog/hhkb_case.jpg" />
</p>
<p>
由于HHKB支持在多个平台供不同习惯的使用者使用，它提供了6个DIP开关用来配置键盘的功能。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption />
<colgroup><col class="left" /><col class="left" /><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">SW1</th><th scope="col" class="left">SW2</th><th scope="col" class="left">設定モード</th></tr>
</thead>
<tbody>
<tr><td class="left">OFF</td><td class="left">OFF</td><td class="left">HHKモード（PC）</td></tr>
<tr><td class="left">ON</td><td class="left">OFF</td><td class="left">Lite拡張モード（PC）</td></tr>
<tr><td class="left">OFF</td><td class="left">ON</td><td class="left">Macintoshモード</td></tr>
<tr><td class="left">ON</td><td class="left">ON</td><td class="left">設定禁止</td></tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption />
<colgroup><col class="left" /><col class="left" /><col class="left" /><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">DIP SW</th><th scope="col" class="left">機能</th><th scope="col" class="left" /><th scope="col" class="left" /></tr>
<tr><th scope="col" class="left" /><th scope="col" class="left">状態</th><th scope="col" class="left">キー</th><th scope="col" class="left">機能</th></tr>
</thead>
<tbody>
<tr><td class="left">3</td><td class="left">OFF</td><td class="left">Delete</td><td class="left">Delete</td></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">Delete</td><td class="left">BS（BackSpace）</td></tr>
<tr><td class="left">4</td><td class="left">OFF</td><td class="left">左◇</td><td class="left">左◇</td></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">左◇</td><td class="left">Fn</td></tr>
<tr><td class="left">5</td><td class="left">OFF</td><td class="left">Alt</td><td class="left">Alt</td></tr>
<tr><td class="left" /><td class="left" /><td class="left">◇</td><td class="left">◇</td></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">Alt</td><td class="left">◇</td></tr>
<tr><td class="left" /><td class="left" /><td class="left">◇</td><td class="left">Alt</td></tr>
<tr><td class="left">6</td><td class="left">OFF</td><td class="left">Wake Up 無効</td><td class="left" /></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">Wake Up 有効</td><td class="left" /></tr>
</tbody>
</table>

<p>我平时使用iMac，所以我HHKB的配置是：011100。也就是Mac键盘模式，Delete键为退格键，同时左Cmd键设置为Fn键。之所以将左Cmd键设置为Fn键，是因为Pro2的英文键盘配置上只有一个Fn键，而且在键盘的最右边，即便使用右手掌去按也不是很方便，于是退其次将左右上常用的Cmd按键配置为了Fn键。说到这点，我有点后悔入手英文键盘了，因为日文键盘上有左右两个Fn键，而且有指针键，而且还有三个日文输入法中常用的转换键。这么配置下来，由于失去了之前常用的左手Cmd按键，某些操作必须配合右手来使用，有点小小的不适应，目前还在进一步熟悉中。当然，HHKB在Emacs下使用是非常清脆干爽舒适的。
关于HHKB按键布置以及DIP配置可以参见：<a href="http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hairetu.html">HHKB按键布置</a> 和 <a href="http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html">HHKB DIP配置</a></p>

<p>
最后，来张我的HHKB和iMac的合影，看起来还是蛮搭的。
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/hhkb_imac.jpg" alt="./images/blog/hhkb_imac.jpg" />
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb/'>http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[入手HHKB Pro2]]></title>
      <link>http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb/</link>
      <pubDate>2013-01-26T16:57:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
不经意间，9个月过去了，宝宝也赶在13年前夕，提前预产期一个月降临人世。由于早产，被医院隔离监护了2天，第3天才将小孩从保暖房里接出来。第一次看到自己小孩娇小的模样，真是又兴奋，又担心。开始当爸爸后，各种工作也就接踵而至。首先是喂奶，由于是初期，母乳还没有多少，只能泡奶粉。但是我这个毛手爸爸除了能喂饱自己以外，小孩奶粉还真不会泡。看了奶粉说明，试了水温，冲了奶粉，结果小孩还是不爱吃。后来我才知道，那是因为之前调的奶粉温度太低了。好在到了第2天，母乳已经很多了，可以直接母乳喂养，才算将我从冲泡奶粉的差事中解放出来。除了喂奶，换尿布也是重头戏。小孩2小时吃一次奶换一次尿布，初为父母的我们，第一天为此真是忙得手忙脚乱。还好有“尿不湿”的存在，否则光是换洗尿布，就够我受了。
</p>
<p>
现在，从小孩出生，已经过去了半个月，小孩也从之前的5斤长到如今的7斤。看着他一天天长大，心中充满了欣慰。真心希望他能越来越好，健健康康。
</p>
<p>
加油，小子！
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao/'>http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[当爸爸了]]></title>
      <link>http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao/</link>
      <pubDate>2013-01-12T22:13:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
这几天听到的最令人震惊也是最让人遗憾的消息就是，年轻的31岁程序开发者冯华君去世了。当我刚在twitter上看到这个消息的时候，我都不相信自己的眼睛。我与冯华君并未谋过面，只在几年前和他在MSN上简单聊过几句。那时他正在开发Mac上的FIT输入法，而我联系他是跟他反馈几个关于输入法的改进建议。从那次简单的交流中，我所认识到的冯华君是一位有想法，有理想抱负的年轻人。当他得知我也是一名程序员时，也曾鼓励我去为FIT做贡献。可惜，我的懒惰和拖延症使得这一切成为遗憾，这是唯一一次可以和华君一起工作的机会。此后我们在网上接触的机会少了，再后来出现了twitter和微博，我关注了他。但在微博上我们基本没有怎么互动过，因为那时的我变得更加懒惰，只是彼此价值观接近，我时常转发一些他的帖子。然而现如今，斯人已然离去。
</p>
<p>
今天，在为冯华君惋惜的同时，我也感到无比地懊恼和惭愧。只愿这位年轻人在世界地另一个地方能过得好吧。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun/'>http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[纪念冯华君]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun/</link>
      <pubDate>2012-12-24T21:39:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
如前篇文章所述，使用模块化方式开发内核驱动可以有效减少编译时间，从而提高开发效率。除此之外，内核模块使用 <code>insmod</code> 载入内核时可以像使用应用程序一样像内核模块中传入特定参数，参数完全由开发者定义。像中断号，GPIO管脚，总线号，设备地址，log等级等等，都可以通过内核参数进行传入。这意味着可以在只编译一次内核驱动模块的情况下，通过传入不同的参数就可以修改驱动程序的属性，大大提高灵活性，对于Debug更加方便。
</p>
<p>
由于在嵌入式系统中，注册设备驱动时也要相应将设备注册到系统中，而设备注册逻辑一般都存放在如 <code>Board_xxxx.c</code> 这类板级驱动文件中。这种安排方式在模块化驱动中显得不是很方便，因为载入模块的系统中需要先注册过设备，这也意味着需要先将相应设备信息添加入板级配置文件后才能使用模块驱动。为此，我想实现一个简单的包装框架，实现以下两个目的：
</p>
<ol>
<li>修改尽可能少的代码进行驱动模块化
</li>
<li>模块化的驱动可以方便的整合到原系统中，无需做多余的改动
</li>
</ol>

<p>
按照这个想法，我使用ft5x0x的tp驱动完成了驱动模块化转换的简单框架。其中包含两个部分，分别如下：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>模块包装文件  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;linux/kernel.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/module.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/slab.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/i2c.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/err.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/delay.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/gpio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;asm/uaccess.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;linux/fs.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/mm.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &quot;ft5x06_ts.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">extern</span> <span class="kt">int</span> <span class="n">init_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line"><span class="k">extern</span> <span class="kt">void</span> <span class="n">exit_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define module_PRINT_ERR     (1U &lt;&lt; 0)</span>
</span><span class="line"><span class="cp">#define module_PRINT_WARNING (1U &lt;&lt; 1)</span>
</span><span class="line"><span class="cp">#define module_PRINT_INFO    (1U &lt;&lt; 2)</span>
</span><span class="line"><span class="cp">#define module_PRINT_DEBUG   (1U &lt;&lt; 3)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef DEFAULT_DEV_NAME</span>
</span><span class="line"><span class="cp">#define DEFAULT_DEV_NAME &quot;ft5x0x_ts&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#ifndef DEFAULT_DEV_ADAP</span>
</span><span class="line"><span class="cp">#define DEFAULT_DEV_ADAP 255</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#ifndef DEFAULT_DEV_ADDR</span>
</span><span class="line"><span class="cp">#define DEFAULT_DEV_ADDR 0x38</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define pr_module(debug_level_mask, args...)                    \</span>
</span><span class="line"><span class="cp">    do {                                                        \</span>
</span><span class="line"><span class="cp">        if (debug_mask &amp; module_PRINT_##debug_level_mask) {     \</span>
</span><span class="line"><span class="cp">            printk(KERN_##debug_level_mask &quot;[module_driver] &quot;args);    \</span>
</span><span class="line"><span class="cp">        }                                                       \</span>
</span><span class="line"><span class="cp">    } while (0)</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">debug_mask</span> <span class="o">=</span> <span class="n">module_PRINT_ERR</span> <span class="o">|</span> \
</span><span class="line">    <span class="n">module_PRINT_INFO</span>  <span class="o">|</span> \
</span><span class="line">    <span class="n">module_PRINT_WARNING</span>  <span class="o">|</span> <span class="n">module_PRINT_DEBUG</span> <span class="p">;</span>
</span><span class="line"><span class="n">module_param_named</span><span class="p">(</span><span class="n">debug_mask</span><span class="p">,</span> <span class="n">debug_mask</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="n">u8</span> <span class="n">local_device_adap</span> <span class="o">=</span> <span class="n">DEFAULT_DEV_ADAP</span><span class="p">;</span>
</span><span class="line"><span class="n">module_param_named</span><span class="p">(</span><span class="n">adap</span><span class="p">,</span> <span class="n">local_device_adap</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_PARM_DESC</span><span class="p">(</span><span class="n">adap</span><span class="p">,</span> <span class="s">&quot;Set the i2c adapter of device.&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="n">u8</span> <span class="n">local_device_addr</span> <span class="o">=</span> <span class="n">DEFAULT_DEV_ADDR</span><span class="p">;</span>
</span><span class="line"><span class="n">module_param_named</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">local_device_addr</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_PARM_DESC</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="s">&quot;Set the address of device.&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">this_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">MODULE_DRIVER_INFO</span> <span class="p">{</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">i2c_board_info</span> <span class="o">*</span><span class="n">this_device_info</span><span class="p">;</span>
</span><span class="line">    <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">prepare_func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span> <span class="n">module_driver_info</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">this_device_info</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ft5x0x_device_info</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">prepare_func</span> <span class="o">=</span> <span class="n">ft5x06_touchpad_setup</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">module_driver_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="cm">/* int rc; */</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">i2c_adapter</span> <span class="o">*</span><span class="n">i2c_adap</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span><span class="s">&quot;Enter in %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Init GPIOs */</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">module_driver_info</span><span class="p">.</span><span class="n">prepare_func</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="o">*</span><span class="n">module_driver_info</span><span class="p">.</span><span class="n">prepare_func</span><span class="p">)();</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Add device driver. */</span>
</span><span class="line">    <span class="n">init_wrapper</span><span class="p">();</span>
</span><span class="line">    <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="o">-&gt;</span><span class="n">addr</span> <span class="o">=</span> <span class="n">local_device_addr</span><span class="p">;</span>
</span><span class="line">    <span class="cm">/* Add i2c device to platform */</span>
</span><span class="line">    <span class="n">i2c_adap</span> <span class="o">=</span> <span class="n">i2c_get_adapter</span><span class="p">(</span><span class="n">local_device_adap</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">i2c_adap</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">pr_module</span><span class="p">(</span><span class="n">ERR</span><span class="p">,</span> <span class="s">&quot;%s: i2c_get_adapter for %d failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">local_device_adap</span><span class="p">);</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">error_adapter</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">this_client</span> <span class="o">=</span> <span class="n">i2c_new_device</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">,</span> <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">this_client</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">pr_module</span><span class="p">(</span><span class="n">ERR</span><span class="p">,</span> <span class="s">&quot;%s: i2c_new_device for %s failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">);</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">error_device</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span> <span class="s">&quot;%s: this_client:%p, addr:%#x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">this_client</span><span class="p">,</span> <span class="n">this_client</span><span class="o">-&gt;</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">    <span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nl">error_device:</span>
</span><span class="line">    <span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span><span class="line">  <span class="nl">error_adapter:</span>
</span><span class="line">    <span class="n">exit_wrapper</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">module_driver_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span><span class="s">&quot;Enter in %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span>
</span><span class="line">    <span class="n">exit_wrapper</span><span class="p">();</span>
</span><span class="line">    <span class="n">i2c_unregister_device</span><span class="p">(</span><span class="n">this_client</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">module_init</span><span class="p">(</span><span class="n">module_driver_init</span><span class="p">);</span>
</span><span class="line"><span class="n">module_exit</span><span class="p">(</span><span class="n">module_driver_exit</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">&quot;zhiqiang.xu&lt;zhiqiang.xu@phicomm.com.cn&gt;&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">&quot;i2c device module driver&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL v2&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

以上为部分内容， 其中需要实现板级设备信息 <code>ft5x0x_device_info</code> 和设备初始化函数 <code>ft5x06_touchpad_setup</code> 。其实也就是将板级文件中的相应信息拷贝过来即可。
</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>原驱动文件的修改  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#if defined(MODULE)</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">init_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ft5x0x_ts_init</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">init_wrapper</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">exit_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">ft5x0x_ts_exit</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">exit_wrapper</span><span class="p">);</span>
</span><span class="line"><span class="cp">#else</span>
</span><span class="line"><span class="n">module_init</span><span class="p">(</span><span class="n">ft5x0x_ts_init</span><span class="p">);</span>
</span><span class="line"><span class="n">module_exit</span><span class="p">(</span><span class="n">ft5x0x_ts_exit</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">&quot;&lt;luowj&gt;&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">&quot;FocalTech ft5x0x TouchScreen driver&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL&quot;</span><span class="p">);</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
由于内核模块中只能存在一对 <code>module_init</code> 和 <code>module_exit</code> ，所以在原驱动文件中使用模块宏 <code>MODULE</code> 将这部分排除，同时使用统一的包装函数名称将驱动初始化函数和退出函数包装起来，并导出符号。
</p>
<p>
最后，参照上篇文章内容编写 <code>Makefile</code> 文件，如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># Author: zhiqiang.xu</span>
</span><span class="line"><span class="c"># EMail : xeonxu@gmail.com</span>
</span><span class="line"><span class="c"># Date  : 2012-12-11</span>
</span><span class="line"><span class="nv">CROSS_ARCH</span><span class="o">:=</span><span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;$(ARM_EABI_TOOLCHAIN)/arm-eabi-&quot;</span>
</span><span class="line">KDIR:<span class="o">=</span><span class="k">$(</span>ANDROID_PRODUCT_OUT<span class="k">)</span>/obj/KERNEL_OBJ/
</span><span class="line">PWD:<span class="o">=</span><span class="k">$(</span>shell <span class="nb">pwd</span><span class="k">)</span>
</span><span class="line">
</span><span class="line">test_driver-objs :<span class="o">=</span> module_driver.o ft5x06_ts.o focaltech_ctl.o  ft5x06_ex_fun.o
</span><span class="line">obj-m:<span class="o">=</span> test_driver.o
</span><span class="line">.PHONY: modules package clean
</span><span class="line">all:package
</span><span class="line">modules:
</span><span class="line">    @if <span class="o">[</span> <span class="s2">&quot;$(ANDROID_BUILD_TOP)&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;You have to run \&quot;. build/envsetup.sh\&quot; to init enviroment first. \nAnd then you have to run</span>
</span><span class="line"><span class="s2">\&quot;choosecombo\&quot; to setup the project.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">exit </span>1; <span class="k">fi</span>
</span><span class="line">    @if <span class="o">[</span> ! -d <span class="k">$(</span>KDIR<span class="k">)</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;Build kernel first.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">cd</span> <span class="k">$(</span>ANDROID_BUILD_TOP<span class="k">)</span><span class="o">&amp;&amp;</span>make -j4 bootimage&amp;&amp;cd -; <span class="k">fi</span>
</span><span class="line">    <span class="k">$(</span>MAKE<span class="k">)</span> <span class="k">$(</span>CROSS_ARCH<span class="k">)</span> -C <span class="k">$(</span>KDIR<span class="k">)</span> <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class="line">
</span><span class="line">package:modules
</span><span class="line">    @mkdir -p ./package
</span><span class="line">    @cp *.bat ./package
</span><span class="line">    @cp <span class="k">$(</span>obj-m:.o<span class="o">=</span>.ko<span class="k">)</span> ./package
</span><span class="line">    @tar --transform<span class="o">=</span><span class="s1">&#39;s,package,test_driver,&#39;</span> -jcf test_driver.tar.bz2 ./package/
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers package test_driver.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div>


修改后的驱动文件使用make即可直接编译出模块驱动，同时该驱动中也包含了设备注册的相关处理，所以相对来说更加独立。完整的驱动文件如下：
<a href="https://docs.google.com/open?id=0B5GJiOxO7LkWVDVQMy0tcDBoejg"> <code>test_driver.tar.bz2</code> </a>
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia/'>http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[嵌入式系统内核驱动模块化转换的简单框架]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia/</link>
      <pubDate>2012-12-15T15:57:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
高通Android环境中Linux内核会作为Android的一部分进行编译，直接使用make即可一次性从头编到尾。而有的平台比如Marvell，内核的编译操作相对比较独立，必须使用标准的内核编译命令进行单独编译。一般来说，用高通的这种方式比较傻瓜化，一步到底的感觉；而用Marvell的方式用户干预较多，灵活性也更大。当然这里不是比较他们孰优孰劣，对我来说这两种方式各有千秋。在遇到具体问题时，有时还会觉得独立编译内核的方式比较方便，比如编译内核模块这一点上。
</p>
<p>
编译内核模块之前必须先编译内核，编译内核之前必须先指定内核配置。在独立编译内核情况下，编译一遍内核后，可以直接使用 <code>make module</code> 来编译内核模块，如果修改了相应模块文件，使用相同的命令也能很快的进行增量编译。而在高通环境下，由于内核的编译过程已经被集成到Android的编译中，所以每次编译内核或者内核模块时，都必须通过Android的编译环境进行启用。虽然Android提供诸如 <code>make bootimage</code> 命令，可以只编译bootimage相关内容，但是Android庞大的编译体系在初始化时也会占用很多的时间。前段时间在调试一个独立的内核模块时就一直被这个问题困扰着，每次修改模块代码后都必须通过 <code>make bootimage</code> 来编译。虽然只有一个文件，但是每次编译都花费至少1min30sec，严重影响了开发进度。为此，自己参考内核模块独立编译的Makefile和Android的环境特点写了一个内核模块编译Makefile。

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># Author: zhiqiang.xu</span>
</span><span class="line"><span class="c"># EMail:  xeonxu@gmail.com</span>
</span><span class="line"><span class="nv">CROSS_ARCH</span><span class="o">:=</span><span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;$(ARM_EABI_TOOLCHAIN)/arm-eabi-&quot;</span>
</span><span class="line">KDIR:<span class="o">=</span><span class="k">$(</span>ANDROID_PRODUCT_OUT<span class="k">)</span>/obj/KERNEL_OBJ/
</span><span class="line">PWD:<span class="o">=</span><span class="k">$(</span>shell <span class="nb">pwd</span><span class="k">)</span>
</span><span class="line">
</span><span class="line">obj-m:<span class="o">=</span> my_module.o
</span><span class="line">.PHONY: modules package clean
</span><span class="line">all:package
</span><span class="line">modules:
</span><span class="line">    @if <span class="o">[</span> <span class="s2">&quot;$(ANDROID_BUILD_TOP)_yes&quot;</span> <span class="o">=</span> <span class="s2">&quot;_yes&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;You have to run \&quot;. build/envsetup.sh\&quot; to init enviroment first. \nAnd then you have to run</span>
</span><span class="line"><span class="s2">\&quot;choosecombo\&quot; to setup the project.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">exit </span>1; <span class="k">fi</span>
</span><span class="line">    @if <span class="o">[</span> ! -d <span class="k">$(</span>KDIR<span class="k">)</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;Build kernle first.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">cd</span> <span class="k">$(</span>ANDROID_BUILD_TOP<span class="k">)</span><span class="o">&amp;&amp;</span>make bootimage&amp;&amp;cd -; <span class="k">fi</span>
</span><span class="line">    <span class="k">$(</span>MAKE<span class="k">)</span> <span class="k">$(</span>CROSS_ARCH<span class="k">)</span> -C <span class="k">$(</span>KDIR<span class="k">)</span> <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class="line">
</span><span class="line">package:modules
</span><span class="line">    @mkdir -p ./package
</span><span class="line">    @cp <span class="k">$(</span>obj-m:.o<span class="o">=</span>.ko<span class="k">)</span> ./package
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers package
</span></code></pre></td></tr></table></div></figure></notextile></div>

该Makefile默认会将当前目录下的 <code>my_module.c</code> 文件编译为内核模块。同时，在编译时会强制检查Android的环境是否正确配置，如果没有配置它会进行相应提示后退出编译处理。编译模块时使用的内核配置是编译Android时指定项目所配置的内核配置。如果内核还没有编译，则在编译模块之前会自动编译内核主体。如果一切OK，则每次只会编译修改过的模块文件。编译好后会将模块文件单独拷贝到当前目录下的 <code>package</code> 目录中，方便使用。
</p>
<p>
使用该编译脚本后，模块的编写调试效率高了不少，至少每次编译模块都可以在5sec内搞定了。加上上机实测调试，也能在30sec内完成。生命很可贵，像我一样当个懒人吧。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/'>http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[在高通平台Android环境下编译内核模块]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/</link>
      <pubDate>2012-12-04T22:14:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
之前写过一篇关于如何在Linux内核模块中注册操作I2C设备的<a href="http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/">文章</a> ，那篇文章最后介绍的方法虽然可行，但是会带来一个问题：如果内核中已经包含有某设备的驱动时，那么在模块中注册该设备的I2C client之前必须先将内核中的驱动进行反注册解挂，然后才能再次注册模块中定义的驱动。这样做带来的问题就是，当你将模块从内核中卸载后，系统将无法再次注册内核中原有的驱动，导致相应设备无法使用。今天补充的方法可以在挂载模块时使用模块内的设备驱动，而在卸载后恢复回系统原来的驱动。
</p>
<p>
内容相当简单，上次我们已经可以通过内核提供的接口函数，找到相应I2C总线相应地址I2C设备的I2C client结构指针。而拥有该指针后，其实就可以做很多事了。比如调用 <code>i2c_master_send</code> 接口向该client指向的设备发送I2C命令。这样，如果需要扩展内核中原有的驱动程序，比如向procfs或sysfs中添加相应的用户空间接口等。一般可以在 <code>module_init</code> 中注册sysfs入口的操作函数，然后在操作函数中通过操作该client指针而实现一定的功能。这种方法可以沿用系统内核中原有的设备驱动，可以单纯添加一些系统驱动中没有的功能。
</p>
<p>
除此之外，还有一种替换内核中现有驱动的方法。通过查阅源代码，可以发现内核中还提供一个 <code>device_reprobe(dev)</code> 的API，该函数接受一个device结构体指针，实现重新匹配设备驱动的操作。同时，I2C client结构体中也有相应的device结构体。我们知道Linux内核匹配I2C设备驱动是通过名称来进行匹配的，所以，我们的方法就是用Hack的方式将系统中获取到的I2C Client结构体的名称改为我们需要的名称。一般修改为我们模块中新建的驱动的名称，这样，当调用 <code>device_reprobe</code> 接口后，系统会将原有驱动remove并重新为相应I2C设备适配一个驱动程序。当然，没有出错的话，它会适配到我们修改的名称指向的驱动。如此，我们便可以在内核模块中编写独立的设备驱动程序了。以下是简单示例框架:

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">this_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_driver</span> <span class="n">my_driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">        <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span>
</span><span class="line">        <span class="p">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="p">.</span><span class="n">probe</span> <span class="o">=</span> <span class="n">my_probe</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">remove</span> <span class="o">=</span> <span class="n">my_remove</span><span class="p">,</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">module_driver_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">device</span> <span class="o">*</span><span class="n">ts_dev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">i2c_add_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">ts_dev</span> <span class="o">=</span> <span class="n">bus_find_device_by_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">i2c_bus_type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;1-0011&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">ts_dev</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;Did not match the device name:1-0011!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">this_client</span>  <span class="o">=</span>  <span class="n">container_of</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">i2c_client</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">this_client</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class="line">    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nl">device_error_exit:</span>
</span><span class="line">    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class="line">    <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;ts i2c del driver&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

只需要实现其中的 <code>my_probe</code> , <code>my_remove</code> 等函数即可实现一个完整的驱动。需要注意的是一定要在调用 <code>device_reprobe</code> 接口之前将相应的设备驱动使用 <code>i2c_add_driver</code> 添加到系统中，否则重新适配中会找不到驱动。移除模块时，用同样的方法将I2C client的名称更改为系统中原有驱动的名称，并重新适配驱动，即可实现卸载模块后系统能够使用原有驱动的功能。示例如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">module_driver_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">ORIGIN_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">this_client</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


最后需要注意，文中方法皆为本人翻查文档自己琢磨搞出来的，所以不排除存在隐患的可能，但在自己测试环境下使用中没有发现任何问题。如果有疑问，也希望各位看官能提出自己的看法。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/'>http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[获取并操作内核中已注册的I2C设备]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/</link>
      <pubDate>2012-12-03T00:00:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
这是一篇 <span style="text-decoration:underline;">功夫网</span> 系列文章，本篇作为该系列文章的第一篇，一直拖了好久才真正开始动笔。这篇文章中，我将要介绍的是如何在Raspberry Pi上搭建基于SSH连接的Socks代理服务器。关于我为什么使用Raspberry Pi，是因为我觉得这玩意小巧，携带方便，而且买了它不用也是闲着。至于为什么搭建Socks服务器，知者自知，不知者我也不想过多解释。总之这是该系列文章第一篇，所以内容上相对来说都是比较简单和基础的，大家往下看就是了。另外需要说明的是，我所使用的Raspberry Pi是B型板，操作系统为Arm版的Slackware系统ArmedSlack。如果使用的是其它发行版，可能需要相应修改以下的命令。
</p>
<p>
本片文章主要实现三个目的：
</p>
<ol>
<li>实现ssh免密码自动连接远程服务器，并建立Socks代理
</li>
<li>开机时自动通过ssh与远程服务器建立安全通道
</li>
<li>设置守护进程，使得ssh连接异常断开后可以自动进行重新连接
</li>
</ol>

<p>
操作之前，首先使用终端软件通过ssh方式连接到Raspberry Pi上。
</p>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 ssh免密码自动连接远程服务器</a>
<ul>
<li><a href="#sec-1-1">1.1 生成密钥</a></li>
<li><a href="#sec-1-2">1.2 上传密钥</a></li>
<li><a href="#sec-1-3">1.3 建立socks服务</a></li>
</ul>
</li>
<li><a href="#sec-2">2 开机时自动建立连接</a></li>
<li><a href="#sec-3">3 设置守护进程防止断线</a>
<ul>
<li><a href="#sec-3-1">3.1 安装autossh</a></li>
<li><a href="#sec-3-2">3.2 初始化脚本</a></li>
<li><a href="#sec-3-3">3.3 守护进程</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">ssh免密码自动连接远程服务器</h2>
<div class="outline-text-2" id="text-1">

<p>为了ssh可以在无人干预的情况下自动连接远程服务器，普遍的做法是使用公钥认证方式进行连接。同样，我们也使用公钥认证的方法进行自动连接。为了实现公钥认证连接，首先需要生成密钥对。
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">生成密钥</h3>
<div class="outline-text-3" id="text-1-1">

<p>生成密钥时可以使用以下 <code>ssh-keygen</code> 命令进行。

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh-keygen -t rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>

命令执行中会出现一些提示，大致是一些关于密钥存放路径以及密钥主密码设定之类的。基本上一路回车就可以了，同时注意不要去设置密钥主密码，否则每次访问密钥时都会提示输入，这样就达不到自动认证连接的目的了。由于 <code>ssh-keygen</code> 包含在openssh软件包中，所以如果linux中曾经安装过openssh的话，应该直接就能使用。反之如果提示找不到该命令，可以通过类似下面的命令来安装slackware的n包中的openssh来获取。

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">installpkg /slackware/n/openssh-6.0p1-arm-1.tgz
</span></code></pre></td></tr></table></div></figure></notextile></div>

生成好的密钥对默认会保存在 <code>~/.ssh/</code> 目录下，如果生成的时rsa密钥，则密钥文件分别为 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 。其中没有 <code>.pub</code> 扩展名的文件为私钥，另外一个为公钥。现在我们需要将我们刚才生成的公钥文件上传到我们的远程服务器的相应目录中。
</p>
</div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">上传密钥</h3>
<div class="outline-text-3" id="text-1-2">

<p>上传密钥可以使用通用的scp命令，也可以使用ssh工具中的 <code>ssh-copy-id</code> 命令。 <code>ssh-copy-id</code> 命令比较简单，指定密钥文件和远程机即可，该命令会自动添加公钥内容到远程机的授权文件中。但要注意该命令不会改变远程机相应文件的属性，所以如果是第一次操作的话，建议使用scp命令比较靠谱。下面我们使用scp命令

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">scp ~/.ssh/id_rsa.pub user@server:/home/user <span class="c">#user和server需要根据实际内容更改，可能需要输入远程机密码</span>
</span><span class="line">ssh user@server <span class="c">#连接至远程服务器，可能需要输入远程机密码。user和server需要根据实际内容更改</span>
</span><span class="line"><span class="nb">cd</span>
</span><span class="line">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys <span class="c">#将刚拷贝过来的公钥文件内容添加到.ssh/authorized_keys文件中</span>
</span><span class="line">chmod 600 .ssh/authorized_keys <span class="c">#必须确保.ssh/authorized_keys文件的属性为600，及他人不可读写，否则公钥认证将会失败</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

OK，大功告成。退出远程机，使用 <code>ssh user@server</code> 命令重新连接远程机，此时会提示加密指纹认证的提示，回答 <code>yes</code> 即可。此后再次连接远程机时就会直接登录进入，而不会出现任何提示了。
</p>
</div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">建立socks服务</h3>
<div class="outline-text-3" id="text-1-3">

<p>ssh软件自带功能可以生成socks代理服务器，并通过ssh连接的远程机进行网络访问。使用相当简单，只需要在执行ssh命令连接远程机时使用 <code>-D</code> 参数指定相应端口即可，如

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh -D 9090 user@server
</span></code></pre></td></tr></table></div></figure></notextile></div>

以上例子将ssh连接生成端口号为9090的socks代理。该代理可以通过Firefox等浏览器直接使用，每次需要使用socks代理时只需执行以上的命令即可。但是现实情况是，我们希望RaspberryPi在每次开机后即可自动运行ssh连接远程机并建立相应的代理端口。
</p>
</div>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">开机时自动建立连接</h2>
<div class="outline-text-2" id="text-2">

<p>开机后立即进行ssh连接有很多实现方法，最省事的办法就是修改 <code>rc.local</code> 或者 <code>inittab</code> 文件来实现。方法非常简单，添加相应语句到 <code>rc.local</code> 中即可。以下，我通过新建一个连接脚本，然后在 <code>rc.local</code> 文件中进行调用来实现开机自动连接ssh：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir -p ~/bin
</span><span class="line"><span class="nb">echo </span>ssh -D 9090 user@server &gt;&gt; ~/bin/socks_proxy.sh
</span><span class="line">chmod a+x ~/bin/socks_proxy.sh
</span><span class="line"><span class="nb">echo</span> ~/bin/socks_proxy.sh &gt;&gt; /etc/rc.d/rc.local
</span></code></pre></td></tr></table></div></figure></notextile></div>

如果想做的更正式一点，可以参考 <code>/etc/rc.d/</code> 目录下的脚本文件，新建一个rc风格的服务脚本文件，然后修改 <code>rc.M</code> 文件，添加相应的服务启动代码即可。不过接下来马上要做防止断线的处理，需要用到其它工具，所以这一步暂时跳过也没关系。
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">设置守护进程防止断线</h2>
<div class="outline-text-2" id="text-3">

<p>目前为止我们设置了ssh的免密码登录以及开机自动登录，要求不高的话也差不多可以凑合使用。但是网络这东西有很多不稳定因素，如果碰到ssh服务器出状况或者线路不稳定时，ssh的连接就可能会被中断，这时必须自己手动再连接一次才能继续使用，这显然不是我们希望的。为了防止这类情况的发生，我们需要借助autossh软件来实现断线自动连接。autossh的功能就像它的名称一样直接简单，它可以监测ssh的连接状态，并在有需要的时候自动重新连接ssh。接下来，我来讲解如何安装配置autossh。
</p>
</div>

<div id="outline-container-3-1" class="outline-3">
<h3 id="sec-3-1">安装autossh</h3>
<div class="outline-text-3" id="text-3-1">

<p>由于slackware官方没有提供autossh的安装包，所以需要自己从源码编译。首先从autossh<a href="http://www.harding.motd.ca/autossh/">官网</a> 下载最新的源代码包 <code>autossh-1.4c.tgz</code> ，然后执行以下命令进行编译安装：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gunzip -c autossh-1.4c.tgz | tar xvf -
</span><span class="line"><span class="nb">cd </span>autossh-1.4c
</span><span class="line">./configure --prefix<span class="o">=</span>/usr --sysconfdir<span class="o">=</span>/etc
</span><span class="line">make
</span><span class="line">sudo make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

整个过程没有什么难度，标准的从源代码安装软件的方法，除了RPi的编译速度有点慢以外。为了方便，我这里也用slackbuild编译了一份适用于RPi使用的二进制软件包： <a href="./downloads/autossh-1.4c-arm-1_SBo.tgz">autossh-1.4c-arm.tgz</a> ,只需要执行 <code>sudo installpkg autossh-1.4c-arm-1_SBo.tgz</code> 即可。
</p></div>

</div>

<div id="outline-container-3-2" class="outline-3">
<h3 id="sec-3-2">初始化脚本</h3>
<div class="outline-text-3" id="text-3-2">

<p>autossh安装好后不需要特别的设置，只需要使用它改写之前的ssh连接脚本即可。修改 <code>~/bin/socks_proxy.sh</code> 如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># autossh:  Connect remote with ssh automatically.</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># processname: autossh</span>
</span><span class="line"><span class="c"># pidfile: /var/run/autossh.pid</span>
</span><span class="line"><span class="c">#                       --Zhiqiang Xu &lt;xeonxu@gmail.com&gt;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">AUTOSSH_PIDFILE</span><span class="o">=</span><span class="s2">&quot;/var/run/autossh.pid&quot;</span>
</span><span class="line"><span class="nv">PIDFILE</span><span class="o">=</span><span class="nv">$AUTOSSH_PIDFILE</span>
</span><span class="line"><span class="nv">SSH_SERVER</span><span class="o">=</span>user@server
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -e <span class="nv">$AUTOSSH_PIDFILE</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">        </span><span class="nb">exit </span>0
</span><span class="line"><span class="k">elif</span> <span class="o">[</span> -x /usr/bin/autossh -a -x /usr/bin/ssh <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;Starting autossh...&quot;</span>
</span><span class="line">        autossh -M 40000 <span class="nv">$SSH_SERVER</span> -f -q -C -g -N -D 9090
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

如果之前还没有修改过 <code>/etc/rc.d/rc.local</code> 文件，记得在该文件最后加上一句 <code>~/bin/socks_proxy.sh</code> 。如此便可在每次开机后自动使用autossh来进行ssh连接，同时再也不用担心该ssh会发生断线问题了。
</p>
</div>

</div>

<div id="outline-container-3-3" class="outline-3">
<h3 id="sec-3-3">守护进程</h3>
<div class="outline-text-3" id="text-3-3">

<p>说实在，通过之前的那些操作基本可以保证我们拥有一个可以自动监护连接，并能稳定提供socks代理的功能了。以下操作可以不必进行，不过如果你纠结于更稳定的保全的连接，可以继续看下去。这一步操作主要是将autossh加入守护进程，从而防止autossh的异常退出（还记得autossh是干什么的来着？如果autossh异常退出会发生什么事？Yes, 这就是我们要防止的）。
</p>
<p>
将autossh脚本以守护进程方式运行的方法很多，最简单的就是修改 <code>inittab</code> 文件。如果之前修改过 <code>/etc/rc.local</code> 文件，记得将其中关于运行autossh的语句删掉或者注释掉，否则和守护进程的设置会重复。
打开 <code>inittab</code> 文件，参考其它项目的写法添加一行就搞定，如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">AUTOSSH:12345:respawn:sh /home/user/bin/socks_proxy.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

另外，使用守护进程方式运行autossh时要注意一点，运行的脚本必须不是daemon方式的。所以还需要将前面的连接语句：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">autossh -M 40000 <span class="nv">$SSH_SERVER</span> -f -q -C -g -N -D 9090
</span></code></pre></td></tr></table></div></figure></notextile></div>

修改为：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">autossh -M 40000 <span class="nv">$SSH_SERVER</span> -q -C -g -N -D 9090
</span></code></pre></td></tr></table></div></figure></notextile></div>

也即是去掉其中的 <code>-f</code> 选项，否则，init会不断尝试重新运行autossh命令，导致服务不稳定。
</p>
<p>
守护进程还可以通过第三方工具来配置，比如daemontools，monit等等之类，功能相对来说更强大一点，但是所提供的基本功能都是一样的，所以这里也就不再详细介绍了，有兴趣的自己看文档编译配置一份就能用。
</p>
<p>
这个就是我配了壳后的Raspberry Pi， 运行起来还是很稳定的:
</p>

<div class="figure">
<p><img src="http://blog.xeonxu.info/./images/blog/RPi_shell.jpg" alt="./images/blog/RPi_shell.jpg" /></p>
<p>配了壳的RPi</p>
</div>
</div>
</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li/'>http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[Raspberry Pi上搭建自动ssh代理]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li/</link>
      <pubDate>2012-12-02T00:00:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
近期公司项目较为空闲，抽空做了一些学习性质的研发内容，其中涉及到在Linux内核模块中使用I2C对外部器件进行控制的操作。虽然在Linux中操作使用I2C设备并不复杂，但本人接触Linux内核驱动开发时间并不算长，此次学习中也算较为系统的了解了Linux中对I2C设备的操控方式，谨在此做下记录。
</p>
<p>
通过Linux内核文档中关于操作I2C设备的文章后不难看出Linux中注册使用I2C设备一般通过四种方法<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>：
</p>
<ol>
<li>通过总线号声明设备
</li>
<li>立即探测设备
</li>
<li>通过Probe探测相应设备
</li>
<li>在用户空间立即探测
</li>
</ol>

<p>
简单来说，第一种方式一般应用在嵌入式设备中。因为对于嵌入式设备来说，外围器件基本都是固定的，只需提供有限几款器件的支持即可。使用这种方式的时候，需要在板级配置文件中定义并设置 <code>i2c_board_info</code> 这个结构体的内容。其中需要配置设备名称和设备地址，此外设备中断和私有数据结构也可以选择设置。然后使用 <code>i2c_register_board_info</code> 这个接口对设置的设备进行注册使用。需要注意的是这种方法注册的设备是在注册I2C总线驱动时进行驱动适配的。
</p>
<p>
第二种方法可以通过给定的I2C适配器以及相应的I2C板级结构体，自行通过 <code>i2c_new_device</code> 接口进行添加注册所需的设备。这种方法灵活性要较第一种方法大，可以很方便的在模块中使用。
</p>
<p>
第三种方法是 <code>2.6</code> 内核之前的做法，使用 <code>detect</code> 方法去探测总线上的设备驱动。因为探测机制的原因，会导致一些副作用的发生，所以不建议使用，除非真的没有别的办法。
</p>
<p>
第四种方法是在Linux的控制台上，在用户空间通过sysfs，使用 <code>/sys/bus/i2c/devices/i2c-3/new_device</code> 节点进行设备的添加注册。
</p>
<p>
从上面可以看出，如果需要在Linux内核中以模块的方式对I2C设备进行驱动控制的话，第二种方法是比较推荐的。通过测试，在module的init中使用

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">i2c_adapter</span> <span class="o">*</span><span class="n">i2c_adap</span><span class="p">;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">i2c_client</span><span class="p">;</span>
</span><span class="line"><span class="n">i2c_adap</span> <span class="o">=</span> <span class="n">i2c_get_adapter</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="n">i2c_client</span> <span class="o">=</span> <span class="n">i2c_new_device</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i2c_device</span><span class="p">);</span>
</span><span class="line"><span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

即可成功注册I2C设备。其中:

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_board_info</span> <span class="n">ft5306_i2c_device</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">I2C_BOARD_INFO</span><span class="p">(</span><span class="s">&quot;test_i2c&quot;</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">),</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


以上，对于如何在模块中注册使用I2C设备简单做了描述。那么如何在另外的模块中对已经注册的I2C设备进行反注册呢？由于内核中操作I2C设备都是通过 <code>i2c_client</code> 结构进行，所以问题可以抽象为如何在内核中获取指定设备的 <code>i2c_client</code> 结构指针。通过查阅内核API，也找到了一个方法可以达到这样的目的，如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">i2c_client</span><span class="p">;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">device</span> <span class="o">*</span><span class="n">i2c_dev</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">i2c_dev</span> <span class="o">=</span> <span class="n">bus_find_device_by_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">i2c_bus_type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;1-0011&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">i2c_dev</span><span class="p">)</span>
</span><span class="line">    <span class="n">i2c_client</span>  <span class="o">=</span>  <span class="n">container_of</span><span class="p">(</span><span class="n">i2c_dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">i2c_client</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">i2c_client</span><span class="p">)</span>
</span><span class="line">    <span class="n">i2c_unregister_device</span><span class="p">(</span><span class="n">i2c_client</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

该反注册例子的内容就是对前面注册的 <code>0x11</code> 地址的设备进行反注册。注意 <code>bus_find_device_by_name</code> 函数中第三项参数，该参数是需要查找的设备在总线上注册的名称。&#8221;1&#8221;代表着1号适配器，&#8221;0011&#8221;是16位的I2C地址。如此便可方便的在内核模块中对I2C设备进行挂载和解挂了。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 参考Linux内核目录下的Documentation/i2c/instantiating-devices
</p>



</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/'>http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[在Linux内核模块中操作I2C设备]]></title>
      <link>http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/</link>
      <pubDate>2012-11-25T00:02:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
算下来两周没有在这里写博客了，其中一大原因在于天气渐凉，不高兴一人在电脑旁受冻-_-!!!  咳咳咳，其实天气有一定影响，不过更主要的问题在于最近遇到的事情繁杂，虽然没有什么难不可为，但自己也确实花了些心思。
</p>
<p>
首先是工作上的两个任务。近期项目正好有点空挡，于是自己决定将高通平台的电量管理从MP端移植至AP端内核里，同时添加一些判断逻辑，以使统计的电量结果不至于像原版那样生硬怪异。只可惜高通平台好多处理需要依赖远程调用，而自己手里却没有一份关于远程调用的官方文档。最后通过高通的support搞定了内核中对PMIC的一些操作，但又发现无法正常取得相应中断状态。总之，这个看起来简单地任务搞了2周还没有实质性突破。另外一个任务是协助同事完成一个用户层接口，方便在用户层升级器件的firmware。这个任务进展倒是蛮快，3个小时就写好框架和功能调试。可惜最后发现buffer有4k限制，现在还在找对策方法，这两天就在考虑这个问题。
</p>
<p>
其次，周末在家各种收拾打扫，洗衣做饭。连续两周了，除了干家务和觅食以外，其它什么都没干。想来自己效率低是一个问题，着实应该改进一下。哦，今天物业还过来处理家里渗水的墙面，也算拖了大半年之久的工程开始了第一步。
</p>
<p>
再者，为了维护简历，将简历移植到moderncv上并使用git来管理。后来又想更统一使用orgmode来写简历，但是苦于找不到好的解决方案，现在琢磨着是不是要自己搞一个。
</p>
<p>
最后，算是小成就。前几日知道了支持kindle3的kindlepdfviewer这个越狱软件，抽空搞了一下，发现对扫描版pdf的支持好到不可思议。于是kindle上瞬间多了很多扫描版的图书。首当其冲就是一直想看但一直没有看的《emacs lisp编程入门》和《GEB》。前者已经看了一半以上，作为emacs爱好者，到现在才较为系统的了解学习lisp是有点晚，不过至少我开始入门了:)
</p>
<p>
今日纯属碎碎念，希望下周工作上任务都能快速完成，个人的几个安排都能顺利进行。另，下篇文章没差错的话应该是功夫网专题，否则又要被人数落跳票了。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao/'>http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[近期的烦恼]]></title>
      <link>http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao/</link>
      <pubDate>2012-11-18T23:01:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
之前一直使用GNU Screen作为我的终端管理软件，但是发现它和我使用的Emacs编辑器不兼容，其表现是画面会被无规律的撕裂，经常造成无法正常显示和编辑文件。虽然也尝试过不少配置方法，但是都没有效果。这迫使我去寻找GNU Screen的替代品，直到后来遇到<a href="http://tmux.sourceforge.net">tmux</a> ，才将我从混乱的画面中拯救出来。tmux和Emacs的兼容非常好，没有任何问题，这点让我非常满意。同时，tmux拥有强大的自定义能力，只需简单的配置，就可以使工作环境舒适度显著提高。
</p>
<p>
首先，先简单了解一下tmux。tmux顾名思义，取terminal multiplexer之意，及终端复用器，其源代码基于BSD协议进行开源和分发。使用上来说，tmux和GNU Screen大同小异，都是使用命令引导键来进行操作，不过tmux的默认引导键由Screen的 <code>C-a</code> 变更为了 <code>C-b</code> 。另外，常用命令也和Gnu Screen一样可以通过 <code>引导键 ?</code> 来查看。操作方法的近似，促使我下决心从GNU Screen转换到tmux下。考虑到tmux作为GNU Screen的改进实现，功能要高级许多，仅仅用来替代GNU Screen有点大材小用的感觉。所以为了更好的学习tmux，我从<a href="http://pragprog.com/book/bhtmux/tmux">The Pragmatic Bookshelf</a>购买了名叫 <b>tmux: Productive Mouse-Free Development</b> 的书，并花了3天时间将这本书读完，感到受益匪浅。之后，按照书中的建议配置了工作环境中的tmux，感觉非常好，极大提升了终端工作的效率。下面来看看我的配置：
</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>.tmux.conf配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 配置使用和GNU Screen相同的C-a作为命令引导键</span>
</span><span class="line"><span class="nb">set</span> -g prefix C-a
</span><span class="line"><span class="c"># 设置终端类型为256色</span>
</span><span class="line"><span class="nb">set</span> -g default-terminal <span class="s2">&quot;screen-256color&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置状态栏前景及背景色</span>
</span><span class="line"><span class="nb">set</span> -g status-bg colour23
</span><span class="line"><span class="nb">set</span> -g status-fg colour238
</span><span class="line">
</span><span class="line"><span class="c"># 设置窗口标签的前景及背景色</span>
</span><span class="line">setw -g window-status-fg colour232
</span><span class="line">setw -g window-status-bg default
</span><span class="line">setw -g window-status-attr dim
</span><span class="line">
</span><span class="line"><span class="c"># 设置当前窗口标签的前景及背景色</span>
</span><span class="line">setw -g window-status-current-fg colour88
</span><span class="line">setw -g window-status-current-bg colour130
</span><span class="line">setw -g window-status-current-attr bright
</span><span class="line">
</span><span class="line"><span class="c"># 设置窗口分割的边框颜色</span>
</span><span class="line"><span class="nb">set</span> -g pane-border-fg colour189
</span><span class="line"><span class="nb">set</span> -g pane-border-bg black
</span><span class="line">
</span><span class="line"><span class="c"># 设置当前窗口分割的边框颜色</span>
</span><span class="line"><span class="nb">set</span> -g pane-active-border-fg white
</span><span class="line"><span class="nb">set</span> -g pane-active-border-bg colour208
</span><span class="line">
</span><span class="line"><span class="c"># 设置提示信息的前景及背景色</span>
</span><span class="line"><span class="nb">set</span> -g message-fg colour232
</span><span class="line"><span class="nb">set</span> -g message-bg colour23
</span><span class="line"><span class="nb">set</span> -g message-attr bright
</span><span class="line">
</span><span class="line"><span class="c"># 设置状态栏左部宽度</span>
</span><span class="line"><span class="nb">set</span> -g status-left-length 40
</span><span class="line"><span class="c"># 设置状态栏显示内容和内容颜色。这里配置从左边开始显示，使用绿色显示session名称，黄色显示窗口号，蓝色显示窗口分割号</span>
</span><span class="line"><span class="nb">set</span> -g status-left <span class="s2">&quot;#[fg=colour52]#S #[fg=yellow]#I #[fg=cyan]#P&quot;</span>
</span><span class="line"><span class="c"># 设置状态栏右部宽度</span>
</span><span class="line"><span class="nb">set</span> -g status-right-length 80
</span><span class="line"><span class="c"># 设置状态栏右边内容，这里设置为时间信息</span>
</span><span class="line"><span class="nb">set</span> -g status-right <span class="s2">&quot;#[fg=colour106]#(~/bin/system_info.sh) #[fg=colour208]|%d %b %R&quot;</span>
</span><span class="line"><span class="c"># 窗口信息居中显示</span>
</span><span class="line"><span class="nb">set</span> -g status-justify centre
</span><span class="line">
</span><span class="line"><span class="c"># 监视窗口信息，如有内容变动，进行提示</span>
</span><span class="line">setw -g monitor-activity on
</span><span class="line"><span class="nb">set</span> -g visual-activity on
</span><span class="line"><span class="nb">set</span> -g status-utf8 on
</span><span class="line">
</span><span class="line"><span class="c"># 窗口号和窗口分割号都以1开始（默认从0开始）</span>
</span><span class="line"><span class="nb">set</span> -g base-index 1
</span><span class="line">setw -g pane-base-index 1
</span><span class="line">
</span><span class="line"><span class="c"># 支持鼠标选择窗口，调节窗口大小</span>
</span><span class="line">setw -g mode-mouse on
</span><span class="line"><span class="nb">set</span> -g mouse-select-pane on
</span><span class="line"><span class="nb">set</span> -g mouse-resize-pane on
</span><span class="line"><span class="nb">set</span> -g mouse-select-window on
</span><span class="line"><span class="nb">set</span> -s escape-time 1
</span><span class="line">
</span><span class="line"><span class="c"># 设置C-a a为发送C-a键</span>
</span><span class="line"><span class="nb">bind </span>a send-prefix
</span><span class="line"><span class="c"># 加载tmux配置文件的快捷键</span>
</span><span class="line"><span class="nb">bind </span>r <span class="nb">source</span>-file ~/.tmux.conf<span class="se">\;</span> display <span class="s2">&quot;Reloaded!&quot;</span>
</span><span class="line"><span class="c"># 快捷键查看man</span>
</span><span class="line"><span class="nb">bind</span> / <span class="nb">command</span>-prompt <span class="s2">&quot;split-window &#39;exec man %%&#39;&quot;</span>
</span><span class="line">unbind <span class="s2">&quot;%&quot;</span>
</span><span class="line">unbind <span class="s2">&quot;\&quot;&quot;</span>
</span><span class="line"><span class="c"># 修改默认的窗口分割快捷键，使用更直观的符号</span>
</span><span class="line"><span class="nb">bind</span> | split-window -h
</span><span class="line"><span class="nb">bind</span> - split-window -v
</span><span class="line"><span class="c"># 选择窗口功能修改为和Screen一样的C-a &quot;</span>
</span><span class="line"><span class="nb">bind</span> <span class="s2">&quot;\&quot;&quot;</span> choose-window
</span><span class="line">
</span><span class="line"><span class="c"># 选择窗口分割快捷键</span>
</span><span class="line"><span class="nb">bind </span>h <span class="k">select</span>-pane -L
</span><span class="line"><span class="nb">bind </span>j <span class="k">select</span>-pane -D
</span><span class="line"><span class="nb">bind </span>k <span class="k">select</span>-pane -U
</span><span class="line"><span class="nb">bind </span>l <span class="k">select</span>-pane -R
</span><span class="line"><span class="c"># 选择窗口快捷键</span>
</span><span class="line"><span class="nb">bind</span> -r C-h <span class="k">select</span>-window -t :-
</span><span class="line"><span class="nb">bind</span> -r C-l <span class="k">select</span>-window -t :+
</span><span class="line"><span class="c"># 调节窗口大小快捷键</span>
</span><span class="line"><span class="nb">bind</span> -r H resize-pane -L 5
</span><span class="line"><span class="nb">bind</span> -r J resize-pane -D 5
</span><span class="line"><span class="nb">bind</span> -r K resize-pane -U 5
</span><span class="line"><span class="nb">bind</span> -r L resize-pane -R 5
</span><span class="line">
</span><span class="line"><span class="c"># 快捷调整窗口分割到全屏</span>
</span><span class="line">unbind Up
</span><span class="line"><span class="nb">bind </span>Up new-window -d -n tmp <span class="se">\;</span> swap-pane -s tmp.1 <span class="se">\;</span> <span class="k">select</span>-window -t tmp
</span><span class="line">unbind Down
</span><span class="line"><span class="nb">bind </span>Down last-window <span class="se">\;</span> swap-pane -s tmp.1 <span class="se">\;</span> <span class="nb">kill</span>-window -t tmp
</span><span class="line">
</span><span class="line"><span class="c"># 快捷记录窗口内的内容到文件中</span>
</span><span class="line"><span class="nb">bind </span>P pipe-pane -o <span class="s2">&quot;cat &gt;&gt;~/#W.log&quot;</span> <span class="se">\;</span> display <span class="s2">&quot;Toggled logging to ~/#W.log&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
以上配置只需要复制保存到 <code>~/.tmux.conf</code> 文件中，下次执行tmux时就生效了。
</p>
<p>
当然，tmux的高级不止在于配置功能的强大，它还支持在命令行中对指定session进行设置。利用这个特性，便可以将繁琐的工作环境初始化用脚本完成了。比如我写了如下脚本对我的工作电脑进行初始化：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>init_tmux.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#! /bin/bash</span>
</span><span class="line"><span class="nb">export </span><span class="nv">AP_7x27_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM7x27A-ICS-AP&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">MP_7x27_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM7x27A-ICS-MP&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">AP_8x25_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM8x25-ICS-AP&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">MP_8x25_PROJECT</span><span class="o">=</span><span class="s2">&quot;~/Developer/MSM8x25-ICS-MP&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$TMUX&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">    </span>tmux has-session -t development7x27
</span><span class="line">    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class="line">        <span class="c"># init 7x27 AP</span>
</span><span class="line">        tmux new-session -s development7x27 -n AP_7x27 -d
</span><span class="line">        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;&amp;. ./build/envsetup.sh&amp;&amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class="line">        tmux split-window -h -p 40 -t development7x27:1
</span><span class="line">        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;&amp;. ./build/envsetup.sh&amp;&amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class="line">        tmux split-window -v -t development7x27:1.2
</span><span class="line">        tmux send-keys -t development7x27 <span class="s2">&quot;cd $AP_7x27_PROJECT&amp;&amp;. ./build/envsetup.sh&amp;&amp;choosecombo 1 13 1&quot;</span> C-m
</span><span class="line">
</span><span class="line">        <span class="c"># init 7x27 MP</span>
</span><span class="line">        tmux new-window -n MP_7x27 -t development7x27
</span><span class="line">
</span><span class="line">        tmux send-keys -t development7x27:2 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class="line">        tmux split-window -h -p 40 -t development7x27:2
</span><span class="line">        tmux send-keys -t development7x27:2 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class="line">        tmux split-window -v -t development7x27:2.2
</span><span class="line">        tmux send-keys -t development7x27 <span class="s2">&quot;cd $MP_7x27_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class="line">
</span><span class="line">        tmux <span class="k">select</span>-window -t development7x27:1
</span><span class="line">        tmux <span class="k">select</span>-pane -t development7x27:1 -L
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">
</span><span class="line"><span class="k">        </span>tmux send-keys -t development7x27:1.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class="line">        tmux send-keys -t development7x27:2.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class="line">
</span><span class="line">    tmux has-session -t development8x25
</span><span class="line">    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class="line">        <span class="c"># init 8x25 AP</span>
</span><span class="line">        tmux new-session -s development8x25 -n AP_8x25 -d
</span><span class="line">        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;&amp;. ./build/envsetup.sh&amp;&amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class="line">        tmux split-window -h -p 40 -t development8x25:1
</span><span class="line">        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;&amp;. ./build/envsetup.sh&amp;&amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class="line">        tmux send-keys -t development8x25 <span class="s1">&#39;top&#39;</span> C-m
</span><span class="line">        tmux split-window -v -t development8x25:1.2
</span><span class="line">        tmux send-keys -t development8x25 <span class="s2">&quot;cd $AP_8x25_PROJECT&amp;&amp;. ./build/envsetup.sh&amp;&amp;choosecombo 1 17 3&quot;</span> C-m
</span><span class="line">
</span><span class="line">        <span class="c"># init 8x25 MP</span>
</span><span class="line">        tmux new-window -n MP_8x25 -t development8x25
</span><span class="line">
</span><span class="line">        tmux send-keys -t development8x25:2 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class="line">        tmux split-window -h -p 40 -t development8x25:2
</span><span class="line">        tmux send-keys -t development8x25:2 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class="line">        tmux split-window -v -t development8x25:2.2
</span><span class="line">        tmux send-keys -t development8x25 <span class="s2">&quot;cd $MP_8x25_PROJECT/modem_proc/build/ms&quot;</span> C-m
</span><span class="line">
</span><span class="line">        tmux <span class="k">select</span>-window -t development8x25:1
</span><span class="line">        tmux <span class="k">select</span>-pane -t development8x25:1 -L
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">
</span><span class="line"><span class="k">        </span>tmux send-keys -t development8x25:1.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class="line">        tmux send-keys -t development8x25:2.3 <span class="s2">&quot;export DISPLAY=$DISPLAY&quot;</span> C-m
</span><span class="line">
</span><span class="line">    tmux attach -t development7x27
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

脚本主体思想为每次运行时判断相应的tmux session是否存在，如果存在则设置Xwindow的变量后attach；如果不存在相应session，则新建相应session并初始化session中相应窗口和窗口分割，同时在每个窗口分割中运行每次都要运行的环境初始化命令。最后设置Xwindow环境变量后attach。我的脚本中分别初始化了高通7x27 AP和MP的编译环境以及8x25 AP和MP的编译环境。
</p>
<p>
使用时，将以上内容存为文件，并在 <code>~/.bashrc</code> 中调用就可以了。这样，不论是ssh到该主机还是新开一个终端窗口，都会直接进入指定的tmux session中，继续之前的工作。加上Xwindow的设置，tmux中也可以直接运行X程序。工作中，我就是在windows上使用putty+Xming来运行使用X程序的，非常方便高效。简单的配置让工作环境大幅改进，让我觉得之前6刀买到那本书真是超值了。
</p>
<p>
说了这么多好，tmux其实也是有缺点的。最明显的一个缺点就是不支持windows，而GNU Screen却支持是windows的，这不免让人有点遗憾。所以如果有在Windows下使用类似软件的话（真的有需要吗？），只能考虑其它如GNU Screen之类的软件了。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan/'>http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[使用tmux改进终端体验]]></title>
      <link>http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan/</link>
      <pubDate>2012-11-04T23:59:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/11/04/shi-yong-tmuxgai-jin-zhong-duan-ti-yan</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
近日看完两本关于Slackware的入门书，一本是大名鼎鼎的《Slackware Linux Essentials》，另一本是《Slackware Linux Basics》。之所以想起来看Slackware相关的书，是因为人生接触的第一个Linux发行版就是Slackware。那时候家里没有网络，从报纸上知道了开源软件和Linux的存在。后来在书店里看到了电子工业出版社出版的《Linux大全》，那是一本很厚的书，书的背面印着获取书中描述的Linux版本的方法，我就是从那里获取到的人生第一个Linux发行版。原版书提供三个Linux发行版可供选择，而电子工业出版社只提供其中的两个发行版，一个是人们熟知的RedHat，而另一个就是Slackware。当时本人处于对计算机技术极度痴迷的状态，总是希望能有一些挑战，所以选择邮购了其中安装及配置较为复杂的一个发行版，也就是Slackware。当然，最后从拿到Slackware光盘，到安装并简单配置到能使用确实花了不少时间，也因为如此，我对Slackware的印象才如此深刻。之后在大学的时候自己买过RedHat/Fedora并用了那么几次，工作了后接触更多的是Ubuntu，但是随着Linux使用经验的逐渐增长以及知识的不断积累，越发觉得之后使用的那些Linux发行版似乎都缺少了一点什么，这种感觉说不上来，但是这种隐隐约约的感觉将我的目光再次引向Slackware发行版。
</p>
<p>
碰巧，前段时间从网上买过一台Raspberry Pi<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，而且正好，又有爱好者将ArmedSlack<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>移植到了Raspberry Pi上，理所当然，我的Raspberry Pi便跑上了Slackware。可惜，虽说最早接触的是Slackware，但是自己对Slackware的了解并不系统，所以下定决心说一定要看完至少一本关于Slackware的著作。于是，才从网上找到上述的两本书。还好，从目前情况来看，这个任务算是完成了，而且超标了。
</p>
<p>
现在说说才看完的这两本书，作为Slackware Linux的官方教材《Slackware Linux Essentials》<sup><a class="footref" name="fnr.3" href="#fn.3">3</a></sup>更新并不频繁，目前作者正在编写第三版，但是该版尚处于Beta状态<sup><a class="footref" name="fnr.4" href="#fn.4">4</a></sup>，所以市面上能买到的只有第二版。鉴于前者更新不够及时，导致了《Slackware Linux Basics》<sup><a class="footref" name="fnr.5" href="#fn.5">5</a></sup>的出现。从名字上看，前者似乎比后者更加全面，但从本人阅读下来的感觉来说，Basics的内容明显要比Essentials的深入一些；从页数上来说，Basics的相比也要多一些，但是这并不是说两本书哪本更好。单从入门角度来讲，我觉得Essentials的内容更适合入门学习；Basics的内容作为Essentials的补充，适合进阶学习。总体来讲，两本书可以互相参考学习。就本人经验，看完其中一本后，另外一本可以很快看完，因为只需要看差异的部分就可以了。虽然这两本书都以Slackware为切入点，但是其内容对于其它发行版也是部分适用的。所以，不论对于想学Slackware还是想学Linux的同学，我是极力推荐去看这两本书的，比市面上买的那些翻译山寨教学书好过不少。至于需要书的同学，可以去脚注找找，两本书官方都提供常用电子档下载，而我是用软件将HTML转成了kindle格式在kindle上读完这两本书的。
</p>
<p>
另外，做个预告，我打算将Raspberry Pi打造为基于ArmedSlack系统的“科学上网机”，目前基本成型，具体实现方法和相关软件会随着博客的更新逐步公开。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://www.raspberrypi.org">http://www.raspberrypi.org</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> 一款基于ARM芯片的Slackware Linux发行版，网址：<a href="http://www.armedslack.org">http://www.armedslack.org</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.3" href="#fnr.3">3</a></sup> <a href="http://slackbook.org">http://slackbook.org</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.4" href="#fnr.4">4</a></sup> <a href="http://slackbook.org/beta/">http://slackbook.org/beta/</a>
</p>


<p class="footnote"><sup><a class="footnum" name="fn.5" href="#fnr.5">5</a></sup> <a href="http://code.google.com/p/support/">http://code.google.com/p/support/</a>
</p>



</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/10/29/zui-jin-kan-wan-de-liang-ben-shu/'>http://blog.xeonxu.info/blog/2012/10/29/zui-jin-kan-wan-de-liang-ben-shu/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[最近看完的两本书]]></title>
      <link>http://blog.xeonxu.info/blog/2012/10/29/zui-jin-kan-wan-de-liang-ben-shu/</link>
      <pubDate>2012-10-29T22:23:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/10/29/zui-jin-kan-wan-de-liang-ben-shu</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
前两天单位的在做项目中发现一个Bug：手机在启动后触摸屏有一定几率无法使用。这个Bug非常恼人，因为重现几率非常低，而且只会出现在重启过程中。这意味着不论是调查原因还是验证对策，都将是非常耗时且繁琐的。因为对策问题之前，首先需要重现问题，如此才好分析问题的原因。而这个Bug必须要反复重启手机才能重现，人为操作的话太浪费时间效率低下。
好在这个Bug的行为比较稳定，重现后触屏肯定不能使用。通过adb对比调查正常手机和问题手机的设备节点，发现在出问题的手机中，触屏设备没有注册成功。看来是设备注册失败，导致的触屏异常。于是，我们考虑使用脚本对该Bug进行再现分析。思路如下：
</p>
<ol>
<li>写一个脚本判断触屏驱动的设备节点是否注册成功，如果成功则复位重启；否则保留现场等待分析。
</li>
<li>将该脚本添加到 <code>init.rc</code> 中成为一个服务，在启动时调用。
</li>
<li>脚本运行时将相应的运行信息输出到外部文件中，从而可以计算出再现率。
</li>
</ol>

<p>基于以上想法，写出了以下脚本代码：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>check_tp.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/system/bin/sh</span>
</span><span class="line"><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class="line"><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;x_$tp_name&quot;</span> <span class="o">=</span> <span class="s2">&quot;x_$input_name&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &gt;&gt; /data/check_tp.log
</span><span class="line">    reboot
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &gt;&gt; /data/check_tp.log
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

同时，修改 <code>init.rc</code> 文件，在其中加入：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">service check_tp /system/bin/sh /system/bin/check_tp.sh
</span><span class="line">    class main
</span><span class="line">    oneshot
</span></code></pre></td></tr></table></div></figure></notextile></div>

然后重新编译bootimage并刷机。最后使用 <code>adb remount&amp;&amp;adb push check_tp.sh /system/bin/&amp;&amp;adb shell chmod 755 /system/bin/check_tp.sh</code> ，将刚才新写的脚本推送到手机上。重启手机，之后就会看到手机不断的上电然后复位重启。
在运行该脚本不断重启手机8小时之后，手机正常进入了系统。此时操作手机进行验证，发现触屏已经无效。分析 <code>/data/check_tp.log</code> 文件，算出手机共重启了1000多次，从而得出该问题的再现率大概为千分之一。利用该脚本，验证bug方便了好多，大大提高了工作效率。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">后记</h2>
<div class="outline-text-2" id="text-1">

<p>由于以上写的脚本使用到了 <code>if</code> 关键字，而Android系统默认不支持该关键字，必须依赖busybox环境才行。之前我有移植过busybox，但是只在工程模式下生效，所以该脚本在release版本中是不能正常运行的。为了不依赖运行环境，我又将该脚本换了一种写法，改为：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>check_tp2.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/system/bin/sh</span>
</span><span class="line"><span class="nv">tp_name</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span> <span class="c"># xxxx为注册的tp名称</span>
</span><span class="line"><span class="nv">input_name</span><span class="o">=</span><span class="sb">`</span>cat /sys/class/input/input0/name<span class="sb">`</span>
</span><span class="line"><span class="k">case</span> <span class="nv">$input_name</span> in
</span><span class="line">    <span class="nv">$tp_name</span><span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is OK.&quot;</span> &gt;&gt; /data/check_tp.log
</span><span class="line">              reboot
</span><span class="line">             ;;
</span><span class="line">    *<span class="o">)</span> <span class="nb">echo</span> <span class="s2">&quot;`date` touch screen is not OK.&quot;</span> &gt;&gt; /data/check_tp.log
</span><span class="line">            ;;
</span><span class="line"><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

这样，即便是在Android原生环境中，也可以正确无误的运行。这样就能将该脚本发给测试，利用它对release版本进行bug验证了。
</p></div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang/'>http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[小脚本帮大忙]]></title>
      <link>http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang/</link>
      <pubDate>2012-10-21T23:38:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/10/21/xiao-jiao-ben-bang-da-mang</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
记得之前Twitter上的@justin7974介绍过Vitamin-R这个软件，是一款个人时间管理类的软件，据说可以和<a href="http://www.omnigroup.com/products/omnifocus/">Omnifocus</a> 或者Things配合起来用，看起来不错的样子。只是它20刀的价钱相对它的功能来说，我觉得还是贵了点，所以一直以来都没有下手。前段时间浏览Twitter，突然看见一条新闻，说Vitamin-R在<a href="https://itunes.apple.com/us/app/vitamin-r/id402438916?mt=12">AppStore</a> 上1折优惠只要2刀。于是，毫不犹豫的下单买了它。
</p>
<p>
Vitamin-R运行起来的界面非常简单，运行时会在菜单栏上出来一个&#8221;R&#8221;图标。点击这个图标就会出现如下界面：
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./79722mqA.png" alt="./images/blog/./79722mqA.png" />
</p>

<p>
截图中是我自己设置的一个”写博客“的工作目标，时长设置为20分钟。设置了目标后，自己就可以和时间赛跑开始干活了。软件默认会在一定时间过后用声音提示用户，以注意所消耗的时间。等倒计时结束，他会以用户设定的方式提醒用户设定的时间已到，并要求用户对自己这段时间的工作情况进行评价和记录。如此，用户便可以对自己完成一个任务所消耗的时间以及投入程度有一个了解，以便未来更高效的工作和制定计划。
</p>
<p>
说到Vitamin-R最让我关注的一个功能，那就是和Omnifocus的整合了。使用也非常简单，直接将Omnifocus中的任务条目用鼠标拖进Vitamin-R的时间片描述中，然后设置任务时间开始即可。任务时间到期后会出现如下这个界面：
</p>

<p>
<img src="http://blog.xeonxu.info/./images/blog/./79722NJT.png" alt="./images/blog/./79722NJT.png" />
</p>

<p>
将下面两个复选框选中，点继续，然后完成。如此这样，你会发现Omnifocus中的任务也会相应的被标记为完成状态。
</p>
<p>
此外，Vitamin支持丰富的快捷键，比如使用CMD-OPT-N，可以打开一个类似便签的界面，用来记录当前任务的一些随笔想法：
</p>

<p>
<img src="http://blog.xeonxu.info/./images/blog/./79722ndf.png" alt="./images/blog/./79722ndf.png" />
</p>

<p>
如截图中所示，除了记录当前任务，还能记录一些其它内容。而这些功能都可以通过快捷键来很方便的调用。
</p>
<p>
当然，Vitamin-R还有一些很有用的功能，比如噪声发生器(Noise Machine)。可以让用户在安静的工作环境中设置一些噪音，模拟自然界的声音，以让用户更关注工作的内容。
</p>
<p>
好了，就介绍到这里。还是那句话，软件本身使用很简单，设置项也不多，至于值不值20刀的价格就见仁见智了，不过2刀是绝对值了:)
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/10/14/tui-jian-shi-yong-vitamin-r/'>http://blog.xeonxu.info/blog/2012/10/14/tui-jian-shi-yong-vitamin-r/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[推荐使用Vitamin-R]]></title>
      <link>http://blog.xeonxu.info/blog/2012/10/14/tui-jian-shi-yong-vitamin-r/</link>
      <pubDate>2012-10-14T21:24:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/10/14/tui-jian-shi-yong-vitamin-r</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
Octopress自带的RSS模版中没有包含文章作者信息，而是只包含了网站作者信息。考虑到博客经常只是一个人写作，同时文章作者随RSS显示，更常用一些，所以我对默认的RSS模版做了一点改动，让它支持了文章作者信息的输出。其实改动相当简单，默认情况下就一个 <code>atom.xml</code> 文件，该文件位于 <code>source/</code> 目录下。改动如下：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>atom.xml输出作者信息 (atom_author.diff)</span> <a href="http://blog.xeonxu.info/downloads/code/atom_author.diff">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gh">diff --git a/source/atom.xml b/source/atom.xml</span>
</span><span class="line"><span class="gh">index 83af3f8..c20506b 100644</span>
</span><span class="line"><span class="gd">--- a/source/atom.xml</span>
</span><span class="line"><span class="gi">+++ b/source/atom.xml</span>
</span><span class="line"><span class="gu">@@ -9,10 +9,6 @@ layout: nil</span>
</span><span class="line">   &lt;link href=&quot;{{ site.url }}/&quot;/&gt;
</span><span class="line">   &lt;updated&gt;{{ site.time | date_to_xmlschema }}&lt;/updated&gt;
</span><span class="line">   &lt;id&gt;{{ site.url }}/&lt;/id&gt;
</span><span class="line"><span class="gd">-  &lt;author&gt;</span>
</span><span class="line"><span class="gd">-    &lt;name&gt;&lt;![CDATA[{{ site.author | strip_html }}]]&gt;&lt;/name&gt;</span>
</span><span class="line"><span class="gd">-    {% if site.email %}&lt;email&gt;&lt;![CDATA[{{ site.email }}]]&gt;&lt;/email&gt;{% endif %}</span>
</span><span class="line"><span class="gd">-  &lt;/author&gt;</span>
</span><span class="line">   &lt;generator uri=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/generator&gt;
</span><span class="line">
</span><span class="line">   {% for post in site.posts limit: 20 %}
</span><span class="line"><span class="gu">@@ -20,8 +16,17 @@ layout: nil</span>
</span><span class="line">     &lt;title type=&quot;html&quot;&gt;&lt;![CDATA[{{ post.title | cdata_escape }}]]&gt;&lt;/title&gt;
</span><span class="line">     &lt;link href=&quot;{{ site.url }}{{ post.url }}&quot;/&gt;
</span><span class="line">     &lt;updated&gt;{{ post.date | date_to_xmlschema }}&lt;/updated&gt;
</span><span class="line"><span class="gi">+    &lt;author&gt;</span>
</span><span class="line"><span class="gi">+      &lt;name&gt;&lt;![CDATA[{{ site.author | strip_html }}]]&gt;&lt;/name&gt;</span>
</span><span class="line"><span class="gi">+      {% if site.email %}&lt;email&gt;&lt;![CDATA[{{ site.email }}]]&gt;&lt;/email&gt;{% endif %}</span>
</span><span class="line"><span class="gi">+    &lt;/author&gt;</span>
</span><span class="line">     &lt;id&gt;{{ site.url }}{{ post.id }}&lt;/id&gt;
</span><span class="line">     &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[{{ post.content | expand_urls: site.url | cdata_escape }}]]&gt;&lt;/content&gt;
</span><span class="line">   &lt;/entry&gt;
</span><span class="line">   {% endfor %}
</span><span class="line"> &lt;/feed&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
其实很简单，就是将全局的作者设定移到文章条目的设定中，这样设置的作者信息就成为了文章的属性。
对于曾经给Octopress添加过RSS2.0支持的站点<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，还需要相应修改一下 <code>source/</code> 目录下 <code>rss.xml</code> 文件：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>rss.xml输出作者信息 (rss_author.diff)</span> <a href="http://blog.xeonxu.info/downloads/code/rss_author.diff">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gh">diff --git a/source/rss.xml b/source/rss.xml</span>
</span><span class="line"><span class="gh">index 435f17f..044e52f 100644</span>
</span><span class="line"><span class="gd">--- a/source/rss.xml</span>
</span><span class="line"><span class="gi">+++ b/source/rss.xml</span>
</span><span class="line"><span class="gu">@@ -3,27 +3,31 @@ layout: nil</span>
</span><span class="line"> ---
</span><span class="line"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
</span><span class="line"> &lt;rss xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; version=&quot;2.0&quot;&gt;
</span><span class="line">  &lt;channel&gt;
</span><span class="line">    &lt;description&gt;&lt;![CDATA[{{ site.title }}]]&gt;&lt;/description&gt;
</span><span class="line">    &lt;title&gt;&lt;![CDATA[{{ site.title }}]]&gt;&lt;/title&gt;
</span><span class="line">    &lt;link&gt;{{ site.url }}/&lt;/link&gt;
</span><span class="line">    &lt;pubDate&gt;{{ site.time | date_to_xmlschema }}&lt;/pubDate&gt;
</span><span class="line">
</span><span class="line">    {% for post in site.posts limit: 20 %}
</span><span class="line">    &lt;item&gt;
</span><span class="line">      &lt;description&gt;
</span><span class="line">	&lt;![CDATA[
</span><span class="line">		 {{ post.content | expand_urls: site.url | cdata_escape }}
</span><span class="line">	]]&gt;
</span><span class="line">      &lt;/description&gt;
</span><span class="line">      &lt;title&gt;&lt;![CDATA[{{ post.title | cdata_escape }}]]&gt;&lt;/title&gt;
</span><span class="line">      &lt;link&gt;{{ site.url }}{{ post.url }}&lt;/link&gt;
</span><span class="line">      &lt;pubDate&gt;{{ post.date | date_to_xmlschema }}&lt;/pubDate&gt;
</span><span class="line">      &lt;guid isPermaLink=&quot;false&quot;&gt;{{ site.url }}{{ post.id }}&lt;/guid&gt;
</span><span class="line">      &lt;source url=&quot;{{ site.url }}/rss.xml&quot;&gt;&lt;![CDATA[{{ site.title }}]]&gt;&lt;/source&gt;
</span><span class="line"><span class="gi">+      &lt;author&gt;</span>
</span><span class="line"><span class="gi">+	&lt;name&gt;&lt;![CDATA[{{ site.author | strip_html }}]]&gt;&lt;/name&gt;</span>
</span><span class="line"><span class="gi">+	{% if site.email %}&lt;email&gt;&lt;![CDATA[{{ site.email }}]]&gt;&lt;/email&gt;{% endif %}</span>
</span><span class="line"><span class="gi">+      &lt;/author&gt;</span>
</span><span class="line">    &lt;/item&gt;
</span><span class="line">    {% endfor %}
</span><span class="line">  &lt;/channel&gt;
</span><span class="line"> &lt;/rss&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

同样，只需在文章描述段中加入作者信息的属性即可。修改好文件保存之后，再次运行 <code>rake generate</code> 就会发现rss文件已经正确更新了。
</p>
<p>
另外，有人还想在RSS输出的文章中加入相应版权声明，但又不想将版权声明嵌到文章里（比如像我这样）。办法也是有的，其实还是修改RSS模版文件。
首先在 <code>source/_includes/post/</code> 目录中添加一个叫 <code>copyright.html</code> 新文件，内容如下，也可以是自己自定的一些版权内容：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>版权声明文件 (copyright.diff)</span> <a href="http://blog.xeonxu.info/downloads/code/copyright.diff">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gh">diff --git a/source/_includes/post/copyright.html b/source/_includes/post/copyright.html</span>
</span><span class="line"><span class="gh">index 2e57b7e..9547c7b 100644</span>
</span><span class="line"><span class="gd">--- a/source/_includes/post/copyright.html</span>
</span><span class="line"><span class="gi">+++ b/source/_includes/post/copyright.html</span>
</span><span class="line"><span class="gu">@@ -1,2 +1,8 @@</span>
</span><span class="line"><span class="gi">+&lt;p class=&#39;post-footer&#39;&gt;</span>
</span><span class="line"><span class="gi">+  &lt;h1&gt;License&lt;/h1&gt;</span>
</span><span class="line"><span class="gi">+  &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本博作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh&quot;&gt;知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议&lt;/a&gt;进行许可。&lt;br/&gt;</span>
</span><span class="line"><span class="gi">+  Original link:</span>
</span><span class="line"><span class="gi">+  &lt;a href=&#39;{{ site.url }}{{ post.url }}&#39;&gt;{{ site.url }}{{ post.url }}&lt;/a&gt;&lt;br/&gt;</span>
</span><span class="line"><span class="gi">+  &amp;nbsp;written by &lt;a href=&#39;{{ site.url }}&#39;&gt;{{ site.author }}&lt;/a&gt;</span>
</span><span class="line"><span class="gi">+  &amp;nbsp;posted at &lt;a href=&#39;{{ site.url }}&#39;&gt;{{ site.url }}&lt;/a&gt;</span>
</span><span class="line"><span class="gi">+&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

我的版权声明模版中加入了CC许可，文章原始链接，作者名称以及个人站点信息。然后分别修改 <code>atom.xml</code> 和 <code>rss.xml</code> 文件如下：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>atom.xml添加版权声明 (atom_copyright.diff)</span> <a href="http://blog.xeonxu.info/downloads/code/atom_copyright.diff">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gh">diff --git a/source/atom.xml b/source/atom.xml</span>
</span><span class="line"><span class="gh">index 83af3f8..c20506b 100644</span>
</span><span class="line"><span class="gd">--- a/source/atom.xml</span>
</span><span class="line"><span class="gi">+++ b/source/atom.xml</span>
</span><span class="line"><span class="gu">@@ -20,8 +16,17 @@ layout: nil</span>
</span><span class="line">     &lt;title type=&quot;html&quot;&gt;&lt;![CDATA[{{ post.title | cdata_escape }}]]&gt;&lt;/title&gt;
</span><span class="line">     &lt;link href=&quot;{{ site.url }}{{ post.url }}&quot;/&gt;
</span><span class="line">     &lt;updated&gt;{{ post.date | date_to_xmlschema }}&lt;/updated&gt;
</span><span class="line">    &lt;author&gt;
</span><span class="line">      &lt;name&gt;&lt;![CDATA[{{ site.author | strip_html }}]]&gt;&lt;/name&gt;
</span><span class="line">      {% if site.email %}&lt;email&gt;&lt;![CDATA[{{ site.email }}]]&gt;&lt;/email&gt;{% endif %}
</span><span class="line">    &lt;/author&gt;
</span><span class="line">     &lt;id&gt;{{ site.url }}{{ post.id }}&lt;/id&gt;
</span><span class="line"><span class="gd">-    &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[{{ post.content | expand_urls: site.url | cdata_escape }}]]&gt;&lt;/content&gt;</span>
</span><span class="line"><span class="gi">+    &lt;content type=&quot;html&quot;&gt;</span>
</span><span class="line"><span class="gi">+        &lt;![CDATA[</span>
</span><span class="line"><span class="gi">+        {{ post.content | expand_urls: site.url | cdata_escape }}</span>
</span><span class="line"><span class="gi">+		{% include post/copyright.html %}</span>
</span><span class="line"><span class="gi">+        ]]&gt;</span>
</span><span class="line"><span class="gi">+    &lt;/content&gt;</span>
</span><span class="line">   &lt;/entry&gt;
</span><span class="line">   {% endfor %}
</span><span class="line"> &lt;/feed&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
就添加一句 <code>include post/copyright.html</code> ，不过要注意是在CDATA段中。 <code>rss.xml</code> 一样处理：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>rss.xml添加版权声明 (rss_copyright.diff)</span> <a href="http://blog.xeonxu.info/downloads/code/rss_copyright.diff">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gh">diff --git a/source/rss.xml b/source/rss.xml</span>
</span><span class="line"><span class="gh">index 435f17f..044e52f 100644</span>
</span><span class="line"><span class="gd">--- a/source/rss.xml</span>
</span><span class="line"><span class="gi">+++ b/source/rss.xml</span>
</span><span class="line"><span class="gu">@@ -3,27 +3,31 @@ layout: nil</span>
</span><span class="line"> ---
</span><span class="line"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
</span><span class="line"> &lt;rss xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; version=&quot;2.0&quot;&gt;
</span><span class="line">  &lt;channel&gt;
</span><span class="line">    &lt;description&gt;&lt;![CDATA[{{ site.title }}]]&gt;&lt;/description&gt;
</span><span class="line">    &lt;title&gt;&lt;![CDATA[{{ site.title }}]]&gt;&lt;/title&gt;
</span><span class="line">    &lt;link&gt;{{ site.url }}/&lt;/link&gt;
</span><span class="line">    &lt;pubDate&gt;{{ site.time | date_to_xmlschema }}&lt;/pubDate&gt;
</span><span class="line">
</span><span class="line">    {% for post in site.posts limit: 20 %}
</span><span class="line">    &lt;item&gt;
</span><span class="line">      &lt;description&gt;
</span><span class="line">	&lt;![CDATA[
</span><span class="line">		 {{ post.content | expand_urls: site.url | cdata_escape }}
</span><span class="line"><span class="gi">+		 {% include post/copyright.html %}</span>
</span><span class="line">	]]&gt;
</span><span class="line">      &lt;/description&gt;
</span><span class="line">      &lt;title&gt;&lt;![CDATA[{{ post.title | cdata_escape }}]]&gt;&lt;/title&gt;
</span><span class="line">      &lt;link&gt;{{ site.url }}{{ post.url }}&lt;/link&gt;
</span><span class="line">      &lt;pubDate&gt;{{ post.date | date_to_xmlschema }}&lt;/pubDate&gt;
</span><span class="line">      &lt;guid isPermaLink=&quot;false&quot;&gt;{{ site.url }}{{ post.id }}&lt;/guid&gt;
</span><span class="line">
</span><span class="line">      &lt;source url=&quot;{{ site.url }}/rss.xml&quot;&gt;&lt;![CDATA[{{ site.title }}]]&gt;&lt;/source&gt;
</span><span class="line">      &lt;author&gt;
</span><span class="line">	&lt;name&gt;&lt;![CDATA[{{ site.author | strip_html }}]]&gt;&lt;/name&gt;
</span><span class="line">	{% if site.email %}&lt;email&gt;&lt;![CDATA[{{ site.email }}]]&gt;&lt;/email&gt;{% endif %}
</span><span class="line">      &lt;/author&gt;
</span><span class="line">    &lt;/item&gt;
</span><span class="line">    {% endfor %}
</span><span class="line">  &lt;/channel&gt;
</span><span class="line"> &lt;/rss&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
轻松搞定，效果就是我博客现在的效果。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://log4d.com/2012/05/support-rss/">http://log4d.com/2012/05/support-rss/</a>
</p>



</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/10/11/gei-octopressde-rssshu-chu-tian-jia-zuo-zhe-xin-xi/'>http://blog.xeonxu.info/blog/2012/10/11/gei-octopressde-rssshu-chu-tian-jia-zuo-zhe-xin-xi/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[给Octopress的RSS输出中添加文章作者信息]]></title>
      <link>http://blog.xeonxu.info/blog/2012/10/11/gei-octopressde-rssshu-chu-tian-jia-zuo-zhe-xin-xi/</link>
      <pubDate>2012-10-11T23:30:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/10/11/gei-octopressde-rssshu-chu-tian-jia-zuo-zhe-xin-xi</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
最近接到一个任务，需要将Busybox环境移植到高通平台的Android项目上。Busybox的目标执行文件有现成编译好的，需要做的工作就是添加一个Android工程，将编译好的二进制文件拷贝到Android的文件系统中，同时还需要生成相应的Busybox命令链接。
</p>
<p>
拷贝文件到指定目录在Android的编译系统中有现成的方法，使用下面这个方法即可：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>拷贝文件到指定目录  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="nv">LOCAL_PATH</span> <span class="o">:=</span> <span class="k">$(</span>call my-dir<span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Add busybox environment zhiqiang.xu 2012.10.8</span>
</span><span class="line"><span class="cp">include $(CLEAR_VARS)</span>
</span><span class="line">LOCAL_MODULE :<span class="o">=</span> busybox_modules
</span><span class="line">LOCAL_MODULE_STEM :<span class="o">=</span> busybox
</span><span class="line">LOCAL_SRC_FILES :<span class="o">=</span> busybox
</span><span class="line">LOCAL_MODULE_TAGS :<span class="o">=</span> eng
</span><span class="line">LOCAL_MODULE_CLASS :<span class="o">=</span> EXECUTABLES
</span><span class="line">LOCAL_MODULE_PATH :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT<span class="k">)</span>/busybox
</span><span class="line"><span class="cp">include $(BUILD_PREBUILT)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

由于Busybox环境主要用于工程调试，所以模块设置为只在eng编译模式下有效。按照以上这段设置，可以将busybox执行文件拷贝到Android文件系统中的 <code>/system/busybox</code> 目录下。
</p>
<p>
而对于生成链接，之前没有接触过。不过在搜索调查了已有的Android工程文件之后，发现系统中也提供了现成的方法，如下：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>recovery使用的软链生成方法  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="nv">BUSYBOX_LINKS</span> <span class="o">:=</span> <span class="k">$(</span>shell cat external/busybox/busybox-minimal.links<span class="k">)</span>
</span><span class="line"><span class="cp">ifndef BOARD_HAS_SMALL_RECOVERY</span>
</span><span class="line">exclude :<span class="o">=</span> tune2fs
</span><span class="line"><span class="cp">ifeq ($(BOARD_HAS_LARGE_FILESYSTEM),true)</span>
</span><span class="line">exclude +<span class="o">=</span> mke2fs
</span><span class="line"><span class="cp">endif</span>
</span><span class="line"><span class="cp">endif</span>
</span><span class="line">RECOVERY_BUSYBOX_SYMLINKS :<span class="o">=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>TARGET_RECOVERY_ROOT_OUT<span class="k">)</span>/sbin/,<span class="k">$(</span>filter-out <span class="k">$(</span>exclude<span class="k">)</span>,<span class="k">$(</span>notdir <span class="k">$(</span>BUSYBOX_LINKS<span class="k">))))</span>
</span><span class="line"><span class="k">$(</span>RECOVERY_BUSYBOX_SYMLINKS<span class="k">)</span>: BUSYBOX_BINARY :<span class="o">=</span> busybox
</span><span class="line"><span class="k">$(</span>RECOVERY_BUSYBOX_SYMLINKS<span class="k">)</span>: <span class="k">$(</span>LOCAL_INSTALLED_MODULE<span class="k">)</span>
</span><span class="line">        @echo <span class="s2">&quot;Symlink: $@ -&gt; $(BUSYBOX_BINARY)&quot;</span>
</span><span class="line">        @mkdir -p <span class="k">$(</span>dir <span class="nv">$@</span><span class="k">)</span>
</span><span class="line">        @rm -rf <span class="nv">$@</span>
</span><span class="line">        <span class="k">$(</span>hide<span class="k">)</span> ln -sf <span class="k">$(</span>BUSYBOX_BINARY<span class="k">)</span> <span class="nv">$@</span>
</span><span class="line">
</span><span class="line">ALL_DEFAULT_INSTALLED_MODULES +<span class="o">=</span> <span class="k">$(</span>RECOVERY_BUSYBOX_SYMLINKS<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

实现方法使用了标准的Makefile目标，在 <code>$(RECOVERY_BUSYBOX_SYMLINKS)</code> 目标下生成相应链接，看起来似乎是只要将Makefile的目标添加到 <code>ALL_DEFAULT_INSTALLED_MODULES</code> 这个变量后，编译的时候就会按照Makefile的标准生成目标。实验后确实可行，不过同时我也发现了一个不足。那就是使用这种方法后，通过mm/mmm命令进行模块编译的时候是没法正确执行的。换言之， <code>ALL_DEFAULT_INSTALLED_MODULES</code> 变量只有在系统完全编译的时候才会被调用。为此，领悟范例的精神后，自己改了一下实现方法，如下：
</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>修改后的生成软链的方法  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="cp">ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))</span>
</span><span class="line">
</span><span class="line"><span class="cp">define _make_link</span>
</span><span class="line">   <span class="k">$(</span>shell <span class="nb">echo</span> <span class="s2">&quot;Symlink: $(1) -&gt; $(2)&quot;</span><span class="k">)</span>
</span><span class="line">   <span class="k">$(</span>shell mkdir -p <span class="k">$(</span>dir <span class="k">$(</span>1<span class="k">)))</span>
</span><span class="line">   <span class="k">$(</span>shell rm -rf <span class="k">$(</span>1<span class="k">))</span>
</span><span class="line">   <span class="k">$(</span>shell ln -sf <span class="k">$(</span>2<span class="k">)</span> <span class="k">$(</span>1<span class="k">))</span>
</span><span class="line"><span class="cp">endef</span>
</span><span class="line">
</span><span class="line"><span class="c"># Add busybox environment zhiqiang.xu 2012.10.8</span>
</span><span class="line"><span class="c"># Now let&#39;s do busybox symlinks</span>
</span><span class="line"><span class="nv">BUSYBOX_LINKS</span> <span class="o">:=</span> <span class="k">$(</span>shell cat <span class="k">$(</span>LOCAL_PATH<span class="k">)</span>/busybox.links<span class="k">)</span>
</span><span class="line">BUSYBOX_SYMLINKS :<span class="o">=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>TARGET_OUT<span class="k">)</span>/busybox/,<span class="k">$(</span>notdir <span class="k">$(</span>BUSYBOX_LINKS<span class="k">)))</span>
</span><span class="line">BUSYBOX_BINARY :<span class="o">=</span> /system/busybox/<span class="k">$(</span>LOCAL_SRC_FILES<span class="k">)</span>
</span><span class="line"><span class="k">$(</span>foreach _item, <span class="k">$(</span>BUSYBOX_SYMLINKS<span class="k">)</span>, <span class="se">\</span>
</span><span class="line">       <span class="k">$(</span><span class="nb">eval</span> <span class="k">$(</span>call _make_link,<span class="k">$(</span>_item<span class="k">)</span>,<span class="k">$(</span>BUSYBOX_BINARY<span class="k">))))</span>
</span><span class="line">
</span><span class="line">_make_link :<span class="o">=</span>
</span><span class="line"><span class="cp">endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
修改后的方法使用了自定义宏，不论是全系统编译还是使用mm/mmm进行模块编译，每次编译的时候宏都会展开执行。同时为了区分编译模式，我又添加了相应的判断宏 <code>ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))</code> 将执行部分包括在里面。实验下来效果良好，可以根据当前设定的编译模式生成或者不生成相应软链。
最后，发现一点，我修改的这个方法由于没有依赖目标，所以每次编译的时候都会执行一遍，编译效率不高，所以这种结构不能用于大负荷的处理工作。好在生成软链不是多重的工作，这么用用也无什么大碍。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/10/08/zai-androidbian-yi-shi-jian-li-fu-hao-lian-jie/'>http://blog.xeonxu.info/blog/2012/10/08/zai-androidbian-yi-shi-jian-li-fu-hao-lian-jie/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[在Android编译时建立符号链接]]></title>
      <link>http://blog.xeonxu.info/blog/2012/10/08/zai-androidbian-yi-shi-jian-li-fu-hao-lian-jie/</link>
      <pubDate>2012-10-08T21:48:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/10/08/zai-androidbian-yi-shi-jian-li-fu-hao-lian-jie</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
手上的RT-N16跑Tomato系统已经两年有余了，两年来Tomato系统没有让我失望过，一直提供着稳定高速的网络服务，此外它还提供了内网文件服务，P2P下载以及科学上网代理等重要功能。最近，本人又败了一个小玩意：<a href="http://www.raspberrypi.org">Raspberry Pi</a> ， 税前价格$25，到手¥310。入手后，我在上面安装了ArmedSlack，运行的非常稳定，很不错。于是，本人决定将其打造为一个随身的功能强大的小电脑，包括随插随用的科学上网代理。基本思路是Raspberry Pi启动后通过公钥认证自动连接到家中的RT-N16路由器上，然后通过ssh转发相应端口，即可实现科学上网。不过，这个方法中有一个隐患：因为Tomato默认只提供root/admin账户，权限太大，如果Raspberry Pi使用这个账户进行连接，总是有点不放心。于是，我决定给Tomato系统添加新的用户。
</p>
<p>
Tomato默认并不支持添加账户，即便通过optware安装了adduser后也由于没有passwd命令而失败。不过通过网络搜索，还是让我找到了一个可以添加用户的方法<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>。我用如下的命令在Tomato中建立了一个名为sshuser的用户：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>添加用户  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">UNAM</span><span class="o">=</span>sshuser
</span><span class="line"><span class="nv">RNAM</span><span class="o">=</span><span class="s2">&quot;For Login Only&quot;</span>
</span><span class="line"><span class="nv">UNUM</span><span class="o">=</span>200
</span><span class="line"><span class="nv">UGRP</span><span class="o">=</span><span class="nv">$UNUM</span>
</span><span class="line"><span class="c">#UGRP=0</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;$UNAM:x:$UNUM:$UGRP:$RNAM:/tmp:/bin/sh&quot;</span> &gt;&gt; /etc/passwd
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;$UNAM:x:$UNUM:$UGRP:$RNAM:/home/$UNAM:/bin/sh&quot;</span> &gt;&gt; /etc/passwd.custom
</span><span class="line"><span class="o">[[</span> <span class="nv">$UGRP</span> -ne 0 <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;$UNAM:x:$UGRP:&quot;</span> &gt;&gt;/etc/group
</span><span class="line"><span class="o">[[</span> <span class="nv">$UGRP</span> -ne 0 <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;$UNAM:x:$UGRP:&quot;</span> &gt;&gt;/etc/group.custom
</span><span class="line">sed -n -e <span class="s2">&quot;s,^root:,$UNAM:,p&quot;</span> &lt; /etc/shadow &gt;&gt; /etc/shadow.custom
</span><span class="line">
</span><span class="line">chmod 777 /tmp/home
</span><span class="line">ssh <span class="nv">$UNAM</span>@localhost <span class="s2">&quot;mkdir /home/$UNAM;touch /home/$UNAM/.profile &amp;&amp; echo success&quot;</span>
</span><span class="line"><span class="c"># press return for the password prompt, you should see the word &quot;success&quot; reported</span>
</span><span class="line">
</span><span class="line">chmod 755 /tmp/home
</span><span class="line">
</span><span class="line">nvram setfile2nvram /etc/passwd.custom
</span><span class="line">nvram setfile2nvram /etc/group.custom
</span><span class="line">nvram setfile2nvram /etc/shadow.custom
</span><span class="line">nvram setfile2nvram /home/<span class="nv">$UNAM</span>/.profile
</span><span class="line">nvram commit
</span></code></pre></td></tr></table></div></figure></notextile></div>

最后几句包含nvram的语句是将新建的几个 <code>.custom</code> 文件添加到nvram中，这样这些新添加的文件就可以在重启路由器后还能存在。然后，将以下三句添加到路由器设置中-&gt;脚本设置-&gt;初始化中：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>初始化用户  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sed -i <span class="s2">&quot;/^sshuser:/d&quot;</span> /etc/passwd
</span><span class="line">grep <span class="s2">&quot;^sshuser:&quot;</span> &lt; /etc/shadow.custom &gt;&gt; /etc/shadow
</span><span class="line">grep <span class="s2">&quot;^sshuser:&quot;</span> &lt; /etc/passwd.custom &gt;&gt; /etc/passwd
</span></code></pre></td></tr></table></div></figure></notextile></div>

如图：
<img src="http://blog.xeonxu.info/./images/blog/./574rHz.png" alt="./images/blog/./574rHz.png" />
新建的用户使用和root一样的密码，如果需要修改，需要相应修改 <code>/etc/shadow</code> 文件。新建用户登录后的效果入下图：
<img src="http://blog.xeonxu.info/./images/blog/./574dRC.png" alt="./images/blog/./574dRC.png" />
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://tomatousb.org/tut:adding-your-own-users">http://tomatousb.org/tut:adding-your-own-users</a>
</p>




</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/10/01/wei-tomatotian-jia-yong-hu/'>http://blog.xeonxu.info/blog/2012/10/01/wei-tomatotian-jia-yong-hu/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[为Tomato添加用户]]></title>
      <link>http://blog.xeonxu.info/blog/2012/10/01/wei-tomatotian-jia-yong-hu/</link>
      <pubDate>2012-10-01T21:21:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/10/01/wei-tomatotian-jia-yong-hu</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
最近在做高通Android项目时遇到一个问题，测试报告说拨号键盘中按键震感偏弱，问题首先提到了我这里。于是，我首先去内核驱动里检查了一下振子的配置，发现给振子的供电已经调到最高值了，看来只能从别的方向下手解决这个问题。震感强烈与否取决于两个因素，一个是驱动电流/驱动电压，而另一个是驱动时长。由于这个项目中给振子的供电是个LDO，只能调节驱动电压，而同时驱动电压已经最大，所以需要想办法加长驱动时间。
</p>
<p>
在和应用一块分析了Android拨号键盘应用的代码后，按键震动的实现在 <code>packages/apps/Contacts/src/com/android/contacts/dialpad/DialpadFragment.java</code> 文件中。该文件中实现了拨号键盘按钮 <code>onClick</code> 事件的监听，其中：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>DialpadFragment.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">switch</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">one</span><span class="o">:</span> <span class="o">{</span>
</span><span class="line">            <span class="n">playTone</span><span class="o">(</span><span class="n">ToneGenerator</span><span class="o">.</span><span class="na">TONE_DTMF_1</span><span class="o">);</span>
</span><span class="line">            <span class="n">keyPressed</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_1</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">two</span><span class="o">:</span> <span class="o">{</span>
</span><span class="line">            <span class="n">playTone</span><span class="o">(</span><span class="n">ToneGenerator</span><span class="o">.</span><span class="na">TONE_DTMF_2</span><span class="o">);</span>
</span><span class="line">            <span class="n">keyPressed</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_2</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">three</span><span class="o">:</span> <span class="o">{</span>
</span><span class="line">            <span class="n">playTone</span><span class="o">(</span><span class="n">ToneGenerator</span><span class="o">.</span><span class="na">TONE_DTMF_3</span><span class="o">);</span>
</span><span class="line">            <span class="n">keyPressed</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_3</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line"><span class="c1">//以下省略</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

可以看到该监听事件中播放了按键音，同时调用了 <code>keyPressed</code> 这个方法。再来看 <code>keyPressed</code> 方法的实现：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>DialpadFragment.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">private</span> <span class="kt">void</span> <span class="nf">keyPressed</span><span class="p">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">mHaptic</span><span class="p">.</span><span class="n">vibrate</span><span class="p">();</span>
</span><span class="line">    <span class="n">KeyEvent</span> <span class="n">event</span> <span class="o">=</span> <span class="n">new</span> <span class="n">KeyEvent</span><span class="p">(</span><span class="n">KeyEvent</span><span class="p">.</span><span class="n">ACTION_DOWN</span><span class="p">,</span> <span class="n">keyCode</span><span class="p">);</span>
</span><span class="line">    <span class="n">mDigits</span><span class="p">.</span><span class="n">onKeyDown</span><span class="p">(</span><span class="n">keyCode</span><span class="p">,</span> <span class="n">event</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// If the cursor is at the end of the text we hide it.</span>
</span><span class="line">    <span class="n">final</span> <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">mDigits</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">length</span> <span class="o">==</span> <span class="n">mDigits</span><span class="p">.</span><span class="n">getSelectionStart</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">length</span> <span class="o">==</span> <span class="n">mDigits</span><span class="p">.</span><span class="n">getSelectionEnd</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="n">mDigits</span><span class="p">.</span><span class="n">setCursorVisible</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

注意 <code>mHaptic.vibrate()</code> ，从方法名称上可以看出这个方法和震动相关，所以现在只要搞清楚该方法的具体实现即可。继续往下追，从该类变量的声明 <code>private HapticFeedback mHaptic = new HapticFeedback();</code> 可以看到，这个方法属于一个名叫 <code>HapticFeedback</code> 的类。而 <code>HapticFeedback</code> 类存在于 <code>packages/apps/Phone/src/com/android/phone/HapticFeedback.java</code> 文件中。顺利找到 <code>vibrate()</code> 的定义：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>HapticFeedback.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">vibrate</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(!</span><span class="n">mEnabled</span> <span class="o">||</span> <span class="o">!</span><span class="n">mSettingEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="n">mVibrator</span><span class="o">.</span><span class="na">vibrate</span><span class="o">(</span><span class="n">mHapticPattern</span><span class="o">,</span> <span class="n">NO_REPEAT</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

其中的判断无需关心，通过名称可以看出应该是和震动设定有关。之后调用了另一个类 <code>Vibrator</code> 的 <code>vibrate</code> 方法。该方法接受两个参数，同样通过名称看得出第一个参数有关模式，第二个参数有关是否重复。去 <code>Vibrator</code> 类里看看，该类存在于 <code>frameworks/base/core/java/android/os/Vibrator.java</code> 文件中，找到 <code>vibrate</code> 的实现<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Vibrator.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Vibrate with a given pattern.</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * &lt;p&gt;</span>
</span><span class="line"><span class="cm"> * Pass in an array of ints that are the durations for which to turn on or off</span>
</span><span class="line"><span class="cm"> * the vibrator in milliseconds.  The first value indicates the number of milliseconds</span>
</span><span class="line"><span class="cm"> * to wait before turning the vibrator on.  The next value indicates the number of milliseconds</span>
</span><span class="line"><span class="cm"> * for which to keep the vibrator on before turning it off.  Subsequent values alternate</span>
</span><span class="line"><span class="cm"> * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.</span>
</span><span class="line"><span class="cm"> * &lt;/p&gt;&lt;p&gt;</span>
</span><span class="line"><span class="cm"> * To cause the pattern to repeat, pass the index into the pattern array at which</span>
</span><span class="line"><span class="cm"> * to start the repeat, or -1 to disable repeating.</span>
</span><span class="line"><span class="cm"> * &lt;/p&gt;</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @param pattern an array of longs of times for which to turn the vibrator on or off.</span>
</span><span class="line"><span class="cm"> * @param repeat the index into pattern at which to repeat, or -1 if</span>
</span><span class="line"><span class="cm"> *        you don&#39;t want to repeat.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">vibrate</span><span class="o">(</span><span class="kt">long</span><span class="o">[]</span> <span class="n">pattern</span><span class="o">,</span> <span class="kt">int</span> <span class="n">repeat</span><span class="o">)</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">mService</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Failed to vibrate; no vibrator service.&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="c1">// catch this here because the server will do nothing.  pattern may</span>
</span><span class="line">    <span class="c1">// not be null, let that be checked, because the server will drop it</span>
</span><span class="line">    <span class="c1">// anyway</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">repeat</span> <span class="o">&lt;</span> <span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mService</span><span class="o">.</span><span class="na">vibratePattern</span><span class="o">(</span><span class="n">pattern</span><span class="o">,</span> <span class="n">repeat</span><span class="o">,</span> <span class="n">mToken</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Failed to vibrate.&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArrayIndexOutOfBoundsException</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

从注释可以了解到该震动模式的意义，第一个值为等待开启震动的时间，第二个为开启震动后持续的时间，之后交替数字为关闭震动的时间以及开启震动的时间。有兴趣可以追到 <code>frameworks/base/services/java/com/android/server/VibratorService.java</code> 看看 <code>vibratePattern</code> 的实现。不过我们已经找到需要的一切了。OK，再次回到 <code>packages/apps/Phone/src/com/android/phone/HapticFeedback.java</code> 文件中查看传入的震动模式设置，很简单搜到以下处理：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>HapticFeedback.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">     <span class="n">mEnabled</span> <span class="o">=</span> <span class="n">enabled</span><span class="o">;</span>
</span><span class="line">     <span class="k">if</span> <span class="o">(</span><span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">         <span class="n">mVibrator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vibrator</span><span class="o">();</span>
</span><span class="line">         <span class="k">if</span> <span class="o">(!</span><span class="n">loadHapticSystemPattern</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getResources</span><span class="o">()))</span> <span class="o">{</span>
</span><span class="line">             <span class="n">mHapticPattern</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[]</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="n">DURATION</span><span class="o">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">DURATION</span><span class="o">,</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">DURATION</span><span class="o">};</span>
</span><span class="line">         <span class="o">}</span>
</span><span class="line">         <span class="n">mSystemSettings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Settings</span><span class="o">.</span><span class="na">System</span><span class="o">();</span>
</span><span class="line">         <span class="n">mContentResolver</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">();</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

首先尝试从系统设置里载入震动模式，否则使用默认的 <code>new long[] {0, DURATION, 2 * DURATION, 3 * DURATION};</code> 模式。其中 <code>DURATION</code> 等于10，所以默认的模式为等待0秒，震10毫秒，停20毫秒，之后震动30毫秒。注释掉 <code>if (!loadHapticSystemPattern(context.getResources()))</code> 判断，然后将默认震动模式改为 <code>{0, 6*DURATION, 1 * DURATION, 6 * DURATION};</code> 试试效果。执行：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>编译  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mmm packages/apps/Contacts/&amp;&amp;mmm packages/apps/Phone/
</span></code></pre></td></tr></table></div></figure></notextile></div>

然后将编译好的apk文件推到手机上，震感明显，说明修改正确<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>。现在只需要去xml文件中找到震动模式的设置部分，相应修改就可以了。最后找到 <code>frameworks/base/core/res/res/values/config.xml</code> 文件，其中有一部分为：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>设置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="c">&lt;!-- Vibrator pattern for feedback about touching a virtual key --&gt;</span>
</span><span class="line"><span class="nt">&lt;integer-array</span> <span class="na">name=</span><span class="s">&quot;config_virtualKeyVibePattern&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;item&gt;</span>0<span class="nt">&lt;/item&gt;</span>
</span><span class="line">    <span class="nt">&lt;item&gt;</span>10<span class="nt">&lt;/item&gt;</span>
</span><span class="line">    <span class="nt">&lt;item&gt;</span>20<span class="nt">&lt;/item&gt;</span>
</span><span class="line">    <span class="nt">&lt;item&gt;</span>30<span class="nt">&lt;/item&gt;</span>
</span><span class="line"><span class="nt">&lt;/integer-array&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

是不是和之前看到的默认震动模式很像呢？最后，根据具体情况调了一个比较适中的值，任务完成。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 还有另外一个 <code>vibrate</code> 的实现，但是该实现只接受一个参数，所以不是我们要找的目标。
</p>


<p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> 修改震动设置后，必须同时编译Contact和Phone，并同时更新到手机上才能生效，具体原因不明白，感觉很怪异。
</p>



</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/09/24/diao-jie-androidbo-hao-jian-pan-de-zhen-dong-xiao-guo/'>http://blog.xeonxu.info/blog/2012/09/24/diao-jie-androidbo-hao-jian-pan-de-zhen-dong-xiao-guo/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[调节Android拨号键盘的震动效果]]></title>
      <link>http://blog.xeonxu.info/blog/2012/09/24/diao-jie-androidbo-hao-jian-pan-de-zhen-dong-xiao-guo/</link>
      <pubDate>2012-09-24T21:48:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/09/24/diao-jie-androidbo-hao-jian-pan-de-zhen-dong-xiao-guo</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
本来使用 <code>Org-Mode</code> 来写博客就很舒服了， 插入图片也很容易，使用
</p>

<pre class="example">[[图片地址]]
</pre>

<p>
的方法就可以。但是对于编写需要插入截图的文档来说，就得先截图，然后保存图片到相应位置，之后才能使用上面的方法来插入图片。
</p>
<p>
有幸，前面搜索资料时发现了一篇文章<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，其中介绍了一种更加自动化的方式在 <code>Org-Mode</code> 中插入截图。试用后觉得非常方便，不过我又做了一些改动，以适应Mac OSX。同时为使用Octopress，重新设置了图片目录，如下：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>my-screenshot  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="nf">defun</span> <span class="nv">my-screenshot</span> <span class="p">()</span>
</span><span class="line">  <span class="s">&quot;Take a screenshot into a unique-named file in the current buffer file</span>
</span><span class="line"><span class="s">directory and insert a link to this file.&quot;</span>
</span><span class="line">  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">setq</span> <span class="nv">filename</span>
</span><span class="line">        <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">make-temp-name</span> <span class="s">&quot;./&quot;</span><span class="p">)</span> <span class="s">&quot;.png&quot;</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">setq</span> <span class="nv">fullfilename</span>
</span><span class="line">                 <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">file-name-directory</span> <span class="p">(</span><span class="nf">buffer-file-name</span><span class="p">))</span> <span class="s">&quot;images/blog/&quot;</span> <span class="nv">filename</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">file-accessible-directory-p</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">file-name-directory</span>
</span><span class="line">                                            <span class="p">(</span><span class="nf">buffer-file-name</span><span class="p">))</span> <span class="s">&quot;images/blog/&quot;</span><span class="p">))</span>
</span><span class="line">      <span class="nv">nil</span>
</span><span class="line">    <span class="p">(</span><span class="nf">make-directory</span> <span class="s">&quot;images/blog/&quot;</span> <span class="nv">t</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">call-process-shell-command</span> <span class="s">&quot;screencapture&quot;</span> <span class="nv">nil</span> <span class="nv">nil</span> <span class="nv">nil</span> <span class="nv">nil</span> <span class="s">&quot;-i&quot;</span> <span class="p">(</span><span class="nf">concat</span>
</span><span class="line">                                                            <span class="s">&quot;\&quot;&quot;</span> <span class="nv">fullfilename</span> <span class="s">&quot;\&quot;&quot;</span> <span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">insert</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;[[./images/blog/&quot;</span> <span class="nv">filename</span> <span class="s">&quot;]]&quot;</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">org-display-inline-images</span><span class="p">)</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


另外，还需要给 <code>org-octopress.el</code> 打个补丁，否则发布文档中图片的索引会有问题，造成某些页面下无法显示：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>org-octopress.el补丁  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gh">diff --git a/org-octopress.el b/org-octopress.el</span>
</span><span class="line"><span class="gh">index 7f87742..36eed86 100644</span>
</span><span class="line"><span class="gd">--- a/org-octopress.el</span>
</span><span class="line"><span class="gi">+++ b/org-octopress.el</span>
</span><span class="line"><span class="gu">@@ -961,7 +961,7 @@ OPT-PLIST is the export options list.&quot;</span>
</span><span class="line">          (if (string-match &quot;^file:&quot; desc)
</span><span class="line">              (setq desc (substring desc (match-end 0)))))
</span><span class="line">        (setq desc (org-add-props
</span><span class="line"><span class="gd">-                      (concat &quot;&lt;img src=\&quot;&quot; desc &quot;\&quot; alt=\&quot;&quot;</span>
</span><span class="line"><span class="gi">+                      (concat &quot;&lt;img src=\&quot;/&quot; desc &quot;\&quot; alt=\&quot;/&quot;</span>
</span><span class="line">                               (file-name-nondirectory desc) &quot;\&quot;/&gt;&quot;)
</span><span class="line">                       &#39;(org-protected t))))
</span><span class="line">       (cond
</span><span class="line"><span class="gu">@@ -1960,7 +1960,7 @@ PUB-DIR is set, use this as the publishing directory.&quot;</span>
</span><span class="line">   &quot;Create image tag with source and attributes.&quot;
</span><span class="line">   (save-match-data
</span><span class="line">     (if (string-match &quot;^ltxpng/&quot; src)
</span><span class="line"><span class="gd">-       (format &quot;&lt;img src=\&quot;%s\&quot; alt=\&quot;%s\&quot;/&gt;&quot;</span>
</span><span class="line"><span class="gi">+       (format &quot;&lt;img src=\&quot;/%s\&quot; alt=\&quot;/%s\&quot;/&gt;&quot;</span>
</span><span class="line">                 src (org-find-text-property-in-string &#39;org-latex-src src))
</span><span class="line">       (let* ((caption (org-find-text-property-in-string &#39;org-caption src))
</span><span class="line">             (attr (org-find-text-property-in-string &#39;org-attributes src))
</span><span class="line"><span class="gu">@@ -1972,7 +1972,7 @@ PUB-DIR is set, use this as the publishing directory.&quot;</span>
</span><span class="line"> &lt;p&gt;&quot;
</span><span class="line">                    (if org-par-open &quot;&lt;/p&gt;\n&quot; &quot;&quot;)
</span><span class="line">                    (if label (format &quot;id=\&quot;%s\&quot; &quot; (org-solidify-link-text label)) &quot;&quot;)))
</span><span class="line"><span class="gd">-       (format &quot;&lt;img src=\&quot;%s\&quot;%s /&gt;&quot;</span>
</span><span class="line"><span class="gi">+       (format &quot;&lt;img src=\&quot;/%s\&quot;%s /&gt;&quot;</span>
</span><span class="line">                src
</span><span class="line">                (if (string-match &quot;\\&lt;alt=&quot; (or attr &quot;&quot;))
</span><span class="line">                    (concat &quot; &quot; attr )
</span></code></pre></td></tr></table></div></figure></notextile></div>


修改完成以后，就可以在编写Org文档的时候执行 <code>M-x my-screenshot</code> 进行抓屏了，抓好的图片存放在当前目录的 <code>./image/blog/</code> 下，命名使用随机命名方式。最后，这个脚本还会开启Emacs <code>Org-Mode</code> 的内嵌图片显示，达到图文并茂的效果。如果不需要该功能，可以使用快捷键 <code>C-c C-x C-v</code> 来关闭。
</p>
<p>
截个之前<a href="#fig-Vim">配置好的Vim</a>，看看效果吧!
</p>

<div id="fig-Vim" class="figure">
<p><img src="http://blog.xeonxu.info/./images/blog/./90530rcx.png" alt="./images/blog/./90530rcx.png" /></p>
<p>Vim with taglist</p>
</div>

<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://dreamrunner.org/wiki/public_html/Emacs/org-mode.html">http://dreamrunner.org/wiki/public_html/Emacs/org-mode.html</a>
</p>
</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/09/23/guan-yu-zai-org-modexia-fang-bian-cha-ru-jie-tu-de-fang-fa/'>http://blog.xeonxu.info/blog/2012/09/23/guan-yu-zai-org-modexia-fang-bian-cha-ru-jie-tu-de-fang-fa/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[关于在Org-Mode下方便插入截图的方法]]></title>
      <link>http://blog.xeonxu.info/blog/2012/09/23/guan-yu-zai-org-modexia-fang-bian-cha-ru-jie-tu-de-fang-fa/</link>
      <pubDate>2012-09-23T23:58:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/09/23/guan-yu-zai-org-modexia-fang-bian-cha-ru-jie-tu-de-fang-fa</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
  </channel>
</rss>
