<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <description><![CDATA[不停地疯]]></description>
    <title><![CDATA[不停地疯]]></title>
    <link>http://blog.xeonxu.info/</link>
    <pubDate>2014-08-07T22:37:02+08:00</pubDate>

    
    <item>
      <description>
	<![CDATA[
		 <p>之前参照<a href="http://bbs.router.com.cn/thread-45681-1-1.html">ROS透明经济翻墙</a>在家中搭建了无痛网络，但是期间在解决DNS污染问题上纠缠了一阵，现简单总结一下所遇到的问题。原因有几个方面：</p>

<ol>
  <li>在配置ROS路由器时，本地流量不受标记影响，所以路由器本地是不走vpn的。而电脑DNS之前指定的是ROS自带的DNS，所以虽然在ROS上指定了上级DNS为Google DNS，但由于ROS本地没走vpn，所以域名仍然会被污染。</li>
  <li>后来在另外一台路由器上使用了dnsmasq，但是由于沿用了之前配置，所以忘了将114DNS从主查询DNS中删除，更关键在于，污染的域名没有强制使用Google DNS进行解析，所以，虽然添加了Google DNS作为上级查询，但是114DNS的反馈要快好多，所以使用中还是会遇到污染。</li>
  <li>接下来，尝试使用了openDNS的非标端口，解决污染有效，但是openDNS不够稳定，所以继续探索。</li>
  <li>最后，经过多次尝试后才发现是第一步中所遇到的污染问题是由于ROS本地流量标记的问题。于是还是决定使用dnsmasq来解决，最后在配置文件中将被污染的域名设置为强制走Google DNS，这样在ROS自动路由的情况下，Google DNS走vpn，被污染的域名就可以从Google DNS获得干净的ip地址了。这样就解决了污染问题。不过这个解决方案仍然需要人为维护，至少需要维护dnsmasq配置文件中被污染的域名列表。</li>
</ol>

<p>最近，看到shadowsocks的作者<a href="https://twitter.com/clowwindy">@clowwindy</a>又搞出了个<a href="https://github.com/clowwindy/ChinaDNS-C">china-DNS</a>的玩意，看上去非常不错，可以很傻瓜免维护的解决DNS，准备有时间再搞一搞。</p>


		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2014/08/06/rosxia-tong-guo-vpnjie-jue-dnswu-ran-suo-yu-dao-de-wen-ti/'>http://blog.xeonxu.info/blog/2014/08/06/rosxia-tong-guo-vpnjie-jue-dnswu-ran-suo-yu-dao-de-wen-ti/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[简单总结ROS下通过VPN解决DNS污染时所遇到的问题]]></title>
      <link>http://blog.xeonxu.info/blog/2014/08/06/rosxia-tong-guo-vpnjie-jue-dnswu-ran-suo-yu-dao-de-wen-ti/</link>
      <pubDate>2014-08-06T22:30:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2014/08/06/rosxia-tong-guo-vpnjie-jue-dnswu-ran-suo-yu-dao-de-wen-ti</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>不经意间，距离上一次更新博客，已经又一年过去。至于为何这么长时间没有更新博客，个人原因可能是最万能的一种回答方式吧。一方面工作的繁忙，加上家中新添的一员，各个方面都影响着懒惰的自己改变着现有的状态。儿子在这一年内成长很快，突然间牙齿就已经14颗了，爸爸妈妈也叫的很欢。这一年间，我学会了德淘奶粉，学会了日淘家用品。为了小孩，曾经看似无关的事情，现在也算小有经验了。</p>

<p>其实在这一年里自己做的其他事情也蛮多，只是还不那么出彩罢了。数下来，林林总总十几件，不过相对近且重要的还是以下几件：</p>

<ol>
  <li>买了routerboard 450G，规整了家里网络。将家内的网线口都通上了数据，另外实现了全局自动科学上网。</li>
  <li>熬夜观看了04年的WWDC，热血异常，随后注册了iOS开发者计划。</li>
  <li>来了场说走就走的旅行，去香港购入了Retina MacBook Pro，拥有了人生中第一款pro级mac设备。</li>
  <li>域名从狗爹的转移到了google domain，不用再忍受狗爹的“优质”用户体验。</li>
  <li>开始正式使用dropbox和1password，加强个人账户的安全性。</li>
  <li>写了些小工具，改进工作流，提升工作生活的效率。</li>
  <li>自己动手改造了703N路由器为16M双Flash＋64M内存。</li>
</ol>

<p>另外，总觉得长时间不更新博客不符合个人行事风格，而且域名也续费到了2017年，说什么也不该浪费，但一直不知道该从什么时候开始恢复。借着新电脑的到来，重新配置了octopress环境，再次开始博客的写作。考虑之前使用org文件写博客只能使用电脑(因为要用emacs)，操作太局限，现尝试使用dropbox同步博客文章，并使用markdown格式进行写作。希望以后至少不会用没空之类理由来搪塞不更新博客的理由，毕竟markdown这种格式兼容性相对较好，iOS设备上也能找到很多工具进行编辑，应该勉强能够随时随地写博客了。</p>

<p>此外，随着儿子的成长，我希望未来能有更多的时间陪伴家人。同时，也希望能够通过自己的努力，在能预见的未来里，为家人带来更多的幸福。</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2014/08/04/you-yi-nian/'>http://blog.xeonxu.info/blog/2014/08/04/you-yi-nian/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[又一年]]></title>
      <link>http://blog.xeonxu.info/blog/2014/08/04/you-yi-nian/</link>
      <pubDate>2014-08-04T13:01:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2014/08/04/you-yi-nian</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
最近在appstore上花钱花得比较凶，感觉好的以及之前想买的软件统统都入了手。那天在头版看到有一款名叫Limbo的游戏被编辑推荐了，点进去看效果似乎不错，于是也就顺带入了手。而在下载并体验了这款游戏之后，我确定我已经是它的fans了，在心目中的地位与马里奥以及Braid平起平坐。
</p>
<p>
说实话，Limbo是什么意思，我没有一点概念，通过词典可以查到大概是遗忘之地以及地狱边境的意思。据说这个词在盗梦空间中也有出现，就是最后梦境崩塌之后意识所存留的地方。在这款游戏中，Limbo似乎就是本意，令人绝望的地域边境。游戏全篇使用黑白渲染，你没看错，全篇只有黑白色调，黑白胶片般的感觉！游戏中没有一句对话和多余的提示，甚至如何操作也需要在游戏中自己探索。游戏主角是一个小男孩，睁着大大的眼睛，在草丛中醒来后就是一个人，对身边的世界说不上陌生，但绝谈不上熟悉。随着游戏情节的发展，逐渐可以发现小男孩所处的这个世界是一个到处充满着险恶的地方，一路上坏小孩们，诡异的大蜘蛛，巨石，迷惑人的花，沼泽，电锯等等都会突如其来的出现。整个游戏过程就像在看一部黑色的童话，黑得很压抑很绝望，怀着仅有的一丝希望一路向前寻找着出路。
</p>
<p>
Limbo属于横版动作解谜游戏，每个关卡设计的非常巧妙，基本上都要动一番脑筋，包括运用器械知识以及物理知识等等。而且这款游戏有一个很有意思的设定，那就是如果解谜失败主角挂了之后，游戏会重新从最后的一个解谜点开始，这才使得整个游戏和解谜的过程显得不那么绝望，让人有不断尝试以及通关的欲望。同时iOS版的软件支持icloud同步游戏进度，像我这样出门iPhone，回家iPad的人来说非常方便。
</p>
<p>
Limbo的游戏时间并不长，初次玩的话估计3个小时可以搞定，在玩过一遍的情况下1个多小时差不多。好在游戏拥有成就系统，而且这些成就并不容易拿到，所以使得这款游戏的耐玩度有一定提升。我在拿到这款游戏之后，花了大概3个小时完成了整个游戏，而且只达成2个成就。在最后，游戏的主角似乎找到了自己的妹妹，但是从叙事上还存在一些不确定和伏笔，也许是为了续集作铺垫。就像常说的1000个读者眼中有1000个哈姆雷特，对于这款游戏结局的解读，每个人也有不同的说法。具体如何解读，只有自己玩了之后才知道。总体来说，这款游戏绝对值得一玩，绝对5星作品。游戏爱好者自然不用说，但即便你是UI/UX，程序员，这款游戏也绝对有足够的资本让你眼前一亮，将黑白玩的如此出彩的不多。
</p>

<p>
<img src="http://blog.xeonxu.info/./images/blog/./1102O3a.png" alt="./images/blog/./1102O3a.png" />
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./1102bBh.png" alt="./images/blog/./1102bBh.png" />
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/07/14/limbodi-yu-bian-jing/'>http://blog.xeonxu.info/blog/2013/07/14/limbodi-yu-bian-jing/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[Limbo地狱边境]]></title>
      <link>http://blog.xeonxu.info/blog/2013/07/14/limbodi-yu-bian-jing/</link>
      <pubDate>2013-07-14T00:10:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/07/14/limbodi-yu-bian-jing</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
Mac上我一直使用<a href="http://www.alfredapp.com">alfred</a> 快速索引文件以及快速操作什么的，而Windows上则没有找到一款比较好用的类似软件。加上Windows半残废的查找功能，每天在上面工作真是有种自虐的感觉。后来使用免费的<a href="http://www.voidtools.com">everything</a> ，查找文件快捷方便，弥补了Windows查找功能的不足。但是everything不能像alfred一样对搜索的结果直接进行操作，而且选择结果后everything也不会自动退出，经常造成多个窗口飘在桌面上，感觉不是很爽。直到最近，我在查找everything配置的过程中发现了另外一款Windows上的全盘索引软件：<a href="http://www.listary.com">Listary</a> ，借助它的索引和查找功能，不仅可以很方便的快速定位文件，而且可以对结果进行后续操作，有点alfred的影子，于是立马下载安装试用。
</p>
<p>
Listary安装好后直接就运行了，运行后会有一段简单的使用指引，跟着它做可以快速了解Listary的主要功能。第一次安装运行后可能会对全盘进行索引，需要花点时间，但是速度还是比较快的，特别是相比Windows自带的那个残废来说。Listary属于后台程序，默认使用Win＋s激活，也可以自行设置快捷键。应用图标在右下角状态栏中可以找到，通过应用图标可以查看版本信息，查看帮助，或者设置软件。如果选择进入设置菜单，我们可以看到Listary目前支持的所有功能，如图：
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./951HFA.png" alt="./images/blog/./951HFA.png" />
</p>
<p>
可以看到Listary支持快速切换，模糊导航以及第三方文件管理器。这些都非常有用，除了模糊查找外，快速切换也是很有用的，可以非常方便的在打开文件对话框中快速定位到刚才打开的文件夹，而不用一层层的去选取进入，大大提高工作效率。此外，工程也是一个比较有用的概念。简单说，这个功能可以将一些常用的目录定义为一个搜索前缀，然后搜索时先打相应的搜索前缀，那么之后的搜索内容都会在之前定义的目录中去查找了。这比较适合我这种懒人，我一般将所有文档都放在一个固定目录下，但是却懒得整理，使用工程功能将该目录设定为doc前缀，之后搜索文档时只需要快捷键呼出Listary并敲入doc，然后空格并输入需要查找的文档名称就可以了。结果的展现只是一瞬间的事情，方便至极。中文名称？没问题！直接拼音缩写就行了。
</p>
<p>
另外，Listary也支持everything的数据库，据说速度会更快一些，但是我没有发现差别，出于功能兼容方面的考虑，我使用Listary自带的索引引擎。外观功能据说在下个版本会提供主题的设置，目前只是简单的字体大小设置而已，以后可以关注下。可以说这个软件目前可以设置的功能就上图这么些了，没什么特别复杂的内容。
</p>
<p>
对搜索结果的二次操作时alfred的一大特点，Listary对此也有支持，只是功能稍弱。默认是在搜索结果上按方向右键进入（结果如图），而且目前不能用户自定义该触发热键（喂，作者你就不能设置一个手指不用移这么远的按键么？）。未来也会支持对搜索结果的快捷键操作，目前只在开发测试版中可以用到。搜索快捷键使用vim的风格，通过ctrl键触发和关闭。在快捷键模式中可以通过数字直接选择结果，或者使用u/d键上下翻页，或者使用alt＋数字键进入结果的二次操作功能。
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./951UPG.png" alt="./images/blog/./951UPG.png" />
</p>
<p>
说到这里相信各位也有点感兴趣了吧？这款软件分免费版和付费版两个版本，免费版可以在非商业环境下使用，有部分功能限制，比如之前说的工程功能以及二次操作功能等。我为了用上完整功能，从异次元软件代理处购买了该软件的license。好在该软件的license是终身的，也就是说之后的所有版本升级都可以免费得到，同时一个license可以支持三台电脑安装，符合我上班工作的需要。
</p>
<p>
除此之外，Listary还有以下缺点：
</p>
<ol>
<li>相比alfred没有自定义脚本的功能
</li>
<li>某些特定场景下快速切换无效
</li>
<li>不支持索引Outlook等内容（这是巨硬的问题，苹果至少有spotlight做内容索引），所以邮件搜索还得靠残废的Windows Search
</li>
<li>快捷键支持不是很完美，特别是开发者还是vimer，所以快捷键都是vim风格的，没有emacs风格用着爽
</li>
<li>快捷键模式中进入二次操作界面后不能使用搜索快速定位功能选项
</li>
<li>存在一些诡异的Bug
</li>
</ol>

<p>
好在软件的开发者还比较活跃，隔几天会有一个新版本发布，而且也可以去官方论坛上提一些改进要求什么的。目前对我来说，这个软件的存在至少让我在windows上工作时多少有点在mac下的感觉。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/07/02/windowsshang-de-alfred/'>http://blog.xeonxu.info/blog/2013/07/02/windowsshang-de-alfred/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[windows上的alfred]]></title>
      <link>http://blog.xeonxu.info/blog/2013/07/02/windowsshang-de-alfred/</link>
      <pubDate>2013-07-02T23:09:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/07/02/windowsshang-de-alfred</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
一般来说，常用的电池电量的计算方法有两种：一种是使用叫做库仑计的ADC器件对电池的电流进行时间积分统计，然后除以电池的总毫安时容量，从而得出电池当前的电量；而另一种是使用电压采样ADC获取电池当前的端电压，并通过软件计算出电池的开路电压，然后根据电池的电压－容量表<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>来对应查找到当前电压下的电池容量。显而易见，从理论上来讲前一种方法更加准确。但在实际上，前一种方式往往受限于库仑计设备的采样精度以及程序员编写驱动程序的水平；同时，在硬件方面也增加了器件成本，应用上并没多少优势。像Marvell的88pm860x
PMIC芯片中是有库仑计器件的，实际使用中统计值和实际偏差较大，需要在驱动程序中通过其它办法对所得值进行补偿校准后才有一定的使用价值。而高通的PM8029
PMIC芯片中则没有库仑计功能，驱动中的逻辑也比较单纯，仅仅是简单的获取VBATT值，并通过电流和电池内阻对VBATT进行校正后得到电池开路电压，然后根据电压－容量表查到当前电池的电量。使用对比下来，高通平台所使用的这种方法简单且有效，只需要根据不同电池制作一份电压－容量表即可完成电池的电量计算。
</p>

<p>
但是，使用电压－容量表也不是没有缺点的，为了说得更清楚点，这里先简单介绍一下电压－容量表。这里所说的电压－容量表中的“电压”指的是电池的开路电压OCV，而不是直接由ADC所采样到的电池端的原生电压VBATT的值。学过中学物理的可以知道，所有电池是有阻抗的，一般我们人为将其抽象为电池内阻，因此一个电池通常可以被抽象为一块原电池和电池内阻的串联体。这样，如果电池有电流流出的话，输出的电流越大，通过欧姆定律可以得出电池内阻的分压也会越大。这意味着在输出电流状态下，外部测得的电池端电压就会比实际开路电压小；相反，如果电池在充电中，电流方向和放电时相反，电流为流入电池。此时测得的端电压就会比开路电压略大。简而言之，从外部所测的的电池端电压很不稳定，它是电池内阻、电流以及温度等因素的函数。因此，开路电压的概念就变得重要了，如果继续基于之前所说的抽象电池来讲，开路电压是在电路中没有电流回路的情况下测得的电池端电压，也即是原电池的端电压。计算开路电压时，一般会估算一个电池内阻值，然后根据欧姆定律使用ADC采样到的电池端电压以及电池电流来计算出开路电压。至于电压－容量对应表，则是基于另外一个假设：电池的不同电量都对应一个唯一的电压值。但是，假设毕竟是假设，事实情况总要复杂一些。先不提容量与电压的非线性关系，不同供应商提供的不同型号的电池，其电压－容量特性都是不一致的，而且有时会出现某一阶段电压特别耐用的情况，这直接导致有时计算得到的电压－容量表中会出现同一电压对应多个容量的情况。如下图中，随着时间的增长，有时电压会保持比较平稳的状态。加上电压－电量表计算时一般都是使用供应商提供的电池充放电数据，这种数据一般使用比较标准的电流对电池进行恒流充放电后统计得到的，和手机实际使用的情况存在一定差异，而且数据采样设备在精度上也有较大的差别。这也造成了如果直接使用供应商数据计算得到的电压－容量表，在实际使用时效果不够好的情况。针对这种情况，人为会对所得结果做一些补偿和修正。但是这种问题一般都要花比较长的时间测试后才有可能发现，而且补偿的效果同样需要花费较长的时间才能验证。那么能不能通过简单的方法有效避免这类问题呢？
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./1656aA2.png" alt="./images/blog/./1656aA2.png" />
</p>

<p>
考虑到数据采样设备以及环境的差异问题，如果直接使用手机内部的ADC采样电池数据，然后使用这个数据计算电量表会不会好一点？实际验证下来，这种方法确实有一定的效果改进。采样之前，将手机环境至于标准功耗模式（最大亮度常亮，循环播放MP3），然后再进行采样，这样可以最大限度的模拟手机使用过程中电池的实际情况。采样的数据包括放电时长以及电池开路电压。至于电量表的计算，在这种情况下更为简单。因为在采样过程中手机处于标准功耗模式中，可以近似认为电流恒定，所以电量的损耗和时间是函数关系。将采样全程时长分为100份，然后分别得到每份所对应的电压值，电量表就做出来了。这种方法有个很大的优势，那就是思路简单，很适合脚本化操作。采样脚本外加计算电量表脚本，使用bash一会儿就可以搞定。
</p>

<p>
可是，出于之前所说的一个问题，电池的电量和电压并没有一个绝对的对应关系，极端时甚至会出现得到的电量表中同一个电压值对应了多个电量。为了解决这个问题，我们引入了数学方法，使用样条差值的办法拟合采样的数据点，然后在拟合的曲线上重新进行电压电量对应关系的获取。使用了这个方法之后，电池电量方面的问题少了很多。而且由于使用了时间分割电量，所以在实际使用中，每格电量的使用时间都很接近，符合用户对电量的认知。拟合曲线的效果如图：
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/./1656N2v.png" alt="./images/blog/./1656N2v.png" />
</p>

<p>
改进后的电量表采样及计算脚本在：<a href="https://github.com/xeonxu/battery_analyzer/blob/spline_2step/data_analysis.sh">battery analyzer</a> 。脚本中的样条差值部分使用了octave程序实现，效果蛮不错的。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 指开路电压与电池容量的对应关系表。
</p>




</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/07/02/jian-shu-yi-zhong-dian-chi-dian-liang-biao-de-qu-de-fang-fa/'>http://blog.xeonxu.info/blog/2013/07/02/jian-shu-yi-zhong-dian-chi-dian-liang-biao-de-qu-de-fang-fa/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[简述一种电池电量表的取得方法]]></title>
      <link>http://blog.xeonxu.info/blog/2013/07/02/jian-shu-yi-zhong-dian-chi-dian-liang-biao-de-qu-de-fang-fa/</link>
      <pubDate>2013-07-02T21:49:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/07/02/jian-shu-yi-zhong-dian-chi-dian-liang-biao-de-qu-de-fang-fa</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
平时单位里Linux下使用wine＋sourceinsight查看代码，用emacs写代码。最近公司搞正版化，自然sourceinsight也就不能再使用了，本想自定义一下emacs做类似功能，但苦于自己三脚猫的Lisp，加上之前的配置有点杂乱，所以想着先用vim顶两天，然后再自己抽空重构一下emacs的配置结构和功能，顺便也能从vim那里偷点师。几天下来，vim也被我配置得可以替代sourceinsight大部分的功能，使用起来还算不错。推荐给同事们使用，也都很满意。这里简单讲讲我的配置思路。
</p>
<p>
对于工作中的编辑器，我有以下几个基本要求：
</p>
<ol>
<li>文件查找方便
</li>
<li>格式自动化
</li>
<li>自动补全
</li>
<li>符号跳转
</li>
<li>函数列表
</li>
<li>tab/buffer支持
</li>
<li>session保存
</li>
</ol>

<p>
对于第一个需求，我使用了有口皆碑的lookupfile插件，这个插件可以从tag文件中快速查找文件，也可以在自己生成的文件列表中查找。我自己是使用文件列表的方式来查找，速度同样很快。之前也有使用过另外一个类似功能的插件，ctrlp。但是这个插件第一次使用时都要将当前目录下的所有文件遍历一遍，对于大型项目来说，速度还是有点慢。所以ctrlp被我抛弃了；第二个需求，vim貌似原生支持就不赖，直接=就可以；第三个需求，我选择了强大的YouCompleteMe插件。YCM插件使用了Clang编译器做后端，可以在编写程序时快速的分析代码，提供准确的自动补全列表。对于第四个需求符号跳转，本来使用的是cscope，功能很强大也够用，但是修改文件后更新符号文件比较慢，所以经常也就懒得更新符号文件，导致跳转的地方经常有偏差。后来发现有个GNU global可以非常快速的更新符号文件，加上和现有的cscope插件可以很好的兼容，所以我也就换成了用GNU global做符号跳转支持了。同时，我还加入了hook在保存程序文件后自动调用global进行更新符号文件。从此以后就再也不用担心更新符号文件的问题了，保存文件后符号立马生效。第五个需求使用地球人都知道的taglist就好，绑定F8快捷弹出；第六个需求，vim同样原生支持，自己配个好用的快捷键就OK；最后一个需求很有用，vim原生也有支持，但是原生的session不支持tabbar状态的保存，于是我使用了xolox/vim-session这个插件。使用这个插件后，不但可以保存打开文件的状态，光标位置，查找上下文的状态，tabbar的状态也都可以完美保存。这样，在退出vim后，下次打开时还能快速回到上次关闭前的状态，就像在sourceinsight中重新开启工程一样。
</p>
<p>
除此之外，我还添加了一些辅助类插件，比如nerdtree，nerdcommenter，easymotion，powerline等，方便目录浏览，注释等操作。用的不多，但是在某些时候还是有点用的。插件装好之后还不是很顺手，要想方便使用，自己还做了些定制。其中我写了一个脚本，为了帮助快速得建立工程。脚本中从建立lookupfile所用的文件列表到生成更新global符号文件，全部一气呵成。另外，在配置文件中我还添加了几个hook，除了保存特定文件后自动更新符号文件得hook，还有退出vim后自动保存session的hook。最后，将常用功能都绑定到快捷键上，这样使用起来就省力多了。到此，半自动化的vim就算完成了。
</p>
<p>
配置好的内容可以在：<a href="https://github.com/xeonxu/vim_configs"> <code>https://github.com/xeonxu/vim_configs</code> </a> 找到，其中有两个分支，master对应Linux的版本，而macos对应Mac版本。两者的差别便是YCM中二进制文件的格式分别是对应两种系统单独编译的。由于YCM的特殊性，必须要使用最新版的vim才能正常运行，而各大系统的发行版中的vim版本都不是很新，所以需要自己通过vim源代码编译一个才行，这算是唯一的遗憾了。公司里我写了个一键安装脚本，方便同事们的部署，大家使用标准的源码编译安装方式伺候即可。
</p>
<p>
作为一名emacser，跑来研究vim配置说起来也挺难为情。不过配置过程中给我印象最深的是vim的插件配置起来都挺方便，基本都是设置几个变量就好。加上vundle这个插件，很容易让人沉浸在插件的世界里。另外就是vim的启动速度确实快，这让我们这些emacs用户嫉妒不已。还有，lookupfile插件的思路蛮好，emacs上应该可以实现个更好的。另外下次配置emacs时，也要坚持换用global做符号跳转支持了，因为实在是太快太方便了。根据程序员时髦指南的解释，同时使用emacs和vim的人应该烧死，所以我看我还是尽快搞定自己的emacs配置吧。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/05/14/gao-liao-ge-ban-zi-dong-hua-de-vim/'>http://blog.xeonxu.info/blog/2013/05/14/gao-liao-ge-ban-zi-dong-hua-de-vim/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[搞了个半自动化的Vim]]></title>
      <link>http://blog.xeonxu.info/blog/2013/05/14/gao-liao-ge-ban-zi-dong-hua-de-vim/</link>
      <pubDate>2013-05-14T22:48:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/05/14/gao-liao-ge-ban-zi-dong-hua-de-vim</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
由于最近项目中又有要求说要对手机自带的虚拟驱动光盘的内容做客户定制化，于是基于上篇文章中使用make系统动态构建ISO镜像文件的方法，我又加入了客制化脚本的支持。实现的方法很简单，思路是在make工程下规定一个目录专门做客制化目录，目录下包含以不同项目名称命名的子目录，而相应子目录下便是客户定制的具体内容；同时，每个项目子目录中还包含有一个客制化脚本，用于对光盘文件系统进行重命名或者删减的操作。
</p>
<p>
由于之前已经有了自动生成ISO文件的make系统，基于以上的思路实现下来，加入的代码并不多。首先是改造主makefile：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># Author: Zhiqiang Xu</span>
</span><span class="line"><span class="c"># Version: 1.2</span>
</span><span class="line"><span class="c"># Date: 2013.05.09</span>
</span><span class="line"><span class="c"># Change Log:</span>
</span><span class="line"><span class="c"># 1.1 Makefile to generate cdrom iso file. Only generate iso file without icon in default.</span>
</span><span class="line"><span class="c"># 1.2 Add script support to customize cdrom&#39;s contents.</span>
</span><span class="line">
</span><span class="line"><span class="nv">CDROM_FS</span>            <span class="o">?=</span> ./CDROM_OBJ
</span><span class="line">TARGET_CDROM        ?<span class="o">=</span> ./cdrom_install.iso
</span><span class="line">PRODUCT_DRIVERNAME  ?<span class="o">=</span> Phicomm
</span><span class="line">CDROM_ROOT          ?<span class="o">=</span> ./
</span><span class="line">
</span><span class="line">ICON_NAME       :<span class="o">=</span> <span class="s2">&quot;$(PRODUCT_DRIVERNAME).ico&quot;</span>
</span><span class="line">ORIGIN_ICON     :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>PRODUCT_DRIVERNAME<span class="k">)</span>/<span class="k">$(</span>ICON_NAME<span class="k">)</span>
</span><span class="line">CUSTOMIZE       :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>PRODUCT_DRIVERNAME<span class="k">)</span>
</span><span class="line">CUSTOMIZE_SCRIPT :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/custom.sh
</span><span class="line">AUTORUN_FILE     :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/autorun.inf
</span><span class="line">
</span><span class="line">all:<span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">    mkisofs -input-charset utf-8 -V <span class="s2">&quot;$(PRODUCT_DRIVERNAME) Driver&quot;</span> -J -r -l -v -o <span class="k">$(</span>TARGET_CDROM<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">    @rm -f <span class="k">$(</span>TARGET_CDROM<span class="k">)</span>
</span><span class="line">    @rm -rf <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">
</span><span class="line">cdrom_new:clean
</span><span class="line">    @mkdir -p <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">    @if <span class="o">[</span> -e <span class="k">$(</span>CUSTOMIZE<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class="line">    cp -rf <span class="k">$(</span>CUSTOMIZE<span class="k">)</span>/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>/; <span class="se">\</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">
</span><span class="line"><span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>:cdrom_new
</span><span class="line">    @if <span class="o">[</span> -e <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class="line">    cp -f <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/; <span class="se">\</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;[autorun]\r&quot;</span> &gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;icon=\&quot;\\$(ICON_NAME)\&quot;\r&quot;</span> &gt;&gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line">
</span><span class="line"><span class="k">$(</span>CDROM_FS<span class="k">)</span>:<span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>
</span><span class="line">    @cp -rf <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/driver/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">    @if <span class="o">[</span> -e <span class="k">$(</span>CUSTOMIZE_SCRIPT<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class="line">        sh <span class="k">$(</span>CUSTOMIZE_SCRIPT<span class="k">)</span> <span class="s2">&quot;$(CDROM_FS)&quot;</span>; <span class="se">\</span>
</span><span class="line">    <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

相较之前的版本，我在其中新增了两个变量 <code>CUSTOMIZE</code> 和 <code>CUSTOMIZE_SCRIPT</code> ，这两个变量分别用来指定不同项目所用的客制化目录和客制化脚本。注意， <code>ORIGIN_ICON</code> 变量的内容和原来相比也有变化，路径由原来的 <code>custom</code> 目录变为了相应的项目子目录，这样对于不同的项目来说也容易管理一些。另外，在 <code>cdrom_new</code> tag段，加入了拷贝客制化内容到iso文件系统的语句。对于主makefile最核心的修改实在最后一个tag段，也就是 <code>$(CDROM_FS)</code> 段的最后一句if判断，判断客制化脚本是否存在，如果存在，则以iso文件系统路径为参数执行该脚本。makefile的改动就这么些，接下来看客制化脚本 <code>custom.sh</code> 的内容。
</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/sh</span>
</span><span class="line"><span class="c"># Author: Zhiqiang Xu</span>
</span><span class="line"><span class="c"># Version: 1.0</span>
</span><span class="line"><span class="c"># Script which is used to customize contents of cdrom.</span>
</span><span class="line">
</span><span class="line"><span class="nv">SCRIPT_FILE</span><span class="o">=</span><span class="nv">$0</span>
</span><span class="line"><span class="nv">CDROM_FS</span><span class="o">=</span><span class="nv">$1</span>
</span><span class="line">
</span><span class="line">rm -f <span class="nv">$CDROM_FS</span>/PC_Modem_Drivers_Install_Help.pdf
</span><span class="line">rm -f <span class="nv">$CDROM_FS</span>/PHICOMM_USB_Drivers_Install_Help.pdf
</span><span class="line">
</span><span class="line"><span class="c">#Do not REMOVE!</span>
</span><span class="line">rm <span class="nv">$SCRIPT_FILE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
对于一般的项目，默认都是使用 <code>driver/</code> 目录下的内容作为驱动光盘的内容，其中默认包含两份中文pdf说明。但是对于外单项目来讲，肯定不能使用中文说明，那么我们就需要将其从光盘文件系统中删除。以上的脚本就做了这么一件事情，删除了光盘文件系统中的两份pdf文件。脚本最后将脚本自身从光盘文件系统中删除，否则最后生成的iso文件中还包含制作脚本，那将是一件很怪异可笑的事情。从makefile中看，客制化脚本会在生成ISO文件前一步执行，因此，客制化脚本的权限是相当大的，基本上可以实现你想对光盘文件系统执行的一切操作。
</p>
<p>
到此，客制化光盘的需求就完全解决了，前后实现起来也就10分钟时间。最后吐槽一遍，Android的make系统太复杂太慢，如果不是我之前在这个模块中直接使用传统make系统，对应这个简单的需求困怕也要多花费2-3倍的时间。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti/'>http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[再谈自动生成ISO文件的客制化问题]]></title>
      <link>http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti/</link>
      <pubDate>2013-05-13T22:37:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/05/13/zai-tan-zi-dong-sheng-cheng-isowen-jian-de-ke-zhi-hua-wen-ti</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
蔽厂为了方便用户在拿到手机后能够顺利安装手机的电脑驱动，将相应的驱动文件打包成一个iso，然后借助Linux Usb Gadget的支持，在手机连接到电脑后会虚拟出一个驱动光盘来。实际效果蛮不错，但是问题在于，将驱动文件打包为iso的过程基本都靠人工手动完成。这于我这样喜爱偷懒的人来说，是极不科学的。于是我考虑将打包iso文件的操作自动化起来，实现步骤考虑是这样的，首先写下制作iso文件的Makefile，然后通过Android的编译系统调用改Makefile，这样在每次编译生成Android系统镜像的时候，就会自动生成相应iso文件了。
</p>
<p>
为了命令行中生成iso文件，首先需要找到相应的命令行程序。这点对于linux系统来说一点不难，现成的mkisofs就可搞定。接下来，需要制定生成相应iso的命令参数。这点也不难，通过查看mkisofs的man帮助即可快速找到所需要的各种参数。最后我决定使用的命令为： <code>mkisofs -input-charset utf-8 -V "Android Driver" -J -r -l -v -o cdrom.iso cdrom_fs/</code> 。这其中，我指定使用utf-8的编码作为输入编码，使用Android Driver作为光盘的卷标，添加joliet格式和rock ridge支持，冗余输出，将 <code>cdrom_fs/</code> 目录下的所有内容生成为cdrom.iso文件。
</p>
<p>
有了基础命令行，就可以写Makefile了。我写好的Makefile如下，其中还添加了光驱icon的支持：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>makefile生成iso  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># Author: Zhiqiang Xu</span>
</span><span class="line"><span class="c"># Version: 1.1</span>
</span><span class="line"><span class="c"># Date: 2013.03.22</span>
</span><span class="line"><span class="c"># makefile to generate cdrom iso file. Only generate iso file without icon in default.</span>
</span><span class="line">
</span><span class="line"><span class="nv">CDROM_FS</span>            <span class="o">?=</span> ./CDROM_OBJ
</span><span class="line">TARGET_CDROM        ?<span class="o">=</span> ./cdrom_install.iso
</span><span class="line">PRODUCT_DRIVERNAME  ?<span class="o">=</span> Phicomm
</span><span class="line">CDROM_ROOT          ?<span class="o">=</span> ./
</span><span class="line">
</span><span class="line">ICON_NAME       :<span class="o">=</span> <span class="s2">&quot;$(PRODUCT_DRIVERNAME).ico&quot;</span>
</span><span class="line">ICON_PATH       :<span class="o">=</span>
</span><span class="line">ORIGIN_ICON     :<span class="o">=</span> <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/custom/<span class="k">$(</span>ICON_NAME<span class="k">)</span>
</span><span class="line">AUTORUN_FILE    :<span class="o">=</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/autorun.inf
</span><span class="line">
</span><span class="line">all:<span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">        mkisofs -input-charset utf-8 -V <span class="s2">&quot;$(PRODUCT_DRIVERNAME) Driver&quot;</span> -J -r -l -v -o <span class="k">$(</span>TARGET_CDROM<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">        @rm -f <span class="k">$(</span>TARGET_CDROM<span class="k">)</span>
</span><span class="line">        @rm -rf <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span><span class="line">
</span><span class="line">cdrom_new:clean
</span><span class="line">        @mkdir -p <span class="k">$(</span>CDROM_FS<span class="k">)</span>/<span class="k">$(</span>ICON_PATH<span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>:cdrom_new
</span><span class="line">        @if <span class="o">[</span> -e <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="o">]</span>; <span class="k">then</span> <span class="se">\</span>
</span><span class="line">        cp -f <span class="k">$(</span>ORIGIN_ICON<span class="k">)</span> <span class="k">$(</span>CDROM_FS<span class="k">)</span>/<span class="k">$(</span>ICON_PATH<span class="k">)</span>/; <span class="se">\</span>
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;[autorun]\r&quot;</span> &gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;icon=\&quot;$(ICON_PATH)\\$(ICON_NAME)\&quot;\r&quot;</span> &gt;&gt; <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>; <span class="se">\</span>
</span><span class="line">        <span class="k">fi</span>
</span><span class="line">
</span><span class="line"><span class="k">$(</span>CDROM_FS<span class="k">)</span>: <span class="k">$(</span>AUTORUN_FILE<span class="k">)</span>
</span><span class="line">        @cp -rf <span class="k">$(</span>CDROM_ROOT<span class="k">)</span>/driver/* <span class="k">$(</span>CDROM_FS<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


我在这个makefile中定义了几个默认变量，目的就是为了在没有定义这些变量的时候，能有一个默认值。同时假定用来生成iso的文件都存放在driver目录下，以及需要使用的光盘图标文件都存放在当前目录的custom目录下。如果发现有和 <code>$(PRODUCT_DRIVERNAME)</code> 同名的图标文件，则在光盘根目录中生成相应的autorun.inf文件，以显示相应的光盘图标。写好了makefile，直接执行make就可以生成相应的iso文件。不过我的目的是和Android编译系统联动，所以还需要再做些工作。
</p>
<p>
参考Android中kernel的编译方法，我编写了AndroidCdrom.mk文件，如下：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AndroidCdrom.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># Author: Zhiqiang Xu</span>
</span><span class="line"><span class="c"># Version: 1.1</span>
</span><span class="line"><span class="c"># Date: 2013.03.22</span>
</span><span class="line"><span class="c"># Android makefile to generate cdrom iso file</span>
</span><span class="line">
</span><span class="line"><span class="c"># cdrom variant output</span>
</span><span class="line"><span class="c"># Set Default name to Phicomm</span>
</span><span class="line"><span class="nv">PRODUCT_DRIVERNAME</span>      <span class="o">?=</span> Phicomm
</span><span class="line">PHICOMM_TARGET_CDROM    :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT<span class="k">)</span>/etc/cdrom_install.iso
</span><span class="line">PHICOMM_CDROM_ROOT      :<span class="o">=</span> device/qcom/msm7627a/cdrom/
</span><span class="line">PHICOMM_CDROM_FS        :<span class="o">=</span> <span class="k">$(</span>TARGET_OUT_INTERMEDIATES<span class="k">)</span>/CDROM_OBJ/
</span><span class="line">
</span><span class="line"><span class="k">$(</span>PHICOMM_TARGET_CDROM<span class="k">)</span>:
</span><span class="line">        <span class="k">$(</span>MAKE<span class="k">)</span> -C <span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_CDROM_ROOT<span class="k">))</span> <span class="nv">CDROM_FS</span><span class="o">=</span><span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_CDROM_FS<span class="k">))</span> <span class="nv">TARGET_CDROM</span><span class="o">=</span><span class="k">$(</span>abspath <span class="k">$(</span>PHICOMM_TARGET_CDROM<span class="k">))</span> <span class="nv">PRODUCT_DRIVERNAME</span><span class="o">=</span><span class="s2">&quot;$(PRODUCT_DRIVERNAME)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

内容相当简单，其实就是将Android编译系统中的一些环境变量和目录信息传递给刚才写的makefile中，传入的路径都转换为绝对路径，防止Android编译路径的变换造成文件生成失败。
</p>
<p>
最后一步，将该AndroidCdrom.mk文件添加到android的编译环境中。同样参照kernel的编译方法，在AndroidBoard.mk文件中添加如下两行：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AndroidBoard.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># 2013.3.20 zhiqiang.xu Add for generate cdrom iso</span>
</span><span class="line"><span class="cp">include device/qcom/msm7627a/cdrom/AndroidCdrom.mk</span>
</span><span class="line">
</span><span class="line"><span class="nf">droidcore</span><span class="o">:</span> <span class="m">$(PHICOMM_TARGET_CDROM)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

这其中的意思是将 <code>$(PHICOMM_TARGET_CDROM)</code> 这个目标依赖到droidcore目标上，而droidcore是生成android核心的标签，于是每次编译android时都会首先编译 <code>$(PHICOMM_TARGET_CDROM)</code> 目标，从而自动生成相应的iso文件。实际测试下来，效果非常好，每次修改了光盘中相应文件后，都不需要再自己手动生成iso文件了，编译Android时从头到尾一气呵成。
</p>
<p>
搞定！
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan/'>http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[使用Make系统自动生成手机驱动光盘]]></title>
      <link>http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan/</link>
      <pubDate>2013-03-24T21:36:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/03/24/shi-yong-makexi-tong-zi-dong-sheng-cheng-shou-ji-qu-dong-guang-pan</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
最近在Android编译过程中发现，使用ccache也能很好的提升C/C++编译感受，虽然比不上分布式编译所带来的成倍编译速度的体验，但是减少一半编译时间还是绰绰有余的。其实在Android的编译系统中已经自带了对ccache的支持，之前我那篇讲解如何使用distcc编译Android的<a href="http://blog.xeonxu.info/blog/2012/08/30/da-jian-linuxxia-de-fen-bu-shi-bian-yi-xi-tong/#sec-4">文章</a> 中其实就是在ccache的支持基础上进行修改的。但是Android编译系统中的ccache只对Android系统的库文件等进行优化，并不包括Kernel和LK的编译。没搞明白为什么原生的编译系统没有包含这两部分的ccache支持，为此我自己修改了Android编译系统中Kernel和LK的Makefile文件。使用修改后的Makefile文件编译Kernel和LK时，第二次可以节省3-4分钟的时间。看上去时间不长，但是考虑到原来编译Kernel和LK时需要用时8分钟左右，这点提升也是有意义的。
</p>
<p>
修改非常简单，对于Kernel只需要修改

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AndroidKernel.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gd">--- a/kernel/AndroidKernel.mk</span>
</span><span class="line"><span class="gi">+++ b/kernel/AndroidKernel.mk</span>
</span><span class="line"><span class="gu">@@ -62,30 +62,30 @@ $(KERNEL_OUT):</span>
</span><span class="line">        mkdir -p $(KERNEL_OUT)
</span><span class="line">
</span><span class="line"> $(KERNEL_CONFIG): $(KERNEL_OUT)
</span><span class="line"><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- $(KERNEL_DEFCONFIG)</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; $(KERNEL_DEFCONFIG)</span>
</span><span class="line">
</span><span class="line"> $(KERNEL_OUT)/piggy : $(TARGET_PREBUILT_INT_KERNEL)
</span><span class="line">        $(hide) gunzip -c $(KERNEL_OUT)/arch/arm/boot/compressed/piggy.gzip &gt; $(KERNEL_OUT)/piggy
</span><span class="line">
</span><span class="line"> $(TARGET_PREBUILT_INT_KERNEL): $(KERNEL_OUT) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL)
</span><span class="line"><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- CONFIG_NO_ERROR_ON_MISMATCH=y</span>
</span><span class="line"><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- modules</span>
</span><span class="line"><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=arm CROSS_COMPILE=arm-eabi- modules_install</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; CONFIG_NO_ERROR_ON_MISMATCH=y</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; modules</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; modules_install</span>
</span><span class="line">        $(mv-modules)
</span><span class="line">        $(clean-module-folder)
</span><span class="line">        $(append-dtb)
</span><span class="line">
</span><span class="line"> $(KERNEL_HEADERS_INSTALL): $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class="line"><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- headers_install</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; headers_install</span>
</span><span class="line">
</span><span class="line"> kerneltags: $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class="line"><span class="gd">-       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- tags</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; tags</span>
</span><span class="line">
</span><span class="line"> kernelconfig: $(KERNEL_OUT) $(KERNEL_CONFIG)
</span><span class="line">        env KCONFIG_NOTIMESTAMP=true \
</span><span class="line"><span class="gd">-            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- menuconfig</span>
</span><span class="line"><span class="gi">+            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; menuconfig</span>
</span><span class="line">        env KCONFIG_NOTIMESTAMP=true \
</span><span class="line"><span class="gd">-            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=arm-eabi- savedefconfig</span>
</span><span class="line"><span class="gi">+            $(MAKE) -C kernel O=../$(KERNEL_OUT) ARCH=arm CROSS_COMPILE=&quot;ccache arm-eabi-&quot; savedefconfig</span>
</span><span class="line">        cp $(KERNEL_OUT)/defconfig kernel/arch/arm/configs/$(KERNEL_DEFCONFIG)
</span><span class="line">
</span><span class="line"> endif
</span></code></pre></td></tr></table></div></figure></notextile></div>


对于LK，修改文件AndroidBoot.mk

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AndroidBoot.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gd">--- a/AndroidBoot.mk</span>
</span><span class="line"><span class="gi">+++ b/AndroidBoot.mk</span>
</span><span class="line"><span class="gu">@@ -23,6 +23,10 @@ else</span>
</span><span class="line">   USER_SYSTEM := USER_SYSTEM=0
</span><span class="line"> endif
</span><span class="line">
</span><span class="line"><span class="gi">+ifeq ($(USE_CCACHE), 1)</span>
</span><span class="line"><span class="gi">+  CCACHE := CCACHE=$(ANDROID_BUILD_TOP)/prebuilts/misc/linux-x86/ccache/ccache</span>
</span><span class="line"><span class="gi">+endif</span>
</span><span class="line"><span class="gi">+</span>
</span><span class="line"> # NAND variant output
</span><span class="line"> TARGET_NAND_BOOTLOADER := $(PRODUCT_OUT)/appsboot.mbn
</span><span class="line"> NAND_BOOTLOADER_OUT := $(TARGET_OUT_INTERMEDIATES)/NAND_BOOTLOADER_OBJ
</span><span class="line"><span class="gu">@@ -50,11 +54,11 @@ $(EMMC_BOOTLOADER_OUT): emmc_appsbootldr_clean</span>
</span><span class="line">
</span><span class="line"> # Top level for NAND variant targets
</span><span class="line"> $(TARGET_NAND_BOOTLOADER): $(NAND_BOOTLOADER_OUT)
</span><span class="line"><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NAND_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) $(SIGNED_KERNEL)</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NAND_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) $(SIGNED_KERNEL) $(CCACHE)</span>
</span><span class="line">
</span><span class="line"> # Top level for eMMC variant targets
</span><span class="line"> $(TARGET_EMMC_BOOTLOADER): $(EMMC_BOOTLOADER_OUT)
</span><span class="line"><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(EMMC_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) EMMC_BOOT=1 $(SIGNED_KERNEL)</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(EMMC_BOOTLOADER_OUT) $(BOOTLOADER_PLATFORM) EMMC_BOOT=1 $(SIGNED_KERNEL) $(CCACHE)</span>
</span><span class="line">
</span><span class="line"> # Keep build NAND &amp; eMMC as default for targets still using TARGET_BOOTLOADER
</span><span class="line"> TARGET_BOOTLOADER := $(PRODUCT_OUT)/EMMCBOOT.MBN
</span><span class="line"><span class="gu">@@ -77,4 +81,4 @@ $(NANDWRITE_OUT): nandwrite_clean</span>
</span><span class="line">
</span><span class="line"> $(TARGET_NANDWRITE): $(NANDWRITE_OUT)
</span><span class="line">        @echo $(BOOTLOADER_PLATFORM)_nandwrite
</span><span class="line"><span class="gd">-       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NANDWRITE_OUT) $(BOOTLOADER_PLATFORM)_nandwrite BUILD_NANDWRITE=1</span>
</span><span class="line"><span class="gi">+       $(MAKE) -C bootable/bootloader/lk BOOTLOADER_OUT=../../../$(NANDWRITE_OUT) $(BOOTLOADER_PLATFORM)_nandwrite BUILD_NANDWRITE=1 $(CCACHE)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


使用时，和Android编译环境默认开启ccache支持一样，只需要在编译环境中定义 <code>USE_CCACHE=1</code> 即可。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian/'>http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[使用ccache优化Android的编译时间]]></title>
      <link>http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian/</link>
      <pubDate>2013-03-06T23:17:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/03/06/shi-yong-ccacheyou-hua-androidde-bian-yi-shi-jian</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
由于iOS6的完美越狱前段时间才释放出来，有洁癖情节的我纠结了几日，最终还是没能忍受住越狱的诱惑，给自己的iPhone越了狱。托大神们的福，越狱的过程非常傻瓜化，等待几分钟加一次点击就搞定。
</p>
<p>
越狱后，肯定是要装一些实用的软件才能更爽。经过网友们的推荐，经过几天的使用，感觉非常不错。现总结如下：
</p>
<ol>
<li>bitesms 非常好用的短信替代软件，支持快捷发送/快捷回复短信
</li>
<li>zephyr 快捷好用的手势任务管理软件
</li>
<li>ncsetting 通知中心的快捷插件，非常简洁，同时拥有手电筒和VPN开关
</li>
<li>kuaidial 非常好用的拨号工具，来电归属地，黑白名单以及快捷拨号
</li>
<li>bulletin 锁屏界面下激活通知中心的下拉
</li>
<li>activator 快捷手势设定软件，功能非常强大，可以通过手势来呼出应用或开关某个功能
</li>
<li>music controls pro 方便的音乐播放器控制软件，未来还会支持remote server
</li>
<li>flex 非常好用的tweak软件，可以自己编辑插件，修改某些软件的功能
</li>
<li>ifile 最好用的文件管理软件
</li>
</ol>

<p>
以上除了3，4，6项是免费的以外，其余的软件均需要在cydia上付钱购买。不过，花钱购买的这些软件绝对值这个价钱，真的非常好用，提高了不少效率。唯独需要注意的是kuaidial目前还没有iOS6.0的正式版，只有一个Beta版本，不过用下来非常稳定，还没遇到过什么严重的问题。另外安装这款软件需要在cydia中单独添加源：cydia.51ipa.com
</p>
<p>
越狱的成果就是这些，如有更新再添加吧。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao/'>http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[iPhone终于还是被我越狱了]]></title>
      <link>http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao/</link>
      <pubDate>2013-02-11T00:24:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/02/11/iphonezhong-yu-huan-shi-bei-wo-yue-yu-liao</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
今天是中国农历新年的大年初一，在此，简单总结一下去年的收获与成就。
</p>
<p>
去年，最大的收获应该要说是我的宝贝儿子出生了。小家伙为了赶在2013年之前出生，竟然提前一个月来到人世。这让作父母的我们真是又兴奋又小心，对他的照顾也更加细致体贴。如今，小宝宝已经出生将近一个半月，这期间多少个不眠夜，多少次喂奶换尿布，让我对做父母的责任也有了较深刻的体会，真心不容易。看到小孩一天天长大，体重也增加了不少，由最初的五斤张到现在的将近九斤，也算是给我们作父母的最大安慰吧。
</p>
<p>
去年是本人以驱动工程师的身份工作在工作岗位上的第一年，这一年中有坎坷，有迷茫，也有收获。但是最大的收获可能是我对于工作，人际等等的重新思考和审视吧。曾经的各种自以为是在经历了去年的一些事情之后，都有了新的认识。工作期间也结识了了一些新朋友，都是些很热心的家伙们，大家有共同的话题，希望以后都能长久保持联系。
</p>
<p>
另外，在去年中因为工作而结识了优秀软件tmux，自学了lisp语言，算是比较过得去的主要收获。哦，还有一件重要的收获，那就是我终于摆脱了三年的契约，扔掉了手中的烂黑莓，重新换上了iPhone：)。同时还收获到了HHKB。
</p>
<p>
说到成就，去年一年中似乎没有达成什么耀目的成就。总体来讲，对Linux内核驱动开发算是入了个门；看完十本书（十本书说实在算不上什么成就，人家一个月读的都比我这多，但是聊胜于无吧）；工作中搞定了一键搭建高通编译环境的软件；提了三篇专利；搭建了这个博客。然后，好像没有了……
</p>
<p>
在新的一年里，我希望宝宝可以健健康康，我可以多看几本书，系统学习及掌握Omnifocus，继续学习驱动开发技术，学习Lua和Ruby，多参加几个开源项目。要求不多，一步步来。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang/'>http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[新年新气象]]></title>
      <link>http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang/</link>
      <pubDate>2013-02-10T16:49:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/02/10/xin-nian-xin-qi-xiang</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
入手HHKB的想法在心中已经埋藏了快三年了，但一直没有付诸行动。原因主要是价钱有点太那啥了，一个键盘要卖1700，对任何一个苦穷程序员来说用这么个价钱买个键盘都是过于昂贵的。所幸去年年底之前在公司完成了3份专利，总共能拿到6k的奖金（申请前期只能拿到一半，也就是只能拿到3k），于是心中的小恶魔又开始骚动了。入手的奖金中有1k已经花去用来购买kindle paperwhite，还剩下不到2k的奖金正好可以购买一个HHKB（老婆旁白：最烦买东西前找个理由的人了）:p
</p>
<p>
既然决定入手HHKB，于是到网上查了下购买渠道。由于HHKB并未正式引入国内，所以只能通过淘宝或者海外代购来购买了。淘宝上找到的HHKB卖家对HHKB Pro2的要价普遍为16xx，1700不到的样子；而在日本Amazon网站上，HHKB Pro2英文键盘的报价只有17,834日元，合计约人民币1,222，便宜了500多。即便加上300多的代购费用，也要比国内淘宝购买便宜200多人刀。所以，我最后选择通过<a href="http://www.030buy.com">萌购</a> 的代购服务直接从日本亚马逊购买HHKB。由于萌购的购买汇率比银行牌价稍微高一点，实体价格换为人民币为1323元，加上所有代购手续费用和邮费155元，总共为1478元。下单后一般会在两周内收到，实际上，从我下单到收到货只经历了大概一周多一点的时间，总体来说还是蛮便捷的。
</p>
<p>
收到的键盘包装如下，相当朴素简陋，从外观上看根本看不出这货能卖到1k+。打开包装，里面更是简陋的用一只塑料袋包装键盘，外加两张纸做简要说明就什么都没有了。当然，入HHKB的肯定不单单是看上他的外表，更重要的是看上它轻巧的键盘手感以及键位设置。
<img src="http://blog.xeonxu.info/./images/blog/hhkb_case.jpg" alt="./images/blog/hhkb_case.jpg" />
</p>
<p>
由于HHKB支持在多个平台供不同习惯的使用者使用，它提供了6个DIP开关用来配置键盘的功能。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption />
<colgroup><col class="left" /><col class="left" /><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">SW1</th><th scope="col" class="left">SW2</th><th scope="col" class="left">設定モード</th></tr>
</thead>
<tbody>
<tr><td class="left">OFF</td><td class="left">OFF</td><td class="left">HHKモード（PC）</td></tr>
<tr><td class="left">ON</td><td class="left">OFF</td><td class="left">Lite拡張モード（PC）</td></tr>
<tr><td class="left">OFF</td><td class="left">ON</td><td class="left">Macintoshモード</td></tr>
<tr><td class="left">ON</td><td class="left">ON</td><td class="left">設定禁止</td></tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption />
<colgroup><col class="left" /><col class="left" /><col class="left" /><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">DIP SW</th><th scope="col" class="left">機能</th><th scope="col" class="left" /><th scope="col" class="left" /></tr>
<tr><th scope="col" class="left" /><th scope="col" class="left">状態</th><th scope="col" class="left">キー</th><th scope="col" class="left">機能</th></tr>
</thead>
<tbody>
<tr><td class="left">3</td><td class="left">OFF</td><td class="left">Delete</td><td class="left">Delete</td></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">Delete</td><td class="left">BS（BackSpace）</td></tr>
<tr><td class="left">4</td><td class="left">OFF</td><td class="left">左◇</td><td class="left">左◇</td></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">左◇</td><td class="left">Fn</td></tr>
<tr><td class="left">5</td><td class="left">OFF</td><td class="left">Alt</td><td class="left">Alt</td></tr>
<tr><td class="left" /><td class="left" /><td class="left">◇</td><td class="left">◇</td></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">Alt</td><td class="left">◇</td></tr>
<tr><td class="left" /><td class="left" /><td class="left">◇</td><td class="left">Alt</td></tr>
<tr><td class="left">6</td><td class="left">OFF</td><td class="left">Wake Up 無効</td><td class="left" /></tr>
<tr><td class="left" /><td class="left">ON</td><td class="left">Wake Up 有効</td><td class="left" /></tr>
</tbody>
</table>

<p>我平时使用iMac，所以我HHKB的配置是：011100。也就是Mac键盘模式，Delete键为退格键，同时左Cmd键设置为Fn键。之所以将左Cmd键设置为Fn键，是因为Pro2的英文键盘配置上只有一个Fn键，而且在键盘的最右边，即便使用右手掌去按也不是很方便，于是退其次将左右上常用的Cmd按键配置为了Fn键。说到这点，我有点后悔入手英文键盘了，因为日文键盘上有左右两个Fn键，而且有指针键，而且还有三个日文输入法中常用的转换键。这么配置下来，由于失去了之前常用的左手Cmd按键，某些操作必须配合右手来使用，有点小小的不适应，目前还在进一步熟悉中。当然，HHKB在Emacs下使用是非常清脆干爽舒适的。
关于HHKB按键布置以及DIP配置可以参见：<a href="http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hairetu.html">HHKB按键布置</a> 和 <a href="http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html">HHKB DIP配置</a></p>

<p>
最后，来张我的HHKB和iMac的合影，看起来还是蛮搭的。
</p>
<p>
<img src="http://blog.xeonxu.info/./images/blog/hhkb_imac.jpg" alt="./images/blog/hhkb_imac.jpg" />
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb/'>http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[入手HHKB Pro2]]></title>
      <link>http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb/</link>
      <pubDate>2013-01-26T16:57:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/01/26/ru-shou-hhkb</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
不经意间，9个月过去了，宝宝也赶在13年前夕，提前预产期一个月降临人世。由于早产，被医院隔离监护了2天，第3天才将小孩从保暖房里接出来。第一次看到自己小孩娇小的模样，真是又兴奋，又担心。开始当爸爸后，各种工作也就接踵而至。首先是喂奶，由于是初期，母乳还没有多少，只能泡奶粉。但是我这个毛手爸爸除了能喂饱自己以外，小孩奶粉还真不会泡。看了奶粉说明，试了水温，冲了奶粉，结果小孩还是不爱吃。后来我才知道，那是因为之前调的奶粉温度太低了。好在到了第2天，母乳已经很多了，可以直接母乳喂养，才算将我从冲泡奶粉的差事中解放出来。除了喂奶，换尿布也是重头戏。小孩2小时吃一次奶换一次尿布，初为父母的我们，第一天为此真是忙得手忙脚乱。还好有“尿不湿”的存在，否则光是换洗尿布，就够我受了。
</p>
<p>
现在，从小孩出生，已经过去了半个月，小孩也从之前的5斤长到如今的7斤。看着他一天天长大，心中充满了欣慰。真心希望他能越来越好，健健康康。
</p>
<p>
加油，小子！
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao/'>http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[当爸爸了]]></title>
      <link>http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao/</link>
      <pubDate>2013-01-12T22:13:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2013/01/12/dang-ba-ba-liao</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
这几天听到的最令人震惊也是最让人遗憾的消息就是，年轻的31岁程序开发者冯华君去世了。当我刚在twitter上看到这个消息的时候，我都不相信自己的眼睛。我与冯华君并未谋过面，只在几年前和他在MSN上简单聊过几句。那时他正在开发Mac上的FIT输入法，而我联系他是跟他反馈几个关于输入法的改进建议。从那次简单的交流中，我所认识到的冯华君是一位有想法，有理想抱负的年轻人。当他得知我也是一名程序员时，也曾鼓励我去为FIT做贡献。可惜，我的懒惰和拖延症使得这一切成为遗憾，这是唯一一次可以和华君一起工作的机会。此后我们在网上接触的机会少了，再后来出现了twitter和微博，我关注了他。但在微博上我们基本没有怎么互动过，因为那时的我变得更加懒惰，只是彼此价值观接近，我时常转发一些他的帖子。然而现如今，斯人已然离去。
</p>
<p>
今天，在为冯华君惋惜的同时，我也感到无比地懊恼和惭愧。只愿这位年轻人在世界地另一个地方能过得好吧。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun/'>http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[纪念冯华君]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun/</link>
      <pubDate>2012-12-24T21:39:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/24/ji-nian-feng-hua-jun</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
如前篇文章所述，使用模块化方式开发内核驱动可以有效减少编译时间，从而提高开发效率。除此之外，内核模块使用 <code>insmod</code> 载入内核时可以像使用应用程序一样像内核模块中传入特定参数，参数完全由开发者定义。像中断号，GPIO管脚，总线号，设备地址，log等级等等，都可以通过内核参数进行传入。这意味着可以在只编译一次内核驱动模块的情况下，通过传入不同的参数就可以修改驱动程序的属性，大大提高灵活性，对于Debug更加方便。
</p>
<p>
由于在嵌入式系统中，注册设备驱动时也要相应将设备注册到系统中，而设备注册逻辑一般都存放在如 <code>Board_xxxx.c</code> 这类板级驱动文件中。这种安排方式在模块化驱动中显得不是很方便，因为载入模块的系统中需要先注册过设备，这也意味着需要先将相应设备信息添加入板级配置文件后才能使用模块驱动。为此，我想实现一个简单的包装框架，实现以下两个目的：
</p>
<ol>
<li>修改尽可能少的代码进行驱动模块化
</li>
<li>模块化的驱动可以方便的整合到原系统中，无需做多余的改动
</li>
</ol>

<p>
按照这个想法，我使用ft5x0x的tp驱动完成了驱动模块化转换的简单框架。其中包含两个部分，分别如下：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>模块包装文件  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;linux/kernel.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/module.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/slab.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/i2c.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/err.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/delay.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/gpio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;asm/uaccess.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;linux/fs.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;linux/mm.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &quot;ft5x06_ts.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">extern</span> <span class="kt">int</span> <span class="n">init_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line"><span class="k">extern</span> <span class="kt">void</span> <span class="n">exit_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define module_PRINT_ERR     (1U &lt;&lt; 0)</span>
</span><span class="line"><span class="cp">#define module_PRINT_WARNING (1U &lt;&lt; 1)</span>
</span><span class="line"><span class="cp">#define module_PRINT_INFO    (1U &lt;&lt; 2)</span>
</span><span class="line"><span class="cp">#define module_PRINT_DEBUG   (1U &lt;&lt; 3)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef DEFAULT_DEV_NAME</span>
</span><span class="line"><span class="cp">#define DEFAULT_DEV_NAME &quot;ft5x0x_ts&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#ifndef DEFAULT_DEV_ADAP</span>
</span><span class="line"><span class="cp">#define DEFAULT_DEV_ADAP 255</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#ifndef DEFAULT_DEV_ADDR</span>
</span><span class="line"><span class="cp">#define DEFAULT_DEV_ADDR 0x38</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define pr_module(debug_level_mask, args...)                    \</span>
</span><span class="line"><span class="cp">    do {                                                        \</span>
</span><span class="line"><span class="cp">        if (debug_mask &amp; module_PRINT_##debug_level_mask) {     \</span>
</span><span class="line"><span class="cp">            printk(KERN_##debug_level_mask &quot;[module_driver] &quot;args);    \</span>
</span><span class="line"><span class="cp">        }                                                       \</span>
</span><span class="line"><span class="cp">    } while (0)</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">debug_mask</span> <span class="o">=</span> <span class="n">module_PRINT_ERR</span> <span class="o">|</span> \
</span><span class="line">    <span class="n">module_PRINT_INFO</span>  <span class="o">|</span> \
</span><span class="line">    <span class="n">module_PRINT_WARNING</span>  <span class="o">|</span> <span class="n">module_PRINT_DEBUG</span> <span class="p">;</span>
</span><span class="line"><span class="n">module_param_named</span><span class="p">(</span><span class="n">debug_mask</span><span class="p">,</span> <span class="n">debug_mask</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="n">u8</span> <span class="n">local_device_adap</span> <span class="o">=</span> <span class="n">DEFAULT_DEV_ADAP</span><span class="p">;</span>
</span><span class="line"><span class="n">module_param_named</span><span class="p">(</span><span class="n">adap</span><span class="p">,</span> <span class="n">local_device_adap</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_PARM_DESC</span><span class="p">(</span><span class="n">adap</span><span class="p">,</span> <span class="s">&quot;Set the i2c adapter of device.&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="n">u8</span> <span class="n">local_device_addr</span> <span class="o">=</span> <span class="n">DEFAULT_DEV_ADDR</span><span class="p">;</span>
</span><span class="line"><span class="n">module_param_named</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">local_device_addr</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">S_IRUGO</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IWGRP</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_PARM_DESC</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="s">&quot;Set the address of device.&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">this_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">MODULE_DRIVER_INFO</span> <span class="p">{</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">i2c_board_info</span> <span class="o">*</span><span class="n">this_device_info</span><span class="p">;</span>
</span><span class="line">    <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">prepare_func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span> <span class="n">module_driver_info</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">this_device_info</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ft5x0x_device_info</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">prepare_func</span> <span class="o">=</span> <span class="n">ft5x06_touchpad_setup</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">module_driver_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="cm">/* int rc; */</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">i2c_adapter</span> <span class="o">*</span><span class="n">i2c_adap</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span><span class="s">&quot;Enter in %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Init GPIOs */</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">module_driver_info</span><span class="p">.</span><span class="n">prepare_func</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="o">*</span><span class="n">module_driver_info</span><span class="p">.</span><span class="n">prepare_func</span><span class="p">)();</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* Add device driver. */</span>
</span><span class="line">    <span class="n">init_wrapper</span><span class="p">();</span>
</span><span class="line">    <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="o">-&gt;</span><span class="n">addr</span> <span class="o">=</span> <span class="n">local_device_addr</span><span class="p">;</span>
</span><span class="line">    <span class="cm">/* Add i2c device to platform */</span>
</span><span class="line">    <span class="n">i2c_adap</span> <span class="o">=</span> <span class="n">i2c_get_adapter</span><span class="p">(</span><span class="n">local_device_adap</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">i2c_adap</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">pr_module</span><span class="p">(</span><span class="n">ERR</span><span class="p">,</span> <span class="s">&quot;%s: i2c_get_adapter for %d failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">local_device_adap</span><span class="p">);</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">error_adapter</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">this_client</span> <span class="o">=</span> <span class="n">i2c_new_device</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">,</span> <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">this_client</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">pr_module</span><span class="p">(</span><span class="n">ERR</span><span class="p">,</span> <span class="s">&quot;%s: i2c_new_device for %s failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">module_driver_info</span><span class="p">.</span><span class="n">this_device_info</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">);</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">error_device</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span> <span class="s">&quot;%s: this_client:%p, addr:%#x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">this_client</span><span class="p">,</span> <span class="n">this_client</span><span class="o">-&gt;</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">    <span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nl">error_device:</span>
</span><span class="line">    <span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span><span class="line">  <span class="nl">error_adapter:</span>
</span><span class="line">    <span class="n">exit_wrapper</span><span class="p">();</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">module_driver_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pr_module</span><span class="p">(</span><span class="n">INFO</span><span class="p">,</span><span class="s">&quot;Enter in %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span>
</span><span class="line">    <span class="n">exit_wrapper</span><span class="p">();</span>
</span><span class="line">    <span class="n">i2c_unregister_device</span><span class="p">(</span><span class="n">this_client</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">module_init</span><span class="p">(</span><span class="n">module_driver_init</span><span class="p">);</span>
</span><span class="line"><span class="n">module_exit</span><span class="p">(</span><span class="n">module_driver_exit</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">&quot;zhiqiang.xu&lt;zhiqiang.xu@phicomm.com.cn&gt;&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">&quot;i2c device module driver&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL v2&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

以上为部分内容， 其中需要实现板级设备信息 <code>ft5x0x_device_info</code> 和设备初始化函数 <code>ft5x06_touchpad_setup</code> 。其实也就是将板级文件中的相应信息拷贝过来即可。
</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>原驱动文件的修改  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#if defined(MODULE)</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">init_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ft5x0x_ts_init</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">init_wrapper</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">exit_wrapper</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">ft5x0x_ts_exit</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">exit_wrapper</span><span class="p">);</span>
</span><span class="line"><span class="cp">#else</span>
</span><span class="line"><span class="n">module_init</span><span class="p">(</span><span class="n">ft5x0x_ts_init</span><span class="p">);</span>
</span><span class="line"><span class="n">module_exit</span><span class="p">(</span><span class="n">ft5x0x_ts_exit</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">&quot;&lt;luowj&gt;&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">&quot;FocalTech ft5x0x TouchScreen driver&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL&quot;</span><span class="p">);</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
由于内核模块中只能存在一对 <code>module_init</code> 和 <code>module_exit</code> ，所以在原驱动文件中使用模块宏 <code>MODULE</code> 将这部分排除，同时使用统一的包装函数名称将驱动初始化函数和退出函数包装起来，并导出符号。
</p>
<p>
最后，参照上篇文章内容编写 <code>Makefile</code> 文件，如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># Author: zhiqiang.xu</span>
</span><span class="line"><span class="c"># EMail : xeonxu@gmail.com</span>
</span><span class="line"><span class="c"># Date  : 2012-12-11</span>
</span><span class="line"><span class="nv">CROSS_ARCH</span><span class="o">:=</span><span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;$(ARM_EABI_TOOLCHAIN)/arm-eabi-&quot;</span>
</span><span class="line">KDIR:<span class="o">=</span><span class="k">$(</span>ANDROID_PRODUCT_OUT<span class="k">)</span>/obj/KERNEL_OBJ/
</span><span class="line">PWD:<span class="o">=</span><span class="k">$(</span>shell <span class="nb">pwd</span><span class="k">)</span>
</span><span class="line">
</span><span class="line">test_driver-objs :<span class="o">=</span> module_driver.o ft5x06_ts.o focaltech_ctl.o  ft5x06_ex_fun.o
</span><span class="line">obj-m:<span class="o">=</span> test_driver.o
</span><span class="line">.PHONY: modules package clean
</span><span class="line">all:package
</span><span class="line">modules:
</span><span class="line">    @if <span class="o">[</span> <span class="s2">&quot;$(ANDROID_BUILD_TOP)&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;You have to run \&quot;. build/envsetup.sh\&quot; to init enviroment first. \nAnd then you have to run</span>
</span><span class="line"><span class="s2">\&quot;choosecombo\&quot; to setup the project.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">exit </span>1; <span class="k">fi</span>
</span><span class="line">    @if <span class="o">[</span> ! -d <span class="k">$(</span>KDIR<span class="k">)</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;Build kernel first.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">cd</span> <span class="k">$(</span>ANDROID_BUILD_TOP<span class="k">)</span><span class="o">&amp;&amp;</span>make -j4 bootimage&amp;&amp;cd -; <span class="k">fi</span>
</span><span class="line">    <span class="k">$(</span>MAKE<span class="k">)</span> <span class="k">$(</span>CROSS_ARCH<span class="k">)</span> -C <span class="k">$(</span>KDIR<span class="k">)</span> <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class="line">
</span><span class="line">package:modules
</span><span class="line">    @mkdir -p ./package
</span><span class="line">    @cp *.bat ./package
</span><span class="line">    @cp <span class="k">$(</span>obj-m:.o<span class="o">=</span>.ko<span class="k">)</span> ./package
</span><span class="line">    @tar --transform<span class="o">=</span><span class="s1">&#39;s,package,test_driver,&#39;</span> -jcf test_driver.tar.bz2 ./package/
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers package test_driver.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div>


修改后的驱动文件使用make即可直接编译出模块驱动，同时该驱动中也包含了设备注册的相关处理，所以相对来说更加独立。完整的驱动文件如下：
<a href="https://docs.google.com/open?id=0B5GJiOxO7LkWVDVQMy0tcDBoejg"> <code>test_driver.tar.bz2</code> </a>
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia/'>http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[嵌入式系统内核驱动模块化转换的简单框架]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia/</link>
      <pubDate>2012-12-15T15:57:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/15/qian-ru-shi-xi-tong-nei-he-qu-dong-mo-kuai-hua-zhuan-huan-de-jian-dan-kuang-jia</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
高通Android环境中Linux内核会作为Android的一部分进行编译，直接使用make即可一次性从头编到尾。而有的平台比如Marvell，内核的编译操作相对比较独立，必须使用标准的内核编译命令进行单独编译。一般来说，用高通的这种方式比较傻瓜化，一步到底的感觉；而用Marvell的方式用户干预较多，灵活性也更大。当然这里不是比较他们孰优孰劣，对我来说这两种方式各有千秋。在遇到具体问题时，有时还会觉得独立编译内核的方式比较方便，比如编译内核模块这一点上。
</p>
<p>
编译内核模块之前必须先编译内核，编译内核之前必须先指定内核配置。在独立编译内核情况下，编译一遍内核后，可以直接使用 <code>make module</code> 来编译内核模块，如果修改了相应模块文件，使用相同的命令也能很快的进行增量编译。而在高通环境下，由于内核的编译过程已经被集成到Android的编译中，所以每次编译内核或者内核模块时，都必须通过Android的编译环境进行启用。虽然Android提供诸如 <code>make bootimage</code> 命令，可以只编译bootimage相关内容，但是Android庞大的编译体系在初始化时也会占用很多的时间。前段时间在调试一个独立的内核模块时就一直被这个问题困扰着，每次修改模块代码后都必须通过 <code>make bootimage</code> 来编译。虽然只有一个文件，但是每次编译都花费至少1min30sec，严重影响了开发进度。为此，自己参考内核模块独立编译的Makefile和Android的环境特点写了一个内核模块编译Makefile。

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># Author: zhiqiang.xu</span>
</span><span class="line"><span class="c"># EMail:  xeonxu@gmail.com</span>
</span><span class="line"><span class="nv">CROSS_ARCH</span><span class="o">:=</span><span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;$(ARM_EABI_TOOLCHAIN)/arm-eabi-&quot;</span>
</span><span class="line">KDIR:<span class="o">=</span><span class="k">$(</span>ANDROID_PRODUCT_OUT<span class="k">)</span>/obj/KERNEL_OBJ/
</span><span class="line">PWD:<span class="o">=</span><span class="k">$(</span>shell <span class="nb">pwd</span><span class="k">)</span>
</span><span class="line">
</span><span class="line">obj-m:<span class="o">=</span> my_module.o
</span><span class="line">.PHONY: modules package clean
</span><span class="line">all:package
</span><span class="line">modules:
</span><span class="line">    @if <span class="o">[</span> <span class="s2">&quot;$(ANDROID_BUILD_TOP)_yes&quot;</span> <span class="o">=</span> <span class="s2">&quot;_yes&quot;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;You have to run \&quot;. build/envsetup.sh\&quot; to init enviroment first. \nAnd then you have to run</span>
</span><span class="line"><span class="s2">\&quot;choosecombo\&quot; to setup the project.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">exit </span>1; <span class="k">fi</span>
</span><span class="line">    @if <span class="o">[</span> ! -d <span class="k">$(</span>KDIR<span class="k">)</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">echo</span> <span class="s2">&quot;Build kernle first.&quot;</span><span class="o">&amp;&amp;</span><span class="nb">cd</span> <span class="k">$(</span>ANDROID_BUILD_TOP<span class="k">)</span><span class="o">&amp;&amp;</span>make bootimage&amp;&amp;cd -; <span class="k">fi</span>
</span><span class="line">    <span class="k">$(</span>MAKE<span class="k">)</span> <span class="k">$(</span>CROSS_ARCH<span class="k">)</span> -C <span class="k">$(</span>KDIR<span class="k">)</span> <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class="line">
</span><span class="line">package:modules
</span><span class="line">    @mkdir -p ./package
</span><span class="line">    @cp <span class="k">$(</span>obj-m:.o<span class="o">=</span>.ko<span class="k">)</span> ./package
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers package
</span></code></pre></td></tr></table></div></figure></notextile></div>

该Makefile默认会将当前目录下的 <code>my_module.c</code> 文件编译为内核模块。同时，在编译时会强制检查Android的环境是否正确配置，如果没有配置它会进行相应提示后退出编译处理。编译模块时使用的内核配置是编译Android时指定项目所配置的内核配置。如果内核还没有编译，则在编译模块之前会自动编译内核主体。如果一切OK，则每次只会编译修改过的模块文件。编译好后会将模块文件单独拷贝到当前目录下的 <code>package</code> 目录中，方便使用。
</p>
<p>
使用该编译脚本后，模块的编写调试效率高了不少，至少每次编译模块都可以在5sec内搞定了。加上上机实测调试，也能在30sec内完成。生命很可贵，像我一样当个懒人吧。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/'>http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[在高通平台Android环境下编译内核模块]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai/</link>
      <pubDate>2012-12-04T22:14:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/04/zai-gao-tong-ping-tai-androidhuan-jing-xia-bian-yi-nei-he-mo-kuai</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
之前写过一篇关于如何在Linux内核模块中注册操作I2C设备的<a href="http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/">文章</a> ，那篇文章最后介绍的方法虽然可行，但是会带来一个问题：如果内核中已经包含有某设备的驱动时，那么在模块中注册该设备的I2C client之前必须先将内核中的驱动进行反注册解挂，然后才能再次注册模块中定义的驱动。这样做带来的问题就是，当你将模块从内核中卸载后，系统将无法再次注册内核中原有的驱动，导致相应设备无法使用。今天补充的方法可以在挂载模块时使用模块内的设备驱动，而在卸载后恢复回系统原来的驱动。
</p>
<p>
内容相当简单，上次我们已经可以通过内核提供的接口函数，找到相应I2C总线相应地址I2C设备的I2C client结构指针。而拥有该指针后，其实就可以做很多事了。比如调用 <code>i2c_master_send</code> 接口向该client指向的设备发送I2C命令。这样，如果需要扩展内核中原有的驱动程序，比如向procfs或sysfs中添加相应的用户空间接口等。一般可以在 <code>module_init</code> 中注册sysfs入口的操作函数，然后在操作函数中通过操作该client指针而实现一定的功能。这种方法可以沿用系统内核中原有的设备驱动，可以单纯添加一些系统驱动中没有的功能。
</p>
<p>
除此之外，还有一种替换内核中现有驱动的方法。通过查阅源代码，可以发现内核中还提供一个 <code>device_reprobe(dev)</code> 的API，该函数接受一个device结构体指针，实现重新匹配设备驱动的操作。同时，I2C client结构体中也有相应的device结构体。我们知道Linux内核匹配I2C设备驱动是通过名称来进行匹配的，所以，我们的方法就是用Hack的方式将系统中获取到的I2C Client结构体的名称改为我们需要的名称。一般修改为我们模块中新建的驱动的名称，这样，当调用 <code>device_reprobe</code> 接口后，系统会将原有驱动remove并重新为相应I2C设备适配一个驱动程序。当然，没有出错的话，它会适配到我们修改的名称指向的驱动。如此，我们便可以在内核模块中编写独立的设备驱动程序了。以下是简单示例框架:

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">this_client</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_driver</span> <span class="n">my_driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">.</span><span class="n">driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">        <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span>
</span><span class="line">        <span class="p">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="p">.</span><span class="n">probe</span> <span class="o">=</span> <span class="n">my_probe</span><span class="p">,</span>
</span><span class="line">    <span class="p">.</span><span class="n">remove</span> <span class="o">=</span> <span class="n">my_remove</span><span class="p">,</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">module_driver_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">device</span> <span class="o">*</span><span class="n">ts_dev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">i2c_add_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">ts_dev</span> <span class="o">=</span> <span class="n">bus_find_device_by_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">i2c_bus_type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;1-0011&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">ts_dev</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;Did not match the device name:1-0011!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">this_client</span>  <span class="o">=</span>  <span class="n">container_of</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">i2c_client</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">this_client</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">goto</span> <span class="n">device_error_exit</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">NEW_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class="line">    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="n">ts_dev</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nl">device_error_exit:</span>
</span><span class="line">    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class="line">    <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;ts i2c del driver&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

只需要实现其中的 <code>my_probe</code> , <code>my_remove</code> 等函数即可实现一个完整的驱动。需要注意的是一定要在调用 <code>device_reprobe</code> 接口之前将相应的设备驱动使用 <code>i2c_add_driver</code> 添加到系统中，否则重新适配中会找不到驱动。移除模块时，用同样的方法将I2C client的名称更改为系统中原有驱动的名称，并重新适配驱动，即可实现卸载模块后系统能够使用原有驱动的功能。示例如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">module_driver_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">memcpy</span><span class="p">(</span><span class="n">this_client</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">ORIGIN_DRIVER_NAME</span><span class="p">,</span> <span class="n">I2C_NAME_SIZE</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">rc</span> <span class="o">=</span> <span class="n">device_reprobe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">this_client</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">i2c_del_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_driver</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


最后需要注意，文中方法皆为本人翻查文档自己琢磨搞出来的，所以不排除存在隐患的可能，但在自己测试环境下使用中没有发现任何问题。如果有疑问，也希望各位看官能提出自己的看法。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/'>http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[获取并操作内核中已注册的I2C设备]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei/</link>
      <pubDate>2012-12-03T00:00:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/03/huo-qu-bing-cao-zuo-nei-he-zhong-yi-zhu-ce-de-i2cshe-bei</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
这是一篇 <span style="text-decoration:underline;">功夫网</span> 系列文章，本篇作为该系列文章的第一篇，一直拖了好久才真正开始动笔。这篇文章中，我将要介绍的是如何在Raspberry Pi上搭建基于SSH连接的Socks代理服务器。关于我为什么使用Raspberry Pi，是因为我觉得这玩意小巧，携带方便，而且买了它不用也是闲着。至于为什么搭建Socks服务器，知者自知，不知者我也不想过多解释。总之这是该系列文章第一篇，所以内容上相对来说都是比较简单和基础的，大家往下看就是了。另外需要说明的是，我所使用的Raspberry Pi是B型板，操作系统为Arm版的Slackware系统ArmedSlack。如果使用的是其它发行版，可能需要相应修改以下的命令。
</p>
<p>
本片文章主要实现三个目的：
</p>
<ol>
<li>实现ssh免密码自动连接远程服务器，并建立Socks代理
</li>
<li>开机时自动通过ssh与远程服务器建立安全通道
</li>
<li>设置守护进程，使得ssh连接异常断开后可以自动进行重新连接
</li>
</ol>

<p>
操作之前，首先使用终端软件通过ssh方式连接到Raspberry Pi上。
</p>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 ssh免密码自动连接远程服务器</a>
<ul>
<li><a href="#sec-1-1">1.1 生成密钥</a></li>
<li><a href="#sec-1-2">1.2 上传密钥</a></li>
<li><a href="#sec-1-3">1.3 建立socks服务</a></li>
</ul>
</li>
<li><a href="#sec-2">2 开机时自动建立连接</a></li>
<li><a href="#sec-3">3 设置守护进程防止断线</a>
<ul>
<li><a href="#sec-3-1">3.1 安装autossh</a></li>
<li><a href="#sec-3-2">3.2 初始化脚本</a></li>
<li><a href="#sec-3-3">3.3 守护进程</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">ssh免密码自动连接远程服务器</h2>
<div class="outline-text-2" id="text-1">

<p>为了ssh可以在无人干预的情况下自动连接远程服务器，普遍的做法是使用公钥认证方式进行连接。同样，我们也使用公钥认证的方法进行自动连接。为了实现公钥认证连接，首先需要生成密钥对。
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">生成密钥</h3>
<div class="outline-text-3" id="text-1-1">

<p>生成密钥时可以使用以下 <code>ssh-keygen</code> 命令进行。

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh-keygen -t rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>

命令执行中会出现一些提示，大致是一些关于密钥存放路径以及密钥主密码设定之类的。基本上一路回车就可以了，同时注意不要去设置密钥主密码，否则每次访问密钥时都会提示输入，这样就达不到自动认证连接的目的了。由于 <code>ssh-keygen</code> 包含在openssh软件包中，所以如果linux中曾经安装过openssh的话，应该直接就能使用。反之如果提示找不到该命令，可以通过类似下面的命令来安装slackware的n包中的openssh来获取。

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">installpkg /slackware/n/openssh-6.0p1-arm-1.tgz
</span></code></pre></td></tr></table></div></figure></notextile></div>

生成好的密钥对默认会保存在 <code>~/.ssh/</code> 目录下，如果生成的时rsa密钥，则密钥文件分别为 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 。其中没有 <code>.pub</code> 扩展名的文件为私钥，另外一个为公钥。现在我们需要将我们刚才生成的公钥文件上传到我们的远程服务器的相应目录中。
</p>
</div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">上传密钥</h3>
<div class="outline-text-3" id="text-1-2">

<p>上传密钥可以使用通用的scp命令，也可以使用ssh工具中的 <code>ssh-copy-id</code> 命令。 <code>ssh-copy-id</code> 命令比较简单，指定密钥文件和远程机即可，该命令会自动添加公钥内容到远程机的授权文件中。但要注意该命令不会改变远程机相应文件的属性，所以如果是第一次操作的话，建议使用scp命令比较靠谱。下面我们使用scp命令

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">scp ~/.ssh/id_rsa.pub user@server:/home/user <span class="c">#user和server需要根据实际内容更改，可能需要输入远程机密码</span>
</span><span class="line">ssh user@server <span class="c">#连接至远程服务器，可能需要输入远程机密码。user和server需要根据实际内容更改</span>
</span><span class="line"><span class="nb">cd</span>
</span><span class="line">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys <span class="c">#将刚拷贝过来的公钥文件内容添加到.ssh/authorized_keys文件中</span>
</span><span class="line">chmod 600 .ssh/authorized_keys <span class="c">#必须确保.ssh/authorized_keys文件的属性为600，及他人不可读写，否则公钥认证将会失败</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

OK，大功告成。退出远程机，使用 <code>ssh user@server</code> 命令重新连接远程机，此时会提示加密指纹认证的提示，回答 <code>yes</code> 即可。此后再次连接远程机时就会直接登录进入，而不会出现任何提示了。
</p>
</div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">建立socks服务</h3>
<div class="outline-text-3" id="text-1-3">

<p>ssh软件自带功能可以生成socks代理服务器，并通过ssh连接的远程机进行网络访问。使用相当简单，只需要在执行ssh命令连接远程机时使用 <code>-D</code> 参数指定相应端口即可，如

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh -D 9090 user@server
</span></code></pre></td></tr></table></div></figure></notextile></div>

以上例子将ssh连接生成端口号为9090的socks代理。该代理可以通过Firefox等浏览器直接使用，每次需要使用socks代理时只需执行以上的命令即可。但是现实情况是，我们希望RaspberryPi在每次开机后即可自动运行ssh连接远程机并建立相应的代理端口。
</p>
</div>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">开机时自动建立连接</h2>
<div class="outline-text-2" id="text-2">

<p>开机后立即进行ssh连接有很多实现方法，最省事的办法就是修改 <code>rc.local</code> 或者 <code>inittab</code> 文件来实现。方法非常简单，添加相应语句到 <code>rc.local</code> 中即可。以下，我通过新建一个连接脚本，然后在 <code>rc.local</code> 文件中进行调用来实现开机自动连接ssh：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir -p ~/bin
</span><span class="line"><span class="nb">echo </span>ssh -D 9090 user@server &gt;&gt; ~/bin/socks_proxy.sh
</span><span class="line">chmod a+x ~/bin/socks_proxy.sh
</span><span class="line"><span class="nb">echo</span> ~/bin/socks_proxy.sh &gt;&gt; /etc/rc.d/rc.local
</span></code></pre></td></tr></table></div></figure></notextile></div>

如果想做的更正式一点，可以参考 <code>/etc/rc.d/</code> 目录下的脚本文件，新建一个rc风格的服务脚本文件，然后修改 <code>rc.M</code> 文件，添加相应的服务启动代码即可。不过接下来马上要做防止断线的处理，需要用到其它工具，所以这一步暂时跳过也没关系。
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">设置守护进程防止断线</h2>
<div class="outline-text-2" id="text-3">

<p>目前为止我们设置了ssh的免密码登录以及开机自动登录，要求不高的话也差不多可以凑合使用。但是网络这东西有很多不稳定因素，如果碰到ssh服务器出状况或者线路不稳定时，ssh的连接就可能会被中断，这时必须自己手动再连接一次才能继续使用，这显然不是我们希望的。为了防止这类情况的发生，我们需要借助autossh软件来实现断线自动连接。autossh的功能就像它的名称一样直接简单，它可以监测ssh的连接状态，并在有需要的时候自动重新连接ssh。接下来，我来讲解如何安装配置autossh。
</p>
</div>

<div id="outline-container-3-1" class="outline-3">
<h3 id="sec-3-1">安装autossh</h3>
<div class="outline-text-3" id="text-3-1">

<p>由于slackware官方没有提供autossh的安装包，所以需要自己从源码编译。首先从autossh<a href="http://www.harding.motd.ca/autossh/">官网</a> 下载最新的源代码包 <code>autossh-1.4c.tgz</code> ，然后执行以下命令进行编译安装：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gunzip -c autossh-1.4c.tgz | tar xvf -
</span><span class="line"><span class="nb">cd </span>autossh-1.4c
</span><span class="line">./configure --prefix<span class="o">=</span>/usr --sysconfdir<span class="o">=</span>/etc
</span><span class="line">make
</span><span class="line">sudo make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

整个过程没有什么难度，标准的从源代码安装软件的方法，除了RPi的编译速度有点慢以外。为了方便，我这里也用slackbuild编译了一份适用于RPi使用的二进制软件包： <a href="./downloads/autossh-1.4c-arm-1_SBo.tgz">autossh-1.4c-arm.tgz</a> ,只需要执行 <code>sudo installpkg autossh-1.4c-arm-1_SBo.tgz</code> 即可。
</p></div>

</div>

<div id="outline-container-3-2" class="outline-3">
<h3 id="sec-3-2">初始化脚本</h3>
<div class="outline-text-3" id="text-3-2">

<p>autossh安装好后不需要特别的设置，只需要使用它改写之前的ssh连接脚本即可。修改 <code>~/bin/socks_proxy.sh</code> 如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># autossh:  Connect remote with ssh automatically.</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># processname: autossh</span>
</span><span class="line"><span class="c"># pidfile: /var/run/autossh.pid</span>
</span><span class="line"><span class="c">#                       --Zhiqiang Xu &lt;xeonxu@gmail.com&gt;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">AUTOSSH_PIDFILE</span><span class="o">=</span><span class="s2">&quot;/var/run/autossh.pid&quot;</span>
</span><span class="line"><span class="nv">PIDFILE</span><span class="o">=</span><span class="nv">$AUTOSSH_PIDFILE</span>
</span><span class="line"><span class="nv">SSH_SERVER</span><span class="o">=</span>user@server
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> -e <span class="nv">$AUTOSSH_PIDFILE</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">        </span><span class="nb">exit </span>0
</span><span class="line"><span class="k">elif</span> <span class="o">[</span> -x /usr/bin/autossh -a -x /usr/bin/ssh <span class="o">]</span>; <span class="k">then</span>
</span><span class="line"><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;Starting autossh...&quot;</span>
</span><span class="line">        autossh -M 40000 <span class="nv">$SSH_SERVER</span> -f -q -C -g -N -D 9090
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

如果之前还没有修改过 <code>/etc/rc.d/rc.local</code> 文件，记得在该文件最后加上一句 <code>~/bin/socks_proxy.sh</code> 。如此便可在每次开机后自动使用autossh来进行ssh连接，同时再也不用担心该ssh会发生断线问题了。
</p>
</div>

</div>

<div id="outline-container-3-3" class="outline-3">
<h3 id="sec-3-3">守护进程</h3>
<div class="outline-text-3" id="text-3-3">

<p>说实在，通过之前的那些操作基本可以保证我们拥有一个可以自动监护连接，并能稳定提供socks代理的功能了。以下操作可以不必进行，不过如果你纠结于更稳定的保全的连接，可以继续看下去。这一步操作主要是将autossh加入守护进程，从而防止autossh的异常退出（还记得autossh是干什么的来着？如果autossh异常退出会发生什么事？Yes, 这就是我们要防止的）。
</p>
<p>
将autossh脚本以守护进程方式运行的方法很多，最简单的就是修改 <code>inittab</code> 文件。如果之前修改过 <code>/etc/rc.local</code> 文件，记得将其中关于运行autossh的语句删掉或者注释掉，否则和守护进程的设置会重复。
打开 <code>inittab</code> 文件，参考其它项目的写法添加一行就搞定，如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">AUTOSSH:12345:respawn:sh /home/user/bin/socks_proxy.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

另外，使用守护进程方式运行autossh时要注意一点，运行的脚本必须不是daemon方式的。所以还需要将前面的连接语句：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">autossh -M 40000 <span class="nv">$SSH_SERVER</span> -f -q -C -g -N -D 9090
</span></code></pre></td></tr></table></div></figure></notextile></div>

修改为：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">autossh -M 40000 <span class="nv">$SSH_SERVER</span> -q -C -g -N -D 9090
</span></code></pre></td></tr></table></div></figure></notextile></div>

也即是去掉其中的 <code>-f</code> 选项，否则，init会不断尝试重新运行autossh命令，导致服务不稳定。
</p>
<p>
守护进程还可以通过第三方工具来配置，比如daemontools，monit等等之类，功能相对来说更强大一点，但是所提供的基本功能都是一样的，所以这里也就不再详细介绍了，有兴趣的自己看文档编译配置一份就能用。
</p>
<p>
这个就是我配了壳后的Raspberry Pi， 运行起来还是很稳定的:
</p>

<div class="figure">
<p><img src="http://blog.xeonxu.info/./images/blog/RPi_shell.jpg" alt="./images/blog/RPi_shell.jpg" /></p>
<p>配了壳的RPi</p>
</div>
</div>
</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li/'>http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[Raspberry Pi上搭建自动ssh代理]]></title>
      <link>http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li/</link>
      <pubDate>2012-12-02T00:00:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/12/02/raspberry-pishang-da-jian-zi-dong-sshdai-li</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
近期公司项目较为空闲，抽空做了一些学习性质的研发内容，其中涉及到在Linux内核模块中使用I2C对外部器件进行控制的操作。虽然在Linux中操作使用I2C设备并不复杂，但本人接触Linux内核驱动开发时间并不算长，此次学习中也算较为系统的了解了Linux中对I2C设备的操控方式，谨在此做下记录。
</p>
<p>
通过Linux内核文档中关于操作I2C设备的文章后不难看出Linux中注册使用I2C设备一般通过四种方法<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>：
</p>
<ol>
<li>通过总线号声明设备
</li>
<li>立即探测设备
</li>
<li>通过Probe探测相应设备
</li>
<li>在用户空间立即探测
</li>
</ol>

<p>
简单来说，第一种方式一般应用在嵌入式设备中。因为对于嵌入式设备来说，外围器件基本都是固定的，只需提供有限几款器件的支持即可。使用这种方式的时候，需要在板级配置文件中定义并设置 <code>i2c_board_info</code> 这个结构体的内容。其中需要配置设备名称和设备地址，此外设备中断和私有数据结构也可以选择设置。然后使用 <code>i2c_register_board_info</code> 这个接口对设置的设备进行注册使用。需要注意的是这种方法注册的设备是在注册I2C总线驱动时进行驱动适配的。
</p>
<p>
第二种方法可以通过给定的I2C适配器以及相应的I2C板级结构体，自行通过 <code>i2c_new_device</code> 接口进行添加注册所需的设备。这种方法灵活性要较第一种方法大，可以很方便的在模块中使用。
</p>
<p>
第三种方法是 <code>2.6</code> 内核之前的做法，使用 <code>detect</code> 方法去探测总线上的设备驱动。因为探测机制的原因，会导致一些副作用的发生，所以不建议使用，除非真的没有别的办法。
</p>
<p>
第四种方法是在Linux的控制台上，在用户空间通过sysfs，使用 <code>/sys/bus/i2c/devices/i2c-3/new_device</code> 节点进行设备的添加注册。
</p>
<p>
从上面可以看出，如果需要在Linux内核中以模块的方式对I2C设备进行驱动控制的话，第二种方法是比较推荐的。通过测试，在module的init中使用

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">i2c_adapter</span> <span class="o">*</span><span class="n">i2c_adap</span><span class="p">;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">i2c_client</span><span class="p">;</span>
</span><span class="line"><span class="n">i2c_adap</span> <span class="o">=</span> <span class="n">i2c_get_adapter</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="n">i2c_client</span> <span class="o">=</span> <span class="n">i2c_new_device</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i2c_device</span><span class="p">);</span>
</span><span class="line"><span class="n">i2c_put_adapter</span><span class="p">(</span><span class="n">i2c_adap</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

即可成功注册I2C设备。其中:

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="k">struct</span> <span class="n">i2c_board_info</span> <span class="n">ft5306_i2c_device</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">I2C_BOARD_INFO</span><span class="p">(</span><span class="s">&quot;test_i2c&quot;</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">),</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


以上，对于如何在模块中注册使用I2C设备简单做了描述。那么如何在另外的模块中对已经注册的I2C设备进行反注册呢？由于内核中操作I2C设备都是通过 <code>i2c_client</code> 结构进行，所以问题可以抽象为如何在内核中获取指定设备的 <code>i2c_client</code> 结构指针。通过查阅内核API，也找到了一个方法可以达到这样的目的，如下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">i2c_client</span> <span class="o">*</span><span class="n">i2c_client</span><span class="p">;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">device</span> <span class="o">*</span><span class="n">i2c_dev</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">i2c_dev</span> <span class="o">=</span> <span class="n">bus_find_device_by_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">i2c_bus_type</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;1-0011&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">i2c_dev</span><span class="p">)</span>
</span><span class="line">    <span class="n">i2c_client</span>  <span class="o">=</span>  <span class="n">container_of</span><span class="p">(</span><span class="n">i2c_dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">i2c_client</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span><span class="p">(</span><span class="n">i2c_client</span><span class="p">)</span>
</span><span class="line">    <span class="n">i2c_unregister_device</span><span class="p">(</span><span class="n">i2c_client</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

该反注册例子的内容就是对前面注册的 <code>0x11</code> 地址的设备进行反注册。注意 <code>bus_find_device_by_name</code> 函数中第三项参数，该参数是需要查找的设备在总线上注册的名称。&#8221;1&#8221;代表着1号适配器，&#8221;0011&#8221;是16位的I2C地址。如此便可方便的在内核模块中对I2C设备进行挂载和解挂了。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 参考Linux内核目录下的Documentation/i2c/instantiating-devices
</p>



</div>
</div>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/'>http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[在Linux内核模块中操作I2C设备]]></title>
      <link>http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei/</link>
      <pubDate>2012-11-25T00:02:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/11/25/zai-linuxnei-he-zhong-yi-mo-kuai-fang-shi-cao-zuo-i2cshe-bei</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
    <item>
      <description>
	<![CDATA[
		 <p>
算下来两周没有在这里写博客了，其中一大原因在于天气渐凉，不高兴一人在电脑旁受冻-_-!!!  咳咳咳，其实天气有一定影响，不过更主要的问题在于最近遇到的事情繁杂，虽然没有什么难不可为，但自己也确实花了些心思。
</p>
<p>
首先是工作上的两个任务。近期项目正好有点空挡，于是自己决定将高通平台的电量管理从MP端移植至AP端内核里，同时添加一些判断逻辑，以使统计的电量结果不至于像原版那样生硬怪异。只可惜高通平台好多处理需要依赖远程调用，而自己手里却没有一份关于远程调用的官方文档。最后通过高通的support搞定了内核中对PMIC的一些操作，但又发现无法正常取得相应中断状态。总之，这个看起来简单地任务搞了2周还没有实质性突破。另外一个任务是协助同事完成一个用户层接口，方便在用户层升级器件的firmware。这个任务进展倒是蛮快，3个小时就写好框架和功能调试。可惜最后发现buffer有4k限制，现在还在找对策方法，这两天就在考虑这个问题。
</p>
<p>
其次，周末在家各种收拾打扫，洗衣做饭。连续两周了，除了干家务和觅食以外，其它什么都没干。想来自己效率低是一个问题，着实应该改进一下。哦，今天物业还过来处理家里渗水的墙面，也算拖了大半年之久的工程开始了第一步。
</p>
<p>
再者，为了维护简历，将简历移植到moderncv上并使用git来管理。后来又想更统一使用orgmode来写简历，但是苦于找不到好的解决方案，现在琢磨着是不是要自己搞一个。
</p>
<p>
最后，算是小成就。前几日知道了支持kindle3的kindlepdfviewer这个越狱软件，抽空搞了一下，发现对扫描版pdf的支持好到不可思议。于是kindle上瞬间多了很多扫描版的图书。首当其冲就是一直想看但一直没有看的《emacs lisp编程入门》和《GEB》。前者已经看了一半以上，作为emacs爱好者，到现在才较为系统的了解学习lisp是有点晚，不过至少我开始入门了:)
</p>
<p>
今日纯属碎碎念，希望下周工作上任务都能快速完成，个人的几个安排都能顺利进行。另，下篇文章没差错的话应该是功夫网专题，否则又要被人数落跳票了。
</p>

		 <p class='post-footer'>
  <h1>License</h1>
  <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />本博作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh">知识共享署名-非商业性使用-相同方式共享 3.0 Unported许可协议</a>进行许可。<br/>
  Original link:
  <a href='http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao/'>http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao/</a><br/>
  &nbsp;written by <a href='http://blog.xeonxu.info'>Xeon Xu</a>
  &nbsp;posted at <a href='http://blog.xeonxu.info'>http://blog.xeonxu.info</a>
</p>

	]]>
      </description>
      <title><![CDATA[近期的烦恼]]></title>
      <link>http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao/</link>
      <pubDate>2012-11-18T23:01:00+08:00</pubDate>
      <guid isPermaLink="false">http://blog.xeonxu.info/blog/2012/11/18/jin-qi-de-fan-nao</guid>

      <source url="http://blog.xeonxu.info/rss.xml"><![CDATA[不停地疯]]></source>
      <author>
	<name><![CDATA[Xeon Xu]]></name>
	
      </author>
    </item>
    
  </channel>
</rss>
