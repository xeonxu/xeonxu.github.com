<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[不停地疯]]></title>
  <link href="http://xeonxu.github.com/atom.xml" rel="self"/>
  <link href="http://xeonxu.github.com/"/>
  <updated>2012-09-09T16:35:24+08:00</updated>
  <id>http://xeonxu.github.com/</id>
  <author>
    <name><![CDATA[Xeon Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[高通编译环境一键安装包]]></title>
    <link href="http://xeonxu.github.com/blog/2012/09/09/gao-tong-bian-yi-huan-jing-yi-jian-an-zhuang-bao/"/>
    <updated>2012-09-09T14:22:00+08:00</updated>
    <id>http://xeonxu.github.com/blog/2012/09/09/gao-tong-bian-yi-huan-jing-yi-jian-an-zhuang-bao</id>
    <content type="html"><![CDATA[<p>
之前一直都在Marvell平台上开发Android，Marvell平台的CP只Release二进制文件，所以开发过程中一般只需要修改并编译AP端的代码就可以了。最近一个月，由于项目需要，开始转到开发高通平台的Android。初步接触下来，高通平台和Marvell平台有很大不同。最显著一点就是，Marvell平台中是AP启动起来后再挂CP跑；而高通平台则是先启动CP<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，然后CP初始化AP并加载程序运行。另一方面，高通的CP相比AP有更大的控制权限，像对GPIO，PMIC的控制等都是CP进行控制，AP端如果需要对这些资源进行操作，则必须先由CP程序分配相应权限给AP才可以。AP和CP的交互则使用共享内存的方式进行同步。
</p>
<p>
高通这种架构特点注定了OEM商需要同时修改AP和CP的代码，所以高通的软件包在Release的时候是分为AP包和MP<sup><a class="footref" name="fnr.1.2" href="#fn.1">1</a></sup>包的。AP包中包括Android，Kernel，AP端的bootloader lk等；而MP包中则包括AMSS，qcsbl，oemsbl等。AP包的编译环境一般都架设在Linux下，使用Android的官方搭建方法就可以搞定。而MP包属于高通的特有产物，需要按照高通的搭建文档来进行，使用RVCT编译器，python以及perl环境。实际搭建下来，MP包的编译环境极为繁琐，从头摸索搭建，没有3、4天是不可能完成的。即便有人之前搭建过，文档工具都准备好的情况下，搭建一个可用的环境也至少需要4个小时。为了方便以后开发人员更加方便快捷的搭建开发环境，我花了2个周末的时间，搭建调试并打包制作了高通编译环境的一键安装包。
</p>
<p>
该一键安装包分为Windows版和Linux版。是的，你没有看错，还有Linux版本的编译环境！用过的人都懂的，Linux版的编译环境比Windows编译环境的效率高的不是一点两点<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>。不过有一点需要强调： <b>我制作的编译包中，RVCT的版本不是高通官方建议的版本</b> 。高通官方文档中说，编译环境需要RVCT 2.2 593版本。而我制作的编译包中RVCT版本分别是Windows 2.2 616，Linux 2.2 686版本。修正版本号比高通官方建议的高，但是高通官方对于高版本的编译环境是否可用没有明确的答复，只是说没有测试过<sup><a class="footref" name="fnr.3" href="#fn.3">3</a></sup>。我个人简单测试过，分别使用593版本的RVCT，616版本RVCT和686版本RVCT编译同一套代码，对编译出来的bin文件进行比较，发现除了日期和签名部分有不同外，其余部分都是相同的。另外，这三种编译器编译出来的文件分别刷到手机上，也都可以正常运行。但是， <b>即便如此我也还是不能保证编译环境是完全没有问题的</b> 。所以，对于要求比较高的朋友，可以在研发中使用我的环境，正式发布版本的时候使用高通官方建议的593版本进行编译。
</p>
<p>
最后放出下载地址（由于CSDN只有60M的上传权限，所以只有Linux环境了，并且需要5个资源分。国外下载地址没有任何限制）：
</p>
<p>
国内下载：
</p>
<p>
<a href="http://download.csdn.net/detail/noexu/4558455">Linux编译环境</a>
</p>
<p>
国外下载：
</p>
<p>
<a href="https://docs.google.com/open?id=0B5GJiOxO7LkWT0F3cDhyTG5ZR2s">Linux编译环境</a>
<a href="https://docs.google.com/open?id=0B5GJiOxO7LkWUkp6N0RCbHF2SWc">Windows编译环境</a>
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 高通平台中将CP称为MP，本质是一样的。
</p>


<p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> 相同配置的机器至少有5:1的效率，windows上编译需要50分钟的代码，Linux上只需要10分钟。
</p>


<p class="footnote"><sup><a class="footnum" name="fn.3" href="#fnr.3">3</a></sup> 根据高通文档的编写时间点以及国企一贯保守的工作习惯上来推断，我猜测高版本应该是没有问题的，因为文档写作之初RVCT 616版本的补丁还没有发布，只是高通方面没人更新。所以，流传到现在就是只能使用593版本的RVCT了。当然这只是我本人的推断。
</p>




</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优化使用Orgmode发布Octopress的方法]]></title>
    <link href="http://xeonxu.github.com/blog/2012/09/05/you-hua-shi-yong-orgmodefa-bu-octopressde-fang-fa/"/>
    <updated>2012-09-05T07:59:00+08:00</updated>
    <id>http://xeonxu.github.com/blog/2012/09/05/you-hua-shi-yong-orgmodefa-bu-octopressde-fang-fa</id>
    <content type="html"><![CDATA[<p>
前几天翻译了一篇来自Tom Alexander的<a href="http://blog.xeonxu.info/blog/2012/09/03/shi-yong-org-modelai-fa-bu-bo-ke/">文章</a> ，文中介绍了如何通过修改Rakefile文件以及添加相应的Emacs设置，来使通过Org-mode发布Octopress博客成为可能。该方法很好用，特别是使用作者自己修改的el脚本可以非常方便的将Org文件输出为octopress的文章。但是，原文作者的方法也有一点缺憾，那就是必须手动移动新建的Org文件到相应的目录下；而且在使用 <code>rake new_post[""]</code> 命令新建文档后必须手动编辑新建的文件，少了那么一点点便捷。为此，我又通过网络查找了一些资料，最后找到了<a href="http://imwuyu.me/blog/configuring-octopress.html/">这里</a> 。 受到这篇文章的启发，我尝试修改了工程中的 <code>Rakefile</code> 文件，最后成功地让一切都自动化起来。具体方法如下：
</p>
<ul>
<li>修改Rakefile中关于org文档目录以及新建post文件的扩展名。同时新增一个编辑器的变量
</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile  </span><a href="https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad">Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"> <span class="nv">deploy_dir</span>      <span class="o">=</span> <span class="s2">&quot;_deploy&quot;</span>   <span class="c"># deploy directory (for Github pages deployment)</span>
</span><span class="line"> <span class="nv">stash_dir</span>       <span class="o">=</span> <span class="s2">&quot;_stash&quot;</span>    <span class="c"># directory to stash posts for speedy generation</span>
</span><span class="line"> <span class="nv">posts_dir</span>       <span class="o">=</span> <span class="s2">&quot;_posts&quot;</span>    <span class="c"># directory for blog files</span>
</span><span class="line"> <span class="nv">org_posts_dir</span>   <span class="o">=</span> <span class="s2">&quot;org_posts&quot;</span>
</span><span class="line"> <span class="nv">themes_dir</span>      <span class="o">=</span> <span class="s2">&quot;.themes&quot;</span>   <span class="c"># directory for blog files</span>
</span><span class="line"> <span class="nv">new_post_ext</span>    <span class="o">=</span> <span class="s2">&quot;org&quot;</span>  <span class="c"># default new post file extension when using the new_post task</span>
</span><span class="line"> <span class="nv">new_page_ext</span>    <span class="o">=</span> <span class="s2">&quot;org&quot;</span>  <span class="c"># default new page file extension when using the new_page task</span>
</span><span class="line"> <span class="nv">server_port</span>     <span class="o">=</span> <span class="s2">&quot;4000&quot;</span>      <span class="c"># port for preview server eg. localhost:4000</span>
</span><span class="line">
</span><span class="line"><span class="c"># open ,使用系统默认编辑器</span>
</span><span class="line"><span class="c"># open -a Mou，使用Mou打开</span>
</span><span class="line"><span class="c"># open -a Byword，使用Byword打开</span>
</span><span class="line"><span class="c"># subl, 使用Sublime Text2打开</span>
</span><span class="line"><span class="nv">editor</span> <span class="o">=</span><span class="s2">&quot;~/bin/em&quot;</span> <span class="c"># Emacs wrapper</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
我使用我自己编写的emacs wrapper来调用Emacs，为的是让Emacs的启动更快一点（通过server方式）。em的内容如下：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>em  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n -a <span class="s2">&quot;/Applications/Emacs.app/Contents/MacOS/Emacs&quot;</span> <span class="nv">$1</span> &gt; /dev/null 2&gt;&amp;1 &amp;
</span></code></pre></td></tr></table></div></figure></notextile></div>

如果你也想通过emacsclient来加速Emacs的启动速度，你可能需要在你的 <code>.emacs</code> 文件中添加以下语句：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">(</span>require <span class="err">&#39;</span>edit-server<span class="o">)</span>
</span><span class="line"><span class="o">(</span>edit-server-start<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

当然，你也可以指定 <code>editor</code> 变量为任何你喜欢的编辑器，不过既然都用Org文件发博客了，有什么理由不用Emacs呢？
</p>
<ul>
<li>添加新建 <code>org_posts_dir</code> 目录及相应org文件的语句
</li>
</ul>

<p>在 <code>task :install, :theme do |t, args|</code> 语句之下，添加新建 <code>org_posts_dir</code> 的语句：
</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile  </span><a href="https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad">Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">theme</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">theme</span> <span class="o">||</span> <span class="s1">&#39;classic&#39;</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;## Copying &quot;</span><span class="o">+</span><span class="n">theme</span><span class="o">+</span><span class="s2">&quot; theme into ./</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2"> and ./sass&quot;</span>
</span><span class="line">  <span class="n">mkdir_p</span> <span class="n">source_dir</span>
</span><span class="line">  <span class="n">cp_r</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">themes_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">theme</span><span class="si">}</span><span class="s2">/source/.&quot;</span><span class="p">,</span> <span class="n">source_dir</span>
</span><span class="line">  <span class="n">mkdir_p</span> <span class="s2">&quot;sass&quot;</span>
</span><span class="line">  <span class="n">cp_r</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">themes_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">theme</span><span class="si">}</span><span class="s2">/sass/.&quot;</span><span class="p">,</span> <span class="s2">&quot;sass&quot;</span>
</span><span class="line">  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="n">mkdir_p</span> <span class="n">public_dir</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
在 <code>task :new_post, :title do |t, args|</code> 语句之下，添加新建文档目录和新建文章的语句：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile  </span><a href="https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad">Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"> <span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class="line">   <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class="line">   <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">   <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">   <span class="n">args</span><span class="o">.</span><span class="n">with_defaults</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;new-post&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class="line">   <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">   <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">     <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</span><span class="line">   <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


</p>
<ul>
<li>为了在新建文件之后能够立即编辑，我还在 <code>new_post</code> 命令中加入了相应的编辑语句：
</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile  </span><a href="https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad">Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">desc</span> <span class="s2">&quot;Begin a new post in </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class="line">  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class="line">  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="n">args</span><span class="o">.</span><span class="n">with_defaults</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;new-post&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class="line">  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">org_posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;#+BEGIN_HTML&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;#+END_HTML&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">if</span> <span class="c1">#{editor}</span>
</span><span class="line">    <span class="nb">system</span> <span class="s2">&quot;sleep 1; </span><span class="si">#{</span><span class="n">editor</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
在 <code>new_page</code> 中也添加相同的语句。
</p>
<ul>
<li>最后，为了预览更加方便，在 <code>preview</code> 命令最后添加下面的语句：
</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile  </span><a href="https://github.com/xeonxu/xeonxu.github.com/commit/d0ebcf9c09d2141fa50e4e0fcba7d18720a5f9ad">Source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">   <span class="nb">system</span> <span class="s2">&quot;sleep 2; open http://localhost:</span><span class="si">#{</span><span class="n">server_port</span><span class="si">}</span><span class="s2">/&quot;</span>
</span><span class="line">   <span class="o">[</span><span class="n">jekyllPid</span><span class="p">,</span> <span class="n">compassPid</span><span class="p">,</span> <span class="n">rackupPid</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">pid</span><span class="o">|</span> <span class="no">Process</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
好了，现在我们只需要在控制台上执行 <code>rake new_post["something"]</code> 就会自动在我们设定的 <code>org_posts_dir</code> 目录下新建一份org文档，并且使用我们指定的编辑器打开它。然后随便编辑一点什么，保存并执行 <code>C-c C-e F</code> 或者直接调用Tom Alexander文章中所说的 <code>M-x save-then-publish</code> 命令。最后再在控制台上执行 <code>rake generate&amp;&amp;rake preview</code> 。 Booooom，自动弹出的浏览器上是不是显示出了你刚才编写的文章？非常方便吧？赶快试试！
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Org-Mode来发布博客]]></title>
    <link href="http://xeonxu.github.com/blog/2012/09/03/shi-yong-org-modelai-fa-bu-bo-ke/"/>
    <updated>2012-09-03T20:58:00+08:00</updated>
    <id>http://xeonxu.github.com/blog/2012/09/03/shi-yong-org-modelai-fa-bu-bo-ke</id>
    <content type="html"><![CDATA[<p>
原文地址： <a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/</a>
</p>
<p>
在之前的一篇<a href="http://blog.paphus.com/blog/2012/07/21/octopress-and-org-mode/"> 文章 </a>中曾介绍过一种从 <a href="http://www.gnu.org/software/emacs/">Emacs</a> 的 <a href="http://orgmode.org/">Org-Mode</a> 中导出文章到Octopress的方法，但这种方法使用简单的HTML导出，会失去语法高亮的特性。为此我将方法重新进行了设计，并且得到了一种更好的方法来取代之前不靠谱的方法。
</p>
<p>
首先，你需要根据  <a href="http://octopress.org/">Octopress</a> 的官方说明进行设置。我在Clone好Octopress的代码库后，进入克隆产生的目录并执行以下命令：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">  <span class="c">#!/bin/sh</span>
</span><span class="line">  <span class="c">#</span>
</span><span class="line">  curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class="line">  <span class="nb">source</span> ~/.rvm/scripts/rvm
</span><span class="line">  rvm install 1.9.2
</span><span class="line">  rvm rubygems latest
</span><span class="line">  gem install bundler
</span><span class="line">  bundle install
</span><span class="line">  rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>


像之前介绍的那样，我们需要在 <code>.emacs</code> 中新增一个叫 <code>save-then-publish</code> 的命令。

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Save Then Publish  </span><a href="http://doc.norang.ca/org-mode.html">source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line">  <span class="p">(</span><span class="nf">defun</span> <span class="nv">save-then-publish</span> <span class="p">()</span>
</span><span class="line">    <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">save-buffer</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">org-save-all-org-buffers</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">org-publish-current-project</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


接下来，我们需要设置Org-mode的工程。以我的配置举例来说，我将Octopress的文章放置在 <code>~/git/blog/</code> 目录下。如果你需要将你的文章放在其它什么地方，记得修改下面配置中相应的路径。

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Publish Projects  </span><a href="http://jaderholm.com/blog/blogging-with-org-mode-and-octopress">source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line">  <span class="p">(</span><span class="nf">setq</span> <span class="nv">org-publish-project-alist</span>
</span><span class="line">        <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;blog-org&quot;</span> <span class="o">.</span>  <span class="p">(</span><span class="nf">:base-directory</span> <span class="s">&quot;~/git/blog/source/org_posts/&quot;</span>
</span><span class="line">                                          <span class="nv">:base-extension</span> <span class="s">&quot;org&quot;</span>
</span><span class="line">                                          <span class="nv">:publishing-directory</span> <span class="s">&quot;~/git/blog/source/_posts/&quot;</span>
</span><span class="line">                                          <span class="nv">:sub-superscript</span> <span class="s">&quot;&quot;</span>
</span><span class="line">                                          <span class="nv">:recursive</span> <span class="nv">t</span>
</span><span class="line">                                          <span class="nv">:publishing-function</span> <span class="nv">org-publish-org-to-octopress</span>
</span><span class="line">                                          <span class="nv">:headline-levels</span> <span class="mi">4</span>
</span><span class="line">                                          <span class="nv">:html-extension</span> <span class="s">&quot;markdown&quot;</span>
</span><span class="line">                                          <span class="nv">:octopress-extension</span> <span class="s">&quot;markdown&quot;</span>
</span><span class="line">                                          <span class="nv">:body-only</span> <span class="nv">t</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="s">&quot;blog-extra&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="nf">:base-directory</span> <span class="s">&quot;~/git/blog/source/org_posts/&quot;</span>
</span><span class="line">                                           <span class="nv">:publishing-directory</span> <span class="s">&quot;~/git/blog/source/&quot;</span>
</span><span class="line">                                           <span class="nv">:base-extension</span> <span class="s">&quot;css\\|pdf\\|png\\|jpg\\|gif\\|svg&quot;</span>
</span><span class="line">                                           <span class="nv">:publishing-function</span> <span class="nv">org-publish-attachment</span>
</span><span class="line">                                           <span class="nv">:recursive</span> <span class="nv">t</span>
</span><span class="line">                                           <span class="nv">:author</span> <span class="nv">nil</span>
</span><span class="line">                                           <span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="s">&quot;blog&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="nf">:components</span> <span class="p">(</span><span class="s">&quot;blog-org&quot;</span> <span class="s">&quot;blog-extra&quot;</span><span class="p">)))</span>
</span><span class="line">          <span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


现在，我们开始修改代码目录中的 <code>Rakefile</code> 文件。打开它找到 <b>Misc Configs</b> 设置部分，参照下面例子分别修改 <code>new_post_ext</code> 和 <code>new_page_ext</code> 的内容并添加 <code>org_posts_dir</code> 项:

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile  </span><a href="https://gist.github.com/1244494">source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">  ## -- Misc Configs -- ##
</span><span class="line">
</span><span class="line">  public_dir      = &quot;public&quot;    # compiled site directory
</span><span class="line">  source_dir      = &quot;source&quot;    # source file directory
</span><span class="line">  blog_index_dir  = &#39;source&#39;    # directory for your blog&#39;s index page (if you put your index in source/blog/index.html, set this to &#39;source/blog&#39;)
</span><span class="line">  deploy_dir      = &quot;_deploy&quot;   # deploy directory (for Github pages deployment)
</span><span class="line">  stash_dir       = &quot;_stash&quot;    # directory to stash posts for speedy generation
</span><span class="line">  posts_dir       = &quot;_posts&quot;    # directory for blog files
</span><span class="line">  org_posts_dir   = &quot;org_posts&quot;
</span><span class="line">  themes_dir      = &quot;.themes&quot;   # directory for blog files
</span><span class="line">  new_post_ext    = &quot;org&quot;  # default new post file extension when using the new_post task
</span><span class="line">  new_page_ext    = &quot;org&quot;  # default new page file extension when using the new_page task
</span><span class="line">  server_port     = &quot;4000&quot;      # port for preview server eg. localhost:4000
</span></code></pre></td></tr></table></div></figure></notextile></div>


接着修改 <code>Rakefile</code> ，找到下面代码所示的部分并添加 <code>BEGIN_HTML</code> 和 <code>END_HTML</code> 。这样，我们新建文章的时候就能自动生成相应的HTML标签了。

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile  </span><a href="https://gist.github.com/1244494">source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">      post.puts &quot;#+BEGIN_HTML&quot;
</span><span class="line">      post.puts &quot;---&quot;
</span><span class="line">      post.puts &quot;layout: post&quot;
</span><span class="line">      post.puts &quot;title: \&quot;#{title.gsub(/&amp;/,&#39;&amp;amp;&#39;)}\&quot;&quot;
</span><span class="line">      post.puts &quot;date: #{Time.now.strftime(&#39;%Y-%m-%d %H:%M&#39;)}&quot;
</span><span class="line">      post.puts &quot;comments: true&quot;
</span><span class="line">      post.puts &quot;categories: &quot;
</span><span class="line">      post.puts &quot;---&quot;
</span><span class="line">      post.puts &quot;#+END_HTML&quot;
</span></code></pre></td></tr></table></div></figure></notextile></div>


现在，我们可以使用我修改后的HTML导出插件来生成新的文章了。我修改后的导出插件放置在github上，地址在 <a href="https://github.com/craftkiller/orgmode-octopress">https://github.com/craftkiller/orgmode-octopress</a> 。你也可以直接通过 <a href="https://raw.github.com/craftkiller/orgmode-octopress/master/org-octopress.el">org-octopress.el</a> <sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>来下载。将下载的文件存放在你emacs的load-path中，并通过 <code>(require 'org-octopress)</code> 命令来加载。因为我的git代码都存放在 <code>~/git/</code> 目录下，所以我的Emacs配置是这样的：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line">  <span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;load-path</span> <span class="s">&quot;~/git/orgmode-octopress&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;org-octopress</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


终于可以写作了！但是写作之前，你必须像下面示例那样先新增一个org文件并将它移动到org_posts目录下：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">  <span class="nb">cd </span>blog
</span><span class="line">  rake <span class="s2">&quot;new_post[title]&quot;</span>
</span><span class="line">  mv <span class="nb">source</span>/_posts/2012-08-01-title.org <span class="nb">source</span>/org_posts/
</span><span class="line">  <span class="c"># I keep my posts in GIT so then I add it to the repo</span>
</span><span class="line">  git add <span class="nb">source</span>/org_posts/2012-08-01-title.org
</span></code></pre></td></tr></table></div></figure></notextile></div>


写完文章后，在Emacs中执行 <code>M-x save-then-publish</code> ，然后你可以到shell中执行 <code>rake gen_deploy</code>. 这样，你的文章就成功的发布到网上了。
</p>
<p>
我这次改进主要新增了代码模块的语法高亮特性，不过目前它只能支持小写的 <code>begin_src</code> <code>end_src</code> 代码块。 另外，它也支持 <code>:title</code> <code>:url</code> 和 <code>:urltext</code> 选项。如果你想了解他们的用法，可以看看这篇博文的源代码:<a href="http://blog.paphus.com/org\_posts/2012-08-01-introducing-octopress-blogging-for-org-mode.org">http://blog.paphus.com/org_posts/2012-08-01-introducing-octopress-blogging-for-org-mode.org</a> 。如果有谁希望帮助改进这个HTML导出插件的话，欢迎在github加入。
</p>
<p>
最后，你也许需要修改你的 <code>.htaccess</code> 文件来重定向图像请求。我重定向了所有SVG文件的请求到根目录上，这样静态链接就不会在访问图像的时候报错了。你需要将 <code>.htaccess</code> 文件放置在 <code>source</code> 目录下。

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>.htaccess  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">  Options +FollowSymlinks
</span><span class="line">  RewriteEngine on
</span><span class="line">  RewriteBase /
</span><span class="line">  RewriteRule /([^/]+)\.(svg)$ /$1.$2 [R,L]
</span></code></pre></td></tr></table></div></figure></notextile></div>


</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> 译者注：注意，该插件只支持Emacs 24.x。之前就因为Emacs版本原因，一直无法使用。
</p>



</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建Linux下的分布式编译系统]]></title>
    <link href="http://xeonxu.github.com/blog/2012/08/30/da-jian-linuxxia-de-fen-bu-shi-bian-yi-xi-tong/"/>
    <updated>2012-08-30T23:46:00+08:00</updated>
    <id>http://xeonxu.github.com/blog/2012/08/30/da-jian-linuxxia-de-fen-bu-shi-bian-yi-xi-tong</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 概述</a></li>
<li><a href="#sec-2">2 分布式编译系统的搭建</a>
<ul>
<li><a href="#sec-2-1">2.1 distcc简介</a></li>
<li><a href="#sec-2-2">2.2 distcc的安装</a></li>
<li><a href="#sec-2-3">2.3 distcc的配置</a>
<ul>
<li><a href="#sec-2-3-1">2.3.1 服务器端配置</a></li>
<li><a href="#sec-2-3-2">2.3.2 客户端配置</a></li>
</ul>
</li>
<li><a href="#sec-2-4">2.4 验证distcc</a></li>
</ul>
</li>
<li><a href="#sec-3">3 使用distcc进行效率对比</a>
<ul>
<li><a href="#sec-3-1">3.1 编译emacs</a></li>
<li><a href="#sec-3-2">3.2 编译Android的Linux内核</a></li>
</ul>
</li>
<li><a href="#sec-4">4 Android代码的分布式编译</a></li>
<li><a href="#sec-5">5 总结</a></li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">概述</h2>
<div class="outline-text-2" id="text-1">

<p>在公司做手机软件研发已有一年多，前前后后接触过三种手机系统：MStar，MTK和Android。他们有一个共同的特点：代码非常庞大，每种系统都有超过1GB的源代码。如此大量的代码，编译起来是相当缓慢的。实际中，如果使用一台普通四核的机器进行编译的话，将至少需要一个小时才能完成一次完整的编译。长时间的编译等待，对于研发来讲是个极大的浪费。
</p>
<p>
好在事情没有一路悲剧，因为实际中确有一种方法可以提高代码的编译速度，那就是通过分布式编译工具来加速编译工作。何谓分布式编译？简而言之，就是借网络上其他电脑的空闲CPU给自己使用，从而加速编译工作。一般来讲，通过分布式编译工具可以借到的CPU数量是10至20个，这10到20个借来的CPU足以将编译效率提高300%~400%。像MStar系统如果使用分布式编译的话，完整的编译时间将会缩短到15分钟左右！相比单机一个多小时的编译时间来讲，这是非常大的效率提升！
</p>
<p>
Windows下的Incredibuild就是一款成熟的常用分布式编译软件，它提供编译协同处理，可以很好的协同网络上的其他计算机获取和利用他们的空余计算能力进行代码编译。开发MStar和MTK时，就是利用Incredibuild实现的分布编译。遗憾的是Android的系统开发将平台换成了Linux，Linux上有没有办法使用分布式编译呢？答案是肯定的。本文就将探讨如何在Linux上搭建及使用分布式编译系统。
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">分布式编译系统的搭建</h2>
<div class="outline-text-2" id="text-2">

<p>分布式编译系统，其实分两部分：编译器程序和分布式编译协同程序，像前面说的Windows下的Incredibuild软件其实就是分布式编译协同软件。编译器部分不用担心，Linux下的编译器种类非常丰富，有商业的也有开源的，一般我们使用开源的GCC系列编译器。而分布式协同软件，我们同样选择开源的distcc。
</p>

</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1">distcc简介</h3>
<div class="outline-text-3" id="text-2-1">

<p>distcc是一款符合GPL协议开源的分布式编译协同软件，它分为两个部分:distcc-client和distcc-server。distcc-client将代码的编译请求发送到distcc-server上，而distcc-server则会对代码按要求进行编译后回传至请求方，从而完成编译代码的动作。client可以和server装在同一台电脑上，也即是说一台电脑可以利用其他电脑进行分布编译，也可以在空闲的时候为其他电脑提供分布编译服务。下面，我们将着重讲解如何安装，配置和使用distcc。
</p>
</div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2">distcc的安装</h3>
<div class="outline-text-3" id="text-2-2">

<p>distcc的项目主页为：<a href="http://code.google.com/p/distcc/">http://code.google.com/p/distcc/</a>， 主页上提供源代码以及安装包的下载。安装包默认提供deb和rpm软件包，分别用来适应Debian系和RedHat系的Linux系统，可以直接安装。如果比较追新和在意个性化定制，也可以下载最新的源代码进行编译后使用。本文采用编译源代码的方法进行安装。
从官网下载最新的 <code>3.1</code> 版的distcc软件包，名称为： <code>distcc-3.1.tar.bz2</code> 。
</p>
<p>
假如软件包下载后存放在 <code>~/Downloads</code> 目录下，使用命令：
</p>



<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">mkdir -p ~/temp <span class="o">&amp;&amp;</span> tar jxvf ~/Downloads/distcc-3.1.tar.bz2 -C ~/temp
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>
将其解压至个人目录中的临时目录： <code>~/temp</code> 下。然后执行：
</p>



<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">cd</span> ~/temp
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">sudo make install
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>
安装时需要输入自己的密码，如果顺利的话，就会看到distcc安装完成了。不过目前这种状态还不能使用，需要对distcc进行配置。
</p>
</div>

</div>

<div id="outline-container-2-3" class="outline-3">
<h3 id="sec-2-3">distcc的配置</h3>
<div class="outline-text-3" id="text-2-3">

<p>配置分为两部分，客户端和服务端的配置，主要的配置文件存放在 <code>/etc/distcc</code> 目录下。
</p>

</div>

<div id="outline-container-2-3-1" class="outline-4">
<h4 id="sec-2-3-1">服务器端配置</h4>
<div class="outline-text-4" id="text-2-3-1">

<p>假设当前电脑所在网络IP地址为： <code>172.16.149.22</code> ，需要 <code>172.16</code> 网段的电脑都能够访问这台分布编译服务器，那么做如下配置：
</p>
<p>
修改 <code>/etc/distcc/client.allow</code> ，在最后一行添加
</p>



<pre class="example">#允许172.16网段的所有电脑连接本服务器
172.16.0.0/16
</pre>


<p>
修改 <code>/etc/distcc/commands.allow.sh</code> ，在 <code>allowed_compilers</code> 段里加入需要访问到的编译器程序。注意这里编译器程序可以使用通配符，但是路径需要使用绝对路径，否则会拒绝访问相应的编译器。此例中配置允许访问存放在 <code>/usr/local/</code> 目录下gcc的 <code>arm-eabi-4.4.3</code> 交叉编译器，实际配置中需要根据需要做修改。
</p>



<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>commands.allow.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">allowed_compilers</span><span class="o">=</span><span class="s2">&quot;</span>
</span><span class="line"><span class="s2">  /usr/bin/cc</span>
</span><span class="line"><span class="s2">  /usr/bin/c++</span>
</span><span class="line"><span class="s2">  /usr/bin/c89</span>
</span><span class="line"><span class="s2">  /usr/bin/c99</span>
</span><span class="line"><span class="s2">  /usr/bin/gcc</span>
</span><span class="line"><span class="s2">  /usr/bin/g++</span>
</span><span class="line"><span class="s2">  /usr/bin/*gcc-*</span>
</span><span class="line"><span class="s2">  /usr/bin/*g++-*</span>
</span><span class="line"><span class="s2">  /usr/local/arm-eabi-4.4.3/bin/*gcc*</span>
</span><span class="line"><span class="s2">  /usr/local/arm-eabi-4.4.3/bin/*g++*</span>
</span><span class="line"><span class="s2">  /usr/local/arm-eabi-4.4.3/bin/*ld*</span>
</span><span class="line"><span class="s2">  /usr/local/arm-eabi-4.4.3/bin/*ar*</span>
</span><span class="line"><span class="s2">  /usr/local/arm-eabi-4.4.3/bin/*as*</span>
</span><span class="line"><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>
将 <code>/usr/local/arm-eabi-4.4.3/bin/</code> 加入到访问路径中，修改 <code>~/.bash_profile</code> 文件，添加以下内容：
</p>



<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/arm-eabi-4.4.3/bin/:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>
修改 <code>/etc/init.d/distcc</code> ,在
</p>



<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">EXEC</span><span class="o">=</span><span class="s2">&quot;/usr/bin/distccd&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>
下面添加一行
</p>



<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/arm-eabi-4.4.0/bin/:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>
上述文件都改好保存后，退出到命令行界面，重启distcc服务程序：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo /etc/init.d/distcc restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

好了，这样一台服务器就算配置完成了。将网络上可以提供编译服务的电脑，全部参照如此配置进行设置。这样就拥有一群可以提供分布编译服务的计算机群了。
</p>
</div>

</div>

<div id="outline-container-2-3-2" class="outline-4">
<h4 id="sec-2-3-2">客户端配置</h4>
<div class="outline-text-4" id="text-2-3-2">

<p>相对于服务器端的配置来说，客户端的配置非常简单。只需要修改 <code>/etc/distcc/hosts</code> 文件即可。
修改 <code>/etc/distcc/hosts</code> ，加入配置好的服务器IP即可，一行一个IP地址，如：
</p>


<pre class="example">172.16.149.45
172.16.149.14
172.16.149.60
172.16.149.20
#本机也加入分布编译服务器群组
localhost
</pre>


<p>
然后定义 <code>CROSS_COMPILE</code> 环境变量，以之前配置的 <code>arm-eabi-gcc</code> 交叉编译器为例，如下定义：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;distcc arm-eabi-&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

至此，distcc的配置全部完成，可以使用了。
</p>
</div>
</div>

</div>

<div id="outline-container-2-4" class="outline-3">
<h3 id="sec-2-4">验证distcc</h3>
<div class="outline-text-3" id="text-2-4">

<p>在客户端电脑上进入开源代码目录中执行，上执行

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">make clean;make -j4 <span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;distcc gcc&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

然后在同一台客户机的另一终端上执行：

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">watch distccmon-text
</span></code></pre></td></tr></table></div></figure></notextile></div>

如果看到类似如下信息，则表明distcc安装配置正常。
</p>


<pre class="example">Every 2.0s: distccmon-text                            Mon Oct 24 15:29:40 2011

  8836  Compile     state.c                                  172.16.149.45[0]
  8808  Connect     climasq.c                                172.16.149.14[2]
  8807  Connect     backoff.c                                172.16.149.60[3]
  8839  Preprocess  strip.c                                  172.16.149.60[0]
</pre>

<p>
如果显示Block之类的信息，请检查对方服务器上的 <code>client.allow</code> 是否正确，同时需要确保服务器上的3632端口没有被防火墙拦住。
</p>
</div>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">使用distcc进行效率对比</h2>
<div class="outline-text-2" id="text-3">

<p>本例中使用3台单核2.6G的电脑群组做编译实验，分别对单机编译和分布编译时间进行比较。对比中会分别编译emacs23代码和交叉编译Android的linux内核代码。
</p>

</div>

<div id="outline-container-3-1" class="outline-3">
<h3 id="sec-3-1">编译emacs</h3>
<div class="outline-text-3" id="text-3-1">

<p>下载并解压emacs23代码，目录为： <code>~/Downloads/emacs-23.3/</code>
</p>
<p>
首先非分布式编译，使用8个线程。执行

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">cd</span> ~/Downloads/emacs-23.3
</span><span class="line">./configure
</span><span class="line">make clean
</span><span class="line"><span class="nb">time </span>make -j8
</span></code></pre></td></tr></table></div></figure></notextile></div>

编译完成后结果为：
</p>


<pre class="example">real    3m14.220s
user    2m24.740s
sys     0m48.610s
</pre>

<p>
然后使用分布式编译，同样使用8个线程。执行

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">cd</span> ~/Downloads/emacs-23.3
</span><span class="line">./configure
</span><span class="line">make clean
</span><span class="line"><span class="nb">time </span>make -j8 <span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;distcc gcc&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

编译完成后结果为：
</p>


<pre class="example">real    2m24.330s
user    1m38.630s
sys     0m37.600s
</pre>

<p>
可以看到编译时间减少了50秒，cpu的占用也明显减小了不少。
</p>
</div>

</div>

<div id="outline-container-3-2" class="outline-3">
<h3 id="sec-3-2">编译Android的Linux内核</h3>
<div class="outline-text-3" id="text-3-2">

<p>假设Android的Linux内核存目录为： <code>~/Downloads/Android2.3_kernel_v1.01</code>
</p>
<p>
同样首先非分布式编译，使用8个线程。由于之前设置过 <code>CROSS_COMPILE</code> 变量，现在单机编译需要重新设置该变量。

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;arm-eabi-&quot;</span>
</span><span class="line"><span class="nb">cd</span> ~/Downloads/Android2.3_kernel_v1.01
</span><span class="line">make clean
</span><span class="line"><span class="nb">time </span>make -j8
</span></code></pre></td></tr></table></div></figure></notextile></div>

编译完成后结果为：
</p>


<pre class="example">real    6m32.640s
user    4m22.040s
sys     2m9.160s
</pre>

<p>
然后分布式编译，使用8个线程。执行

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">export </span><span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">&quot;distcc arm-eabi-&quot;</span>
</span><span class="line"><span class="nb">cd</span> ~/Downloads/Android2.3_kernel_v1.01
</span><span class="line">make clean
</span><span class="line"><span class="nb">time </span>make -j8
</span></code></pre></td></tr></table></div></figure></notextile></div>

编译完成后结果为：
</p>


<pre class="example">real    3m42.140s
user    2m10.630s
sys     1m20.240s
</pre>

<p>
可以看到编译时间减少了2分50秒，接近一半的水平了，分布编译的性能提升非常明显。
</p>
<p>
从以上两个实验可以看出，对于使用纯C程序编写的软件项目，如：Linux内核，distcc提供的分布编译效率非常显著。而对于混合有其他程序语言的项目，如Emacs<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>，效率提升就不是那么显著了。
</p>
</div>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Android代码的分布式编译</h2>
<div class="outline-text-2" id="text-4">

<p>Android的代码比较特殊，一部分是C程序，而另一部分为JAVA程序。所以分布编译的时候只能对C程序部分生效。同时，Android代码包包含完整的交叉编译工具链，编译时会使用自己代码包中的工具链进行编译，所以我们之前设置的 <code>CROSS_COMPILE</code> 环境变量会失效。好在解决办法也不是没有，做如下修改即可：
</p>
<p>
修改Android代码目录中的 <code>build/core/combo/select.mk</code> 文件

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>build/core/combo/select.mk  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="makefile"><span class="line"><span class="c"># (...省略...)</span>
</span><span class="line"><span class="c"># Now include the combo for this specific target.</span>
</span><span class="line"><span class="cp">include $(BUILD_COMBOS)/$(combo_target)$(combo_os_arch).mk</span>
</span><span class="line">
</span><span class="line"><span class="c">#使用distcc修改 BEGIN</span>
</span><span class="line"><span class="cp">ifneq ($(USE_DISTCC),)</span>
</span><span class="line">  distcc :<span class="o">=</span> distcc
</span><span class="line"><span class="cp">  ifneq ($(distcc),$(firstword $($(combo_target)CC)))</span>
</span><span class="line"><span class="cp">    ifeq ($(dir $($(combo_target)CC)),./)</span>
</span><span class="line">      <span class="k">$(</span>combo_target<span class="k">)</span>CC :<span class="o">=</span> <span class="k">$(</span>distcc<span class="k">)</span> <span class="k">$($(</span>combo_target<span class="k">)</span>CC<span class="k">)</span>
</span><span class="line"><span class="cp">    else</span>
</span><span class="line">      <span class="k">$(</span>combo_target<span class="k">)</span>CC :<span class="o">=</span> <span class="k">$(</span>distcc<span class="k">)</span> <span class="k">$(</span>abspath <span class="k">$($(</span>combo_target<span class="k">)</span>CC<span class="k">))</span>
</span><span class="line"><span class="cp">    endif</span>
</span><span class="line"><span class="cp">  endif</span>
</span><span class="line"><span class="cp">  ifneq ($(distcc),$(firstword $($(combo_target)CXX)))</span>
</span><span class="line"><span class="cp">    ifeq ($(dir $($(combo_target)CXX)),./)</span>
</span><span class="line">      <span class="k">$(</span>combo_target<span class="k">)</span>CXX :<span class="o">=</span> <span class="k">$(</span>distcc<span class="k">)</span> <span class="k">$($(</span>combo_target<span class="k">)</span>CXX<span class="k">)</span>
</span><span class="line"><span class="cp">    else</span>
</span><span class="line">      <span class="k">$(</span>combo_target<span class="k">)</span>CXX :<span class="o">=</span> <span class="k">$(</span>distcc<span class="k">)</span> <span class="k">$(</span>abspath <span class="k">$($(</span>combo_target<span class="k">)</span>CXX<span class="k">))</span>
</span><span class="line"><span class="cp">    endif</span>
</span><span class="line"><span class="cp">  endif</span>
</span><span class="line">  <span class="nv">distcc</span> <span class="o">=</span>
</span><span class="line"><span class="cp">endif</span>
</span><span class="line"><span class="c">#使用distcc修改 END</span>
</span><span class="line">
</span><span class="line"><span class="cp">ifneq ($(USE_CCACHE),)</span>
</span><span class="line">  CCACHE_HOST_TAG :<span class="o">=</span> <span class="k">$(</span>HOST_PREBUILT_TAG<span class="k">)</span>
</span><span class="line"><span class="c">  # If we are cross-compiling Windows binaries on Linux</span>
</span><span class="line"><span class="c"># (...省略...)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


之后，执行

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">. ./build/envsetup.sh
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">USE_CCACHE</span><span class="o">=</span>1
</span><span class="line"><span class="nb">export </span><span class="nv">USE_DISTCC</span><span class="o">=</span>1
</span><span class="line">
</span><span class="line">make -j16
</span></code></pre></td></tr></table></div></figure></notextile></div>


我这里使用6台XEON四核单机组成的集群做出来的结果是：
</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption>Android编译结果比较</caption>
<colgroup><col class="left" /><col class="left" /><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">不开启分布编译</th><th scope="col" class="left">开启分布编译第一次</th><th scope="col" class="left">开启分布编译第二次</th></tr>
</thead>
<tbody>
<tr><td class="left">real    37m49.735s</td><td class="left">real    34m1.854s</td><td class="left">real    31m7.957s</td></tr>
<tr><td class="left">user    107m13.238s</td><td class="left">user    55m57.950s</td><td class="left">user    52m28.229s</td></tr>
<tr><td class="left">sys     9m55.805s</td><td class="left">sys     26m40.228s</td><td class="left">sys     21m22.468s</td></tr>
</tbody>
</table>

可以看出有一定的效率提升，但是非常有限，只有区区8分钟不到的提升。我将其原因归结于以下几个原因：
<ol>
<li>磁盘瓶颈。编译过程中需要读写大量中间文件，磁盘的读写速度限制了编译程序的处理能力；
</li>
<li>编译JAVA时不能分布式。如前面所述，Android代码中有一部分时JAVA代码。而JAVA代码在编译的时候是不能应用到distcc的分布式能力的，所以这方面也拖了编译速度的后腿。
</li>
<li>没有根据服务器的CPU处理能力进行任务分发优化。distcc默认是没有任务分发优化的，需要配合使用dmucs程序才能实现。据说配合了dmucs后，性能还能提升30%~50%。不过如何配置使用dmucs就不是本文的主题了，也希望通过我这抛出的“砖”能引出配置dmucs的“玉”来。
</li>
</ol>


</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">总结</h2>
<div class="outline-text-2" id="text-5">

<p>总体来讲，使用distcc这个工具可以大幅提高编译代码的效率。但这个工具只能针对C++、ObjC、C等C系列语言生效；而对于像Android这种有一半代码是JAVA的系统来说，联编优势就不那么显著了。尽管如此，distcc带来的200%的编译效率提升，还是值得使用的。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> Emacs源码中包含不少的elisp程序，这些elisp程序也在make编译阶段进行编译，从而成为elc文件。
</p>



</div>
</div>

</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://xeonxu.github.com/blog/2012/08/26/hello-world/"/>
    <updated>2012-08-26T20:56:00+08:00</updated>
    <id>http://xeonxu.github.com/blog/2012/08/26/hello-world</id>
    <content type="html"><![CDATA[<h1 id="blog">关于本Blog</h1>
<p>自己是一个很懒散的人，从接触电脑开始到现在不下14个年头，但要说自己做过什么，一时间还真难以回答。零星的积累都随我那善变的爱好一去不返了，让人有种虚度光阴的感觉。自己也不是没有做过尝试，开玩网络之初就在MyOpera上建立了自己的Blog，当然内容以个人日记流水账为主，那时真是快乐的单身年代。可是用了一段MyOpera后总觉得界面和功能不禁人意，而此时的Google正如火如荼，于是便赶了潮流在Blogspot上搭建了人生第二个Blog。可惜好景不长，Blogspot在国内越来越难以访问，原因大家懂的。慢慢的，也就淡了。然而随之时间的流逝，也许是老了，总觉得不记录些什么有愧于人生，从而有了再建立一个Blog的想法。当然，建立本Blog还有以下几个原因:</p>

<ol>
  <li>之前两个博客太过生活化，流水账没有重点。虽说这也是记录博客的一种方式，但是自己想做点改变。</li>
  <li>想把自己工作中的一些经验和生活中的感悟，都点点滴滴的记录下来，希望到老了的时候看到时，不会后悔曾经浪费了生命。</li>
  <li>作为程序员和Emacs追随者，没有不用github和org-mode的理由。加之Emacs又有可以将org-file很好地转换为Octopress Markdown格式的插件，没理由拒绝。</li>
</ol>

<p>最后以一个程序员最惯用的开场白来向各位打个招呼:Hello World!</p>
]]></content>
  </entry>
  
</feed>
